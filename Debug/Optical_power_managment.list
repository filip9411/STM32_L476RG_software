
Optical_power_managment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d0c  08004d0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d14  08004d14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  08004d28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004d28  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d78  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270b  00000000  00000000  00034db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000374c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00038728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002879a  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014293  00000000  00000000  00062022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103123  00000000  00000000  000762b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001793d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e18  00000000  00000000  0017942c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cac 	.word	0x08004cac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cac 	.word	0x08004cac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004e4:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <MX_ADC1_Init+0xe8>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000504:	2204      	movs	r2, #4
 8000506:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800050a:	2200      	movs	r2, #0
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000524:	2200      	movs	r2, #0
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800052a:	2200      	movs	r2, #0
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000538:	2200      	movs	r2, #0
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	4817      	ldr	r0, [pc, #92]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000546:	f000 feab 	bl	80012a0 <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000550:	f000 fa72 	bl	8000a38 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	4619      	mov	r1, r3
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000560:	f001 fd26 	bl	8001fb0 <HAL_ADCEx_MultiModeConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800056a:	f000 fa65 	bl	8000a38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_ADC1_Init+0xec>)
 8000570:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000572:	2306      	movs	r3, #6
 8000574:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800057a:	237f      	movs	r3, #127	; 0x7f
 800057c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800057e:	2304      	movs	r3, #4
 8000580:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800058c:	f001 f898 	bl	80016c0 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000596:	f000 fa4f 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	50040000 	.word	0x50040000
 80005ac:	c7520000 	.word	0xc7520000

080005b0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_ADC2_Init+0xbc>)
 80005c8:	4a29      	ldr	r2, [pc, #164]	; (8000670 <MX_ADC2_Init+0xc0>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_ADC2_Init+0xbc>)
 80005ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_ADC2_Init+0xbc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_ADC2_Init+0xbc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_ADC2_Init+0xbc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_ADC2_Init+0xbc>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC2_Init+0xbc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_ADC2_Init+0xbc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ADC2_Init+0xbc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_ADC2_Init+0xbc>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ADC2_Init+0xbc>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_ADC2_Init+0xbc>)
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_ADC2_Init+0xbc>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_ADC2_Init+0xbc>)
 800061c:	2200      	movs	r2, #0
 800061e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_ADC2_Init+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <MX_ADC2_Init+0xbc>)
 800062a:	f000 fe39 	bl	80012a0 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000634:	f000 fa00 	bl	8000a38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_ADC2_Init+0xc4>)
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	2306      	movs	r3, #6
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000644:	237f      	movs	r3, #127	; 0x7f
 8000646:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000648:	2304      	movs	r3, #4
 800064a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC2_Init+0xbc>)
 8000656:	f001 f833 	bl	80016c0 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000660:	f000 f9ea 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000002c 	.word	0x2000002c
 8000670:	50040100 	.word	0x50040100
 8000674:	04300002 	.word	0x04300002

08000678 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <HAL_ADC_MspInit+0xbc>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d115      	bne.n	80006c6 <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d13e      	bne.n	800072a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006c4:	e031      	b.n	800072a <HAL_ADC_MspInit+0xb2>
  else if(adcHandle->Instance==ADC2)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_ADC_MspInit+0xc8>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d12c      	bne.n	800072a <HAL_ADC_MspInit+0xb2>
    HAL_RCC_ADC_CLK_ENABLED++;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10b      	bne.n	80006fa <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC_CLK_ENABLE();
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <HAL_ADC_MspInit+0xc4>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_ADC_MspInit+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000716:	230b      	movs	r3, #11
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <HAL_ADC_MspInit+0xcc>)
 8000726:	f001 fe05 	bl	8002334 <HAL_GPIO_Init>
}
 800072a:	bf00      	nop
 800072c:	3728      	adds	r7, #40	; 0x28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	50040000 	.word	0x50040000
 8000738:	20000028 	.word	0x20000028
 800073c:	40021000 	.word	0x40021000
 8000740:	50040100 	.word	0x50040100
 8000744:	48000800 	.word	0x48000800

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a55      	ldr	r2, [pc, #340]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x170>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a4f      	ldr	r2, [pc, #316]	; (80008b8 <MX_GPIO_Init+0x170>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a49      	ldr	r2, [pc, #292]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <MX_GPIO_Init+0x170>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <MX_GPIO_Init+0x170>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a43      	ldr	r2, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x170>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <MX_GPIO_Init+0x170>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWITCH_GPIO_Port, SWITCH_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	483e      	ldr	r0, [pc, #248]	; (80008bc <MX_GPIO_Init+0x174>)
 80007c4:	f001 ff60 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f001 ff5a 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_inv_Pin|DE_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f242 0120 	movw	r1, #8224	; 0x2020
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007dc:	f001 ff54 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <MX_GPIO_Init+0x17c>)
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4831      	ldr	r0, [pc, #196]	; (80008bc <MX_GPIO_Init+0x174>)
 80007f6:	f001 fd9d 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <MX_GPIO_Init+0x174>)
 8000812:	f001 fd8f 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3109_PGOOD_Pin;
 8000816:	2310      	movs	r3, #16
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3109_PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f001 fd82 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000830:	2320      	movs	r3, #32
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 fd73 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RE_inv_Pin|DE_Pin;
 800084e:	f242 0320 	movw	r3, #8224	; 0x2020
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4816      	ldr	r0, [pc, #88]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000868:	f001 fd64 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3128_PGOOD_Pin;
 800086c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3128_PGOOD_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000882:	f001 fd57 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3105_PGOOD_Pin;
 8000886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3105_PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <MX_GPIO_Init+0x174>)
 800089c:	f001 fd4a 	bl	8002334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2028      	movs	r0, #40	; 0x28
 80008a6:	f001 fd0e 	bl	80022c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f001 fd27 	bl	80022fe <HAL_NVIC_EnableIRQ>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800
 80008c0:	48000400 	.word	0x48000400
 80008c4:	10210000 	.word	0x10210000

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f000 faaa 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f818 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f7ff ff38 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d8:	f000 f9d6 	bl	8000c88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008dc:	f7ff fdf0 	bl	80004c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80008e0:	f000 f9a2 	bl	8000c28 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80008e4:	f7ff fe64 	bl	80005b0 <MX_ADC2_Init>
  MX_TIM6_Init();
 80008e8:	f000 f942 	bl	8000b70 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // ADC measure
  HAL_ADC_Start(&hadc1);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <main+0x34>)
 80008ee:	f000 fe2d 	bl	800154c <HAL_ADC_Start>

  // Timer
  HAL_TIM_Base_Start_IT(&htim6);
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <main+0x38>)
 80008f4:	f003 fa76 	bl	8003de4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x30>
 80008fa:	bf00      	nop
 80008fc:	20000090 	.word	0x20000090
 8000900:	200000f4 	.word	0x200000f4

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0b8      	sub	sp, #224	; 0xe0
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090e:	2244      	movs	r2, #68	; 0x44
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f9c2 	bl	8004c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2288      	movs	r2, #136	; 0x88
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 f9b4 	bl	8004c9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2310      	movs	r3, #16
 8000944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 800095a:	2308      	movs	r3, #8
 800095c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000960:	2307      	movs	r3, #7
 8000962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800096c:	2308      	movs	r3, #8
 800096e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000976:	4618      	mov	r0, r3
 8000978:	f001 ff34 	bl	80027e4 <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000982:	f000 f859 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2303      	movs	r3, #3
 800098e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fb00 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009b6:	f000 f83f 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80009ba:	f244 0303 	movw	r3, #16387	; 0x4003
 80009be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80009c8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80009cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fcf3 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80009dc:	f000 f82c 	bl	8000a38 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e4:	f001 fea8 	bl	8002738 <HAL_PWREx_ControlVoltageScaling>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009ee:	f000 f823 	bl	8000a38 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	37e0      	adds	r7, #224	; 0xe0
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  /* Prevent unused argument(s) compilation warning */
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	80fb      	strh	r3, [r7, #6]

	  size = sprintf(data, "TEST_MESSAGE");
	  HAL_UART_Transmit(&huart1, &data, size, 100);
  }
#endif
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d104      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a22:	2120      	movs	r1, #32
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 fe46 	bl	80026b8 <HAL_GPIO_TogglePin>
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40001000 	.word	0x40001000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 fa00 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae8:	f001 fe00 	bl	80026ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM6_DAC_IRQHandler+0x10>)
 8000af6:	f003 f9e5 	bl	8003ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000f4 	.word	0x200000f4

08000b04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <SystemInit+0x64>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <SystemInit+0x64>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <SystemInit+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <SystemInit+0x68>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <SystemInit+0x68>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <SystemInit+0x68>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <SystemInit+0x68>)
 8000b30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <SystemInit+0x68>)
 8000b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <SystemInit+0x68>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <SystemInit+0x68>)
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <SystemInit+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SystemInit+0x64>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	40021000 	.word	0x40021000

08000b70 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b88:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b96:	22f9      	movs	r2, #249	; 0xf9
 8000b98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000ba2:	f003 f8c7 	bl	8003d34 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bac:	f7ff ff44 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000bbe:	f003 fb63 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bc8:	f7ff ff36 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000f4 	.word	0x200000f4
 8000bd8:	40001000 	.word	0x40001000

08000bdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_TIM_Base_MspInit+0x44>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d113      	bne.n	8000c16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_TIM_Base_MspInit+0x48>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_TIM_Base_MspInit+0x48>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2036      	movs	r0, #54	; 0x36
 8000c0c:	f001 fb5b 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c10:	2036      	movs	r0, #54	; 0x36
 8000c12:	f001 fb74 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40001000 	.word	0x40001000
 8000c24:	40021000 	.word	0x40021000

08000c28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <MX_USART1_UART_Init+0x5c>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c6c:	f003 fbb2 	bl	80043d4 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c76:	f7ff fedf 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000140 	.word	0x20000140
 8000c84:	40013800 	.word	0x40013800

08000c88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <MX_USART2_UART_Init+0x5c>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000ccc:	f003 fb82 	bl	80043d4 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cd6:	f7ff feaf 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200001c4 	.word	0x200001c4
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <HAL_UART_MspInit+0xdc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12a      	bne.n	8000d60 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Trans_Pin|UART_RX_Trans_Pin;
 8000d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f001 faeb 	bl	8002334 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5e:	e02d      	b.n	8000dbc <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d128      	bne.n	8000dbc <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f001 fabc 	bl	8002334 <HAL_GPIO_Init>
}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	; 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40013800 	.word	0x40013800
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40004400 	.word	0x40004400

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff fe96 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dda:	e003      	b.n	8000de4 <LoopCopyDataInit>

08000ddc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000de0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000de2:	3104      	adds	r1, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000de8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dec:	d3f6      	bcc.n	8000ddc <CopyDataInit>
	ldr	r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000df0:	e002      	b.n	8000df8 <LoopFillZerobss>

08000df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000df2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000df4:	f842 3b04 	str.w	r3, [r2], #4

08000df8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <LoopForever+0x16>)
	cmp	r2, r3
 8000dfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dfc:	d3f9      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 ff29 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fd61 	bl	80008c8 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e0c:	08004d1c 	.word	0x08004d1c
	ldr	r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e14:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e18:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e1c:	2000024c 	.word	0x2000024c

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_Init+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_Init+0x3c>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f001 fa38 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f80f 	bl	8000e64 <HAL_InitTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	e001      	b.n	8000e56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e52:	f7ff fdf7 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d023      	beq.n	8000ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_InitTick+0x70>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fa43 	bl	800231a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d809      	bhi.n	8000eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f001 fa0d 	bl	80022c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e004      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e001      	b.n	8000ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000248 	.word	0x20000248

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000248 	.word	0x20000248

08000f1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	609a      	str	r2, [r3, #8]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3360      	adds	r3, #96	; 0x60
 8000f96:	461a      	mov	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <LL_ADC_SetOffset+0x44>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	03fff000 	.word	0x03fff000

08000fcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3360      	adds	r3, #96	; 0x60
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3360      	adds	r3, #96	; 0x60
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800102e:	b480      	push	{r7}
 8001030:	b087      	sub	sp, #28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3330      	adds	r3, #48	; 0x30
 800103e:	461a      	mov	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	4413      	add	r3, r2
 800104c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	211f      	movs	r1, #31
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0e9b      	lsrs	r3, r3, #26
 8001066:	f003 011f 	and.w	r1, r3, #31
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001086:	b480      	push	{r7}
 8001088:	b087      	sub	sp, #28
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3314      	adds	r3, #20
 8001096:	461a      	mov	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	0e5b      	lsrs	r3, r3, #25
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	4413      	add	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	0d1b      	lsrs	r3, r3, #20
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	2107      	movs	r1, #7
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0d1b      	lsrs	r3, r3, #20
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	431a      	orrs	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0318 	and.w	r3, r3, #24
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001100:	40d9      	lsrs	r1, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	400b      	ands	r3, r1
 8001106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110a:	431a      	orrs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	0007ffff 	.word	0x0007ffff

08001124 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001150:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6093      	str	r3, [r2, #8]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001178:	d101      	bne.n	800117e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800119c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011c8:	d101      	bne.n	80011ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <LL_ADC_IsEnabled+0x18>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <LL_ADC_IsEnabled+0x1a>
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800123a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123e:	f043 0204 	orr.w	r2, r3, #4
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b04      	cmp	r3, #4
 8001264:	d101      	bne.n	800126a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b08      	cmp	r3, #8
 800128a:	d101      	bne.n	8001290 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e136      	b.n	8001528 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff f9d5 	bl	8000678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff3f 	bl	8001164 <LL_ADC_IsDeepPowerDownEnabled>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff25 	bl	8001140 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff5a 	bl	80011b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff3e 	bl	800118c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001310:	4b87      	ldr	r3, [pc, #540]	; (8001530 <HAL_ADC_Init+0x290>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	099b      	lsrs	r3, r3, #6
 8001316:	4a87      	ldr	r2, [pc, #540]	; (8001534 <HAL_ADC_Init+0x294>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	3301      	adds	r3, #1
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001324:	e002      	b.n	800132c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff3c 	bl	80011b4 <LL_ADC_IsInternalRegulatorEnabled>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001346:	f043 0210 	orr.w	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff75 	bl	8001252 <LL_ADC_REG_IsConversionOngoing>
 8001368:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 80cf 	bne.w	8001516 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 80cb 	bne.w	8001516 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001388:	f043 0202 	orr.w	r2, r3, #2
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff35 	bl	8001204 <LL_ADC_IsEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d115      	bne.n	80013cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013a0:	4865      	ldr	r0, [pc, #404]	; (8001538 <HAL_ADC_Init+0x298>)
 80013a2:	f7ff ff2f 	bl	8001204 <LL_ADC_IsEnabled>
 80013a6:	4604      	mov	r4, r0
 80013a8:	4864      	ldr	r0, [pc, #400]	; (800153c <HAL_ADC_Init+0x29c>)
 80013aa:	f7ff ff2b 	bl	8001204 <LL_ADC_IsEnabled>
 80013ae:	4603      	mov	r3, r0
 80013b0:	431c      	orrs	r4, r3
 80013b2:	4863      	ldr	r0, [pc, #396]	; (8001540 <HAL_ADC_Init+0x2a0>)
 80013b4:	f7ff ff26 	bl	8001204 <LL_ADC_IsEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4323      	orrs	r3, r4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485f      	ldr	r0, [pc, #380]	; (8001544 <HAL_ADC_Init+0x2a4>)
 80013c8:	f7ff fda8 	bl	8000f1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7e5b      	ldrb	r3, [r3, #25]
 80013d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d106      	bne.n	8001408 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	3b01      	subs	r3, #1
 8001400:	045b      	lsls	r3, r3, #17
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_ADC_Init+0x2a8>)
 800142c:	4013      	ands	r3, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	430b      	orrs	r3, r1
 8001436:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff08 	bl	8001252 <LL_ADC_REG_IsConversionOngoing>
 8001442:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff15 	bl	8001278 <LL_ADC_INJ_IsConversionOngoing>
 800144e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d13d      	bne.n	80014d2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d13a      	bne.n	80014d2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001460:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001468:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001478:	f023 0302 	bic.w	r3, r3, #2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	69b9      	ldr	r1, [r7, #24]
 8001482:	430b      	orrs	r3, r1
 8001484:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800148c:	2b01      	cmp	r3, #1
 800148e:	d118      	bne.n	80014c2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800149a:	f023 0304 	bic.w	r3, r3, #4
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014ac:	4311      	orrs	r1, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014b2:	430a      	orrs	r2, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	e007      	b.n	80014d2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10c      	bne.n	80014f4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f023 010f 	bic.w	r1, r3, #15
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
 80014f2:	e007      	b.n	8001504 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020f 	bic.w	r2, r2, #15
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	f023 0303 	bic.w	r3, r3, #3
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
 8001514:	e007      	b.n	8001526 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151a:	f043 0210 	orr.w	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001526:	7ffb      	ldrb	r3, [r7, #31]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	053e2d63 	.word	0x053e2d63
 8001538:	50040000 	.word	0x50040000
 800153c:	50040100 	.word	0x50040100
 8001540:	50040200 	.word	0x50040200
 8001544:	50040300 	.word	0x50040300
 8001548:	fff0c007 	.word	0xfff0c007

0800154c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001554:	4857      	ldr	r0, [pc, #348]	; (80016b4 <HAL_ADC_Start+0x168>)
 8001556:	f7ff fde5 	bl	8001124 <LL_ADC_GetMultimode>
 800155a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe76 	bl	8001252 <LL_ADC_REG_IsConversionOngoing>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 809c 	bne.w	80016a6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_ADC_Start+0x30>
 8001578:	2302      	movs	r3, #2
 800157a:	e097      	b.n	80016ac <HAL_ADC_Start+0x160>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fc8b 	bl	8001ea0 <ADC_Enable>
 800158a:	4603      	mov	r3, r0
 800158c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 8083 	bne.w	800169c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a42      	ldr	r2, [pc, #264]	; (80016b8 <HAL_ADC_Start+0x16c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d002      	beq.n	80015ba <HAL_ADC_Start+0x6e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e000      	b.n	80015bc <HAL_ADC_Start+0x70>
 80015ba:	4b40      	ldr	r3, [pc, #256]	; (80016bc <HAL_ADC_Start+0x170>)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d002      	beq.n	80015ca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e2:	d106      	bne.n	80015f2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f023 0206 	bic.w	r2, r3, #6
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58
 80015f0:	e002      	b.n	80015f8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	221c      	movs	r2, #28
 80015fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2a      	ldr	r2, [pc, #168]	; (80016b8 <HAL_ADC_Start+0x16c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d002      	beq.n	8001618 <HAL_ADC_Start+0xcc>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	e000      	b.n	800161a <HAL_ADC_Start+0xce>
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_ADC_Start+0x170>)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	4293      	cmp	r3, r2
 8001620:	d008      	beq.n	8001634 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d002      	beq.n	8001634 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d114      	bne.n	800165e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800164a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fde7 	bl	800122a <LL_ADC_REG_StartConversion>
 800165c:	e025      	b.n	80016aa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_ADC_Start+0x16c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d002      	beq.n	800167a <HAL_ADC_Start+0x12e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	e000      	b.n	800167c <HAL_ADC_Start+0x130>
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_ADC_Start+0x170>)
 800167c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00f      	beq.n	80016aa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001692:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
 800169a:	e006      	b.n	80016aa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016a4:	e001      	b.n	80016aa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
 80016a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	50040300 	.word	0x50040300
 80016b8:	50040100 	.word	0x50040100
 80016bc:	50040000 	.word	0x50040000

080016c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0b6      	sub	sp, #216	; 0xd8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x22>
 80016de:	2302      	movs	r3, #2
 80016e0:	e3c7      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x7b2>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fdaf 	bl	8001252 <LL_ADC_REG_IsConversionOngoing>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 83a8 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d824      	bhi.n	800174e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	3b02      	subs	r3, #2
 800170a:	2b03      	cmp	r3, #3
 800170c:	d81b      	bhi.n	8001746 <HAL_ADC_ConfigChannel+0x86>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <HAL_ADC_ConfigChannel+0x54>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001725 	.word	0x08001725
 8001718:	0800172d 	.word	0x0800172d
 800171c:	08001735 	.word	0x08001735
 8001720:	0800173d 	.word	0x0800173d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	220c      	movs	r2, #12
 8001728:	605a      	str	r2, [r3, #4]
          break;
 800172a:	e011      	b.n	8001750 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2212      	movs	r2, #18
 8001730:	605a      	str	r2, [r3, #4]
          break;
 8001732:	e00d      	b.n	8001750 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2218      	movs	r2, #24
 8001738:	605a      	str	r2, [r3, #4]
          break;
 800173a:	e009      	b.n	8001750 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001742:	605a      	str	r2, [r3, #4]
          break;
 8001744:	e004      	b.n	8001750 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2206      	movs	r2, #6
 800174a:	605a      	str	r2, [r3, #4]
          break;
 800174c:	e000      	b.n	8001750 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800174e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	f7ff fc66 	bl	800102e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fd73 	bl	8001252 <LL_ADC_REG_IsConversionOngoing>
 800176c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fd7f 	bl	8001278 <LL_ADC_INJ_IsConversionOngoing>
 800177a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800177e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 81a6 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 81a1 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	461a      	mov	r2, r3
 80017a0:	f7ff fc71 	bl	8001086 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	08db      	lsrs	r3, r3, #3
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d00a      	beq.n	80017dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6919      	ldr	r1, [r3, #16]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017d6:	f7ff fbd5 	bl	8000f84 <LL_ADC_SetOffset>
 80017da:	e17b      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fbf2 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x148>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fbe7 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 021f 	and.w	r2, r3, #31
 8001806:	e01e      	b.n	8001846 <HAL_ADC_ConfigChannel+0x186>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fbdc 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800182a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800182e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001836:	2320      	movs	r3, #32
 8001838:	e004      	b.n	8001844 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800183a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_ADC_ConfigChannel+0x19e>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	e018      	b.n	8001890 <HAL_ADC_ConfigChannel+0x1d0>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800187a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001882:	2320      	movs	r3, #32
 8001884:	e004      	b.n	8001890 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001890:	429a      	cmp	r2, r3
 8001892:	d106      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbab 	bl	8000ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fb8f 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x20e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fb84 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	e01e      	b.n	800190c <HAL_ADC_ConfigChannel+0x24c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2101      	movs	r1, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fb79 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	e004      	b.n	800190a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x264>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0e9b      	lsrs	r3, r3, #26
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	e018      	b.n	8001956 <HAL_ADC_ConfigChannel+0x296>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800193c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001948:	2320      	movs	r3, #32
 800194a:	e004      	b.n	8001956 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800194c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001956:	429a      	cmp	r2, r3
 8001958:	d106      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb48 	bl	8000ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb2c 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10a      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x2d4>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2102      	movs	r1, #2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb21 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 021f 	and.w	r2, r3, #31
 8001992:	e01e      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x312>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2102      	movs	r1, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb16 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019c2:	2320      	movs	r3, #32
 80019c4:	e004      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x32a>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0e9b      	lsrs	r3, r3, #26
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	e016      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x358>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e004      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2102      	movs	r1, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fae7 	bl	8000ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2103      	movs	r1, #3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff facb 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x396>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2103      	movs	r1, #3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fac0 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	0e9b      	lsrs	r3, r3, #26
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	e017      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x3c6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fab5 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e003      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x3de>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0e9b      	lsrs	r3, r3, #26
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	e011      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x402>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e003      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d106      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	2103      	movs	r1, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa92 	bl	8000ff8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fb93 	bl	8001204 <LL_ADC_IsEnabled>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 813f 	bne.w	8001d64 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	461a      	mov	r2, r3
 8001af4:	f7ff faf2 	bl	80010dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a8e      	ldr	r2, [pc, #568]	; (8001d38 <HAL_ADC_ConfigChannel+0x678>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	f040 8130 	bne.w	8001d64 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x46c>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e019      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4a0>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b44:	2320      	movs	r3, #32
 8001b46:	e003      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2b09      	cmp	r3, #9
 8001b58:	bf94      	ite	ls
 8001b5a:	2301      	movls	r3, #1
 8001b5c:	2300      	movhi	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d079      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x4c0>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0e9b      	lsrs	r3, r3, #26
 8001b76:	3301      	adds	r3, #1
 8001b78:	069b      	lsls	r3, r3, #26
 8001b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b7e:	e015      	b.n	8001bac <HAL_ADC_ConfigChannel+0x4ec>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e003      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	069b      	lsls	r3, r3, #26
 8001ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x50c>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	e017      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x53c>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001be4:	2320      	movs	r3, #32
 8001be6:	e003      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	ea42 0103 	orr.w	r1, r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10a      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x562>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	3301      	adds	r3, #1
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	051b      	lsls	r3, r3, #20
 8001c20:	e018      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x594>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c54:	430b      	orrs	r3, r1
 8001c56:	e080      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x5b4>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0e9b      	lsrs	r3, r3, #26
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	069b      	lsls	r3, r3, #26
 8001c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c72:	e015      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x5e0>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	e003      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x600>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	e017      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x630>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	61fb      	str	r3, [r7, #28]
  return result;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	e003      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	ea42 0103 	orr.w	r1, r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x65c>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	3301      	adds	r3, #1
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	3b1e      	subs	r3, #30
 8001d14:	051b      	lsls	r3, r3, #20
 8001d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	e01d      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x698>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	613b      	str	r3, [r7, #16]
  return result;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e005      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x684>
 8001d38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	051b      	lsls	r3, r3, #20
 8001d54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	6892      	ldr	r2, [r2, #8]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7ff f991 	bl	8001086 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_ADC_ConfigChannel+0x7bc>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d07a      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d70:	4843      	ldr	r0, [pc, #268]	; (8001e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d72:	f7ff f8f9 	bl	8000f68 <LL_ADC_GetCommonPathInternalCh>
 8001d76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a41      	ldr	r2, [pc, #260]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d12c      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d126      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0x6e4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_ADC_ConfigChannel+0x7cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d15d      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dac:	4619      	mov	r1, r3
 8001dae:	4834      	ldr	r0, [pc, #208]	; (8001e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8001db0:	f7ff f8c7 	bl	8000f42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_ADC_ConfigChannel+0x7d0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	4a36      	ldr	r2, [pc, #216]	; (8001e94 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dce:	e002      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f9      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ddc:	e040      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <HAL_ADC_ConfigChannel+0x7d8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d118      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x75a>
 8001de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d112      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x748>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_ADC_ConfigChannel+0x7cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d12d      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e10:	4619      	mov	r1, r3
 8001e12:	481b      	ldr	r0, [pc, #108]	; (8001e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e14:	f7ff f895 	bl	8000f42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e18:	e024      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_ADC_ConfigChannel+0x7dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d120      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11a      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d115      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e42:	4619      	mov	r1, r3
 8001e44:	480e      	ldr	r0, [pc, #56]	; (8001e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e46:	f7ff f87c 	bl	8000f42 <LL_ADC_SetCommonPathInternalCh>
 8001e4a:	e00c      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f043 0220 	orr.w	r2, r3, #32
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e5e:	e002      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	37d8      	adds	r7, #216	; 0xd8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	80080000 	.word	0x80080000
 8001e80:	50040300 	.word	0x50040300
 8001e84:	c7520000 	.word	0xc7520000
 8001e88:	50040000 	.word	0x50040000
 8001e8c:	50040200 	.word	0x50040200
 8001e90:	20000000 	.word	0x20000000
 8001e94:	053e2d63 	.word	0x053e2d63
 8001e98:	cb840000 	.word	0xcb840000
 8001e9c:	80000001 	.word	0x80000001

08001ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f9a9 	bl	8001204 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d14d      	bne.n	8001f54 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <ADC_Enable+0xc0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e039      	b.n	8001f56 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f978 	bl	80011dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001eec:	f7ff f80a 	bl	8000f04 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ef2:	e028      	b.n	8001f46 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f983 	bl	8001204 <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f967 	bl	80011dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f0e:	f7fe fff9 	bl	8000f04 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d914      	bls.n	8001f46 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d00d      	beq.n	8001f46 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e007      	b.n	8001f56 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d1cf      	bne.n	8001ef4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	8000003f 	.word	0x8000003f

08001f64 <LL_ADC_IsEnabled>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_IsEnabled+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_IsEnabled+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b09f      	sub	sp, #124	; 0x7c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e093      	b.n	80020f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a47      	ldr	r2, [pc, #284]	; (8002100 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d102      	bne.n	8001fee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	e001      	b.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e072      	b.n	80020f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffb9 	bl	8001f8a <LL_ADC_REG_IsConversionOngoing>
 8002018:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ffb3 	bl	8001f8a <LL_ADC_REG_IsConversionOngoing>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d154      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800202a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800202c:	2b00      	cmp	r3, #0
 800202e:	d151      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002032:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02c      	beq.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800204e:	035b      	lsls	r3, r3, #13
 8002050:	430b      	orrs	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002056:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002058:	4829      	ldr	r0, [pc, #164]	; (8002100 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800205a:	f7ff ff83 	bl	8001f64 <LL_ADC_IsEnabled>
 800205e:	4604      	mov	r4, r0
 8002060:	4828      	ldr	r0, [pc, #160]	; (8002104 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002062:	f7ff ff7f 	bl	8001f64 <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	431c      	orrs	r4, r3
 800206a:	4828      	ldr	r0, [pc, #160]	; (800210c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800206c:	f7ff ff7a 	bl	8001f64 <LL_ADC_IsEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	4323      	orrs	r3, r4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d137      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002080:	f023 030f 	bic.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	6811      	ldr	r1, [r2, #0]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	6892      	ldr	r2, [r2, #8]
 800208c:	430a      	orrs	r2, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002092:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002094:	e028      	b.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800209e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a2:	4817      	ldr	r0, [pc, #92]	; (8002100 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020a4:	f7ff ff5e 	bl	8001f64 <LL_ADC_IsEnabled>
 80020a8:	4604      	mov	r4, r0
 80020aa:	4816      	ldr	r0, [pc, #88]	; (8002104 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020ac:	f7ff ff5a 	bl	8001f64 <LL_ADC_IsEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	431c      	orrs	r4, r3
 80020b4:	4815      	ldr	r0, [pc, #84]	; (800210c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020b6:	f7ff ff55 	bl	8001f64 <LL_ADC_IsEnabled>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4323      	orrs	r3, r4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ca:	f023 030f 	bic.w	r3, r3, #15
 80020ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020d2:	e009      	b.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80020e6:	e000      	b.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	377c      	adds	r7, #124	; 0x7c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	50040000 	.word	0x50040000
 8002104:	50040100 	.word	0x50040100
 8002108:	50040300 	.word	0x50040300
 800210c:	50040200 	.word	0x50040200

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff3e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff31 	bl	8002174 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e17f      	b.n	8002644 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8171 	beq.w	800263e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d00b      	beq.n	800237c <HAL_GPIO_Init+0x48>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002370:	2b11      	cmp	r3, #17
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b12      	cmp	r3, #18
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d118      	bne.n	800241c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x128>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	6939      	ldr	r1, [r7, #16]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80ac 	beq.w	800263e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <HAL_GPIO_Init+0x330>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	4a5e      	ldr	r2, [pc, #376]	; (8002664 <HAL_GPIO_Init+0x330>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6613      	str	r3, [r2, #96]	; 0x60
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_GPIO_Init+0x330>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024fe:	4a5a      	ldr	r2, [pc, #360]	; (8002668 <HAL_GPIO_Init+0x334>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002528:	d025      	beq.n	8002576 <HAL_GPIO_Init+0x242>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4f      	ldr	r2, [pc, #316]	; (800266c <HAL_GPIO_Init+0x338>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01f      	beq.n	8002572 <HAL_GPIO_Init+0x23e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_GPIO_Init+0x33c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d019      	beq.n	800256e <HAL_GPIO_Init+0x23a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_GPIO_Init+0x340>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0x236>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4c      	ldr	r2, [pc, #304]	; (8002678 <HAL_GPIO_Init+0x344>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00d      	beq.n	8002566 <HAL_GPIO_Init+0x232>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4b      	ldr	r2, [pc, #300]	; (800267c <HAL_GPIO_Init+0x348>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0x22e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4a      	ldr	r2, [pc, #296]	; (8002680 <HAL_GPIO_Init+0x34c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_GPIO_Init+0x22a>
 800255a:	2306      	movs	r3, #6
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x244>
 800255e:	2307      	movs	r3, #7
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x244>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x244>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x244>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x244>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x244>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x244>
 8002576:	2300      	movs	r3, #0
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002588:	4937      	ldr	r1, [pc, #220]	; (8002668 <HAL_GPIO_Init+0x334>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_GPIO_Init+0x350>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ba:	4a32      	ldr	r2, [pc, #200]	; (8002684 <HAL_GPIO_Init+0x350>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_GPIO_Init+0x350>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <HAL_GPIO_Init+0x350>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_GPIO_Init+0x350>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_GPIO_Init+0x350>)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_GPIO_Init+0x350>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_GPIO_Init+0x350>)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	f47f ae78 	bne.w	8002344 <HAL_GPIO_Init+0x10>
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	48000400 	.word	0x48000400
 8002670:	48000800 	.word	0x48000800
 8002674:	48000c00 	.word	0x48000c00
 8002678:	48001000 	.word	0x48001000
 800267c:	48001400 	.word	0x48001400
 8002680:	48001800 	.word	0x48001800
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43d9      	mvns	r1, r3
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	400b      	ands	r3, r1
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe f975 	bl	80009fa <HAL_GPIO_EXTI_Callback>
  }
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_PWREx_GetVoltageRange+0x18>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40007000 	.word	0x40007000

08002738 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002746:	d130      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002754:	d038      	beq.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2232      	movs	r2, #50	; 0x32
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9b      	lsrs	r3, r3, #18
 8002778:	3301      	adds	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277c:	e002      	b.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3b01      	subs	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002790:	d102      	bne.n	8002798 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f2      	bne.n	800277e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a4:	d110      	bne.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e00f      	b.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d007      	beq.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000
 80027dc:	20000000 	.word	0x20000000
 80027e0:	431bde83 	.word	0x431bde83

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e3d4      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4ba1      	ldr	r3, [pc, #644]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002800:	4b9e      	ldr	r3, [pc, #632]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80e4 	beq.w	80029e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_RCC_OscConfig+0x4a>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	f040 808b 	bne.w	800293c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b01      	cmp	r3, #1
 800282a:	f040 8087 	bne.w	800293c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800282e:	4b93      	ldr	r3, [pc, #588]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e3ac      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1a      	ldr	r2, [r3, #32]
 800284a:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <HAL_RCC_OscConfig+0x7c>
 8002856:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285e:	e005      	b.n	800286c <HAL_RCC_OscConfig+0x88>
 8002860:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	4293      	cmp	r3, r2
 800286e:	d223      	bcs.n	80028b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fd41 	bl	80032fc <RCC_SetFlashLatencyFromMSIRange>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e38d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002884:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4977      	ldr	r1, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4972      	ldr	r1, [pc, #456]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 80028b6:	e025      	b.n	8002904 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b8:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6f      	ldr	r2, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	496a      	ldr	r1, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d6:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fd01 	bl	80032fc <RCC_SetFlashLatencyFromMSIRange>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e34d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002904:	f000 fc36 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	495a      	ldr	r1, [pc, #360]	; (8002a80 <HAL_RCC_OscConfig+0x29c>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_OscConfig+0x2a0>)
 8002922:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002924:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <HAL_RCC_OscConfig+0x2a4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fa9b 	bl	8000e64 <HAL_InitTick>
 800292e:	4603      	mov	r3, r0
 8002930:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d052      	beq.n	80029de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	e331      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d032      	beq.n	80029aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002944:	4b4d      	ldr	r3, [pc, #308]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002950:	f7fe fad8 	bl	8000f04 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002958:	f7fe fad4 	bl	8000f04 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e31a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	493b      	ldr	r1, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4936      	ldr	r1, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e01a      	b.n	80029e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029b6:	f7fe faa5 	bl	8000f04 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029be:	f7fe faa1 	bl	8000f04 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e2e7      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x1da>
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d074      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d005      	beq.n	80029fe <HAL_RCC_OscConfig+0x21a>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b0c      	cmp	r3, #12
 80029f6:	d10e      	bne.n	8002a16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d10b      	bne.n	8002a16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d064      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2f0>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d160      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e2c4      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x24a>
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	e01d      	b.n	8002a6a <HAL_RCC_OscConfig+0x286>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x26e>
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x286>
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x298>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01c      	beq.n	8002aac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fa47 	bl	8000f04 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a78:	e011      	b.n	8002a9e <HAL_RCC_OscConfig+0x2ba>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004cc4 	.word	0x08004cc4
 8002a84:	20000000 	.word	0x20000000
 8002a88:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fa3a 	bl	8000f04 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e280      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4baf      	ldr	r3, [pc, #700]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2a8>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa2a 	bl	8000f04 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fa26 	bl	8000f04 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e26c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac6:	4ba5      	ldr	r3, [pc, #660]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x2d0>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d060      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_OscConfig+0x310>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d116      	bne.n	8002b22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	4b99      	ldr	r3, [pc, #612]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_OscConfig+0x328>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e249      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b93      	ldr	r3, [pc, #588]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	4990      	ldr	r1, [pc, #576]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b20:	e040      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d023      	beq.n	8002b72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2a:	4b8c      	ldr	r3, [pc, #560]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a8b      	ldr	r2, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe f9e5 	bl	8000f04 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fe f9e1 	bl	8000f04 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e227      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b50:	4b82      	ldr	r3, [pc, #520]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5c:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	497c      	ldr	r1, [pc, #496]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	e018      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b7a      	ldr	r3, [pc, #488]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a79      	ldr	r2, [pc, #484]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f9c1 	bl	8000f04 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe f9bd 	bl	8000f04 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e203      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b98:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d03c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	4a67      	ldr	r2, [pc, #412]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe f99c 	bl	8000f04 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe f998 	bl	8000f04 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1de      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002be2:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x3ec>
 8002bf0:	e01b      	b.n	8002c2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf2:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7fe f97f 	bl	8000f04 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7fe f97b 	bl	8000f04 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e1c1      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ef      	bne.n	8002c0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80a6 	beq.w	8002d84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4a43      	ldr	r2, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c64:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCC_OscConfig+0x57c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_OscConfig+0x57c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_RCC_OscConfig+0x57c>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f942 	bl	8000f04 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe f93e 	bl	8000f04 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e184      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_RCC_OscConfig+0x57c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4d8>
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cba:	e024      	b.n	8002d06 <HAL_RCC_OscConfig+0x522>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d110      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x502>
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce4:	e00f      	b.n	8002d06 <HAL_RCC_OscConfig+0x522>
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0e:	f7fe f8f9 	bl	8000f04 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe f8f5 	bl	8000f04 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e139      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ed      	beq.n	8002d16 <HAL_RCC_OscConfig+0x532>
 8002d3a:	e01a      	b.n	8002d72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f8e2 	bl	8000f04 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d42:	e00f      	b.n	8002d64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fe f8de 	bl	8000f04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d906      	bls.n	8002d64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e122      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d64:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e8      	bne.n	8002d44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d72:	7ffb      	ldrb	r3, [r7, #31]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b8b      	ldr	r3, [pc, #556]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4a8a      	ldr	r2, [pc, #552]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8108 	beq.w	8002f9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	f040 80d0 	bne.w	8002f38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d98:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d130      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	3b01      	subs	r3, #1
 8002db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d127      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d11f      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd8:	2a07      	cmp	r2, #7
 8002dda:	bf14      	ite	ne
 8002ddc:	2201      	movne	r2, #1
 8002dde:	2200      	moveq	r2, #0
 8002de0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d113      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d06e      	beq.n	8002eec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d069      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e20:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0b7      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e30:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5c      	ldr	r2, [pc, #368]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e3c:	f7fe f862 	bl	8000f04 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe f85e 	bl	8000f04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0a4      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e56:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCC_OscConfig+0x7c8>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e7c:	0212      	lsls	r2, r2, #8
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e84:	0852      	lsrs	r2, r2, #1
 8002e86:	3a01      	subs	r2, #1
 8002e88:	0552      	lsls	r2, r2, #21
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e90:	0852      	lsrs	r2, r2, #1
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0652      	lsls	r2, r2, #25
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e9c:	0912      	lsrs	r2, r2, #4
 8002e9e:	0452      	lsls	r2, r2, #17
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	4941      	ldr	r1, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3e      	ldr	r2, [pc, #248]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a3b      	ldr	r2, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec0:	f7fe f820 	bl	8000f04 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe f81c 	bl	8000f04 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e062      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee6:	e05a      	b.n	8002f9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e059      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d152      	bne.n	8002f9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f10:	f7fd fff8 	bl	8000f04 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fd fff4 	bl	8000f04 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e03a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x734>
 8002f36:	e032      	b.n	8002f9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d02d      	beq.n	8002f9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f5c:	f023 0303 	bic.w	r3, r3, #3
 8002f60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fd ffc7 	bl	8000f04 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd ffc3 	bl	8000f04 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e009      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x796>
 8002f98:	e001      	b.n	8002f9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	f99d808c 	.word	0xf99d808c

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0c8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0207 	bic.w	r2, r3, #7
 8002fda:	4961      	ldr	r1, [pc, #388]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b0      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d04c      	beq.n	800309a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003008:	4b56      	ldr	r3, [pc, #344]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d121      	bne.n	8003058 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e09e      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d107      	bne.n	8003030 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003020:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d115      	bne.n	8003058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e092      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e086      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003048:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e07e      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 0203 	bic.w	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	493f      	ldr	r1, [pc, #252]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306a:	f7fd ff4b 	bl	8000f04 <HAL_GetTick>
 800306e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003070:	e00a      	b.n	8003088 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fd ff47 	bl	8000f04 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e066      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 020c 	and.w	r2, r3, #12
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	429a      	cmp	r2, r3
 8003098:	d1eb      	bne.n	8003072 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	492c      	ldr	r1, [pc, #176]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d210      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	4924      	ldr	r1, [pc, #144]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_ClockConfig+0x1b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e036      	b.n	8003156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4918      	ldr	r1, [pc, #96]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4910      	ldr	r1, [pc, #64]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003126:	f000 f825 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490c      	ldr	r1, [pc, #48]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fe8a 	bl	8000e64 <HAL_InitTick>
 8003150:	4603      	mov	r3, r0
 8003152:	72fb      	strb	r3, [r7, #11]

  return status;
 8003154:	7afb      	ldrb	r3, [r7, #11]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000
 8003164:	40021000 	.word	0x40021000
 8003168:	08004cc4 	.word	0x08004cc4
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004

08003174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	4b3e      	ldr	r3, [pc, #248]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x34>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d121      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d11e      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a8:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031b4:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e005      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031c4:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031d0:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e004      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_RCC_GetSysClockFreq+0x114>)
 80031fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d134      	bne.n	800326c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0xa6>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d003      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0xac>
 8003218:	e005      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_RCC_GetSysClockFreq+0x110>)
 800321c:	617b      	str	r3, [r7, #20]
      break;
 800321e:	e005      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_GetSysClockFreq+0x114>)
 8003222:	617b      	str	r3, [r7, #20]
      break;
 8003224:	e002      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	617b      	str	r3, [r7, #20]
      break;
 800322a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	3301      	adds	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	fb02 f203 	mul.w	r2, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	0e5b      	lsrs	r3, r3, #25
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	3301      	adds	r3, #1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800326c:	69bb      	ldr	r3, [r7, #24]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	08004cdc 	.word	0x08004cdc
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200

0800328c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032a8:	f7ff fff0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	08004cd4 	.word	0x08004cd4

080032d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032d4:	f7ff ffda 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0adb      	lsrs	r3, r3, #11
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4904      	ldr	r1, [pc, #16]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08004cd4 	.word	0x08004cd4

080032fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003314:	f7ff fa02 	bl	800271c <HAL_PWREx_GetVoltageRange>
 8003318:	6178      	str	r0, [r7, #20]
 800331a:	e014      	b.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	6593      	str	r3, [r2, #88]	; 0x58
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003334:	f7ff f9f2 	bl	800271c <HAL_PWREx_GetVoltageRange>
 8003338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d10b      	bne.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d919      	bls.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2ba0      	cmp	r3, #160	; 0xa0
 8003358:	d902      	bls.n	8003360 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800335a:	2302      	movs	r3, #2
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	e013      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003360:	2301      	movs	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e010      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d902      	bls.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800336c:	2303      	movs	r3, #3
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e00a      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d102      	bne.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003378:	2302      	movs	r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	e004      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b70      	cmp	r3, #112	; 0x70
 8003382:	d101      	bne.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003384:	2301      	movs	r3, #1
 8003386:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 0207 	bic.w	r2, r3, #7
 8003390:	4909      	ldr	r1, [pc, #36]	; (80033b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d001      	beq.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40022000 	.word	0x40022000

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c4:	2300      	movs	r3, #0
 80033c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c8:	2300      	movs	r3, #0
 80033ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d041      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033e0:	d02a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033e6:	d824      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ec:	d008      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f2:	d81e      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fc:	d010      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033fe:	e018      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003400:	4b86      	ldr	r3, [pc, #536]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a85      	ldr	r2, [pc, #532]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800340c:	e015      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fabb 	bl	8003990 <RCCEx_PLLSAI1_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341e:	e00c      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3320      	adds	r3, #32
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fba6 	bl	8003b78 <RCCEx_PLLSAI2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	74fb      	strb	r3, [r7, #19]
      break;
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344e:	4973      	ldr	r1, [pc, #460]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003456:	e001      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d041      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003470:	d02a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003476:	d824      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800347e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003482:	d81e      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d010      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800348e:	e018      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003490:	4b62      	ldr	r3, [pc, #392]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a61      	ldr	r2, [pc, #388]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800349c:	e015      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fa73 	bl	8003990 <RCCEx_PLLSAI1_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ae:	e00c      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3320      	adds	r3, #32
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fb5e 	bl	8003b78 <RCCEx_PLLSAI2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	74fb      	strb	r3, [r7, #19]
      break;
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034de:	494f      	ldr	r1, [pc, #316]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034e6:	e001      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a0 	beq.w	800363a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	4a40      	ldr	r2, [pc, #256]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352c:	2301      	movs	r3, #1
 800352e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800353c:	f7fd fce2 	bl	8000f04 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003542:	e009      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fd fcde 	bl	8000f04 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d902      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	74fb      	strb	r3, [r7, #19]
        break;
 8003556:	e005      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d15c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003574:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01f      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	d019      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	4a20      	ldr	r2, [pc, #128]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fd fc9d 	bl	8000f04 <HAL_GetTick>
 80035ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035cc:	e00b      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fc99 	bl	8000f04 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d902      	bls.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	74fb      	strb	r3, [r7, #19]
            break;
 80035e4:	e006      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ec      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360a:	4904      	ldr	r1, [pc, #16]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003612:	e009      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003628:	7c7b      	ldrb	r3, [r7, #17]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b9e      	ldr	r3, [pc, #632]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	4a9d      	ldr	r2, [pc, #628]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003646:	4b98      	ldr	r3, [pc, #608]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f023 0203 	bic.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	4994      	ldr	r1, [pc, #592]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003668:	4b8f      	ldr	r3, [pc, #572]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f023 020c 	bic.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	498c      	ldr	r1, [pc, #560]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800368a:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4983      	ldr	r1, [pc, #524]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ac:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	497b      	ldr	r1, [pc, #492]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	4972      	ldr	r1, [pc, #456]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	496a      	ldr	r1, [pc, #424]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	4961      	ldr	r1, [pc, #388]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003734:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	4959      	ldr	r1, [pc, #356]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003756:	4b54      	ldr	r3, [pc, #336]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	4950      	ldr	r1, [pc, #320]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	4948      	ldr	r1, [pc, #288]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800379a:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	493f      	ldr	r1, [pc, #252]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d028      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ca:	4937      	ldr	r1, [pc, #220]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037da:	d106      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a31      	ldr	r2, [pc, #196]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]
 80037e8:	e011      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f2:	d10c      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8c8 	bl	8003990 <RCCEx_PLLSAI1_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d028      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	491f      	ldr	r1, [pc, #124]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003838:	d106      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003844:	60d3      	str	r3, [r2, #12]
 8003846:	e011      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f899 	bl	8003990 <RCCEx_PLLSAI1_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02b      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003896:	d109      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a02      	ldr	r2, [pc, #8]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a2:	60d3      	str	r3, [r2, #12]
 80038a4:	e014      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f867 	bl	8003990 <RCCEx_PLLSAI1_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02f      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ea:	4928      	ldr	r1, [pc, #160]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fa:	d10d      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f844 	bl	8003990 <RCCEx_PLLSAI1_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	74bb      	strb	r3, [r7, #18]
 8003916:	e011      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003920:	d10c      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3320      	adds	r3, #32
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f925 	bl	8003b78 <RCCEx_PLLSAI2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003956:	490d      	ldr	r1, [pc, #52]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397a:	4904      	ldr	r1, [pc, #16]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003982:	7cbb      	ldrb	r3, [r7, #18]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000

08003990 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800399e:	4b75      	ldr	r3, [pc, #468]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0203 	and.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
       ||
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039c2:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
       ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d047      	beq.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	e044      	b.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d018      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0x86>
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d825      	bhi.n	8003a34 <RCCEx_PLLSAI1_Config+0xa4>
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <RCCEx_PLLSAI1_Config+0x62>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d009      	beq.n	8003a04 <RCCEx_PLLSAI1_Config+0x74>
 80039f0:	e020      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039f2:	4b60      	ldr	r3, [pc, #384]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11d      	bne.n	8003a3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a02:	e01a      	b.n	8003a3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a04:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e013      	b.n	8003a3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a32:	e006      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e004      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a42:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	4944      	ldr	r1, [pc, #272]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d17d      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a6c:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd fa44 	bl	8000f04 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7e:	e009      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a80:	f7fd fa40 	bl	8000f04 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	73fb      	strb	r3, [r7, #15]
        break;
 8003a92:	e005      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a94:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ef      	bne.n	8003a80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d160      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d111      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	0211      	lsls	r1, r2, #8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	0912      	lsrs	r2, r2, #4
 8003ac4:	0452      	lsls	r2, r2, #17
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	492a      	ldr	r1, [pc, #168]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	610b      	str	r3, [r1, #16]
 8003ace:	e027      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d112      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	0211      	lsls	r1, r2, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6912      	ldr	r2, [r2, #16]
 8003aec:	0852      	lsrs	r2, r2, #1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	0552      	lsls	r2, r2, #21
 8003af2:	430a      	orrs	r2, r1
 8003af4:	491f      	ldr	r1, [pc, #124]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	610b      	str	r3, [r1, #16]
 8003afa:	e011      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6892      	ldr	r2, [r2, #8]
 8003b0c:	0211      	lsls	r1, r2, #8
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6952      	ldr	r2, [r2, #20]
 8003b12:	0852      	lsrs	r2, r2, #1
 8003b14:	3a01      	subs	r2, #1
 8003b16:	0652      	lsls	r2, r2, #25
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	4916      	ldr	r1, [pc, #88]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd f9ea 	bl	8000f04 <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b32:	e009      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b34:	f7fd f9e6 	bl	8000f04 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d902      	bls.n	8003b48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	73fb      	strb	r3, [r7, #15]
          break;
 8003b46:	e005      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ef      	beq.n	8003b34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4904      	ldr	r1, [pc, #16]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000

08003b78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d018      	beq.n	8003bc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0203 	and.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10d      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003baa:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d047      	beq.n	8003c4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	e044      	b.n	8003c4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d018      	beq.n	8003bfe <RCCEx_PLLSAI2_Config+0x86>
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d825      	bhi.n	8003c1c <RCCEx_PLLSAI2_Config+0xa4>
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d002      	beq.n	8003bda <RCCEx_PLLSAI2_Config+0x62>
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d009      	beq.n	8003bec <RCCEx_PLLSAI2_Config+0x74>
 8003bd8:	e020      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bda:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11d      	bne.n	8003c22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bea:	e01a      	b.n	8003c22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d116      	bne.n	8003c26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e013      	b.n	8003c26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c0a:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c1a:	e006      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c20:	e004      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	430b      	orrs	r3, r1
 8003c48:	4939      	ldr	r1, [pc, #228]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d167      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a35      	ldr	r2, [pc, #212]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fd f950 	bl	8000f04 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c66:	e009      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c68:	f7fd f94c 	bl	8000f04 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	73fb      	strb	r3, [r7, #15]
        break;
 8003c7a:	e005      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ef      	bne.n	8003c68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d14a      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c94:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	0211      	lsls	r1, r2, #8
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	0912      	lsrs	r2, r2, #4
 8003cac:	0452      	lsls	r2, r2, #17
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	491f      	ldr	r1, [pc, #124]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	614b      	str	r3, [r1, #20]
 8003cb6:	e011      	b.n	8003cdc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
 8003cc8:	0211      	lsls	r1, r2, #8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6912      	ldr	r2, [r2, #16]
 8003cce:	0852      	lsrs	r2, r2, #1
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0652      	lsls	r2, r2, #25
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	4916      	ldr	r1, [pc, #88]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd f90c 	bl	8000f04 <HAL_GetTick>
 8003cec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cee:	e009      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cf0:	f7fd f908 	bl	8000f04 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d902      	bls.n	8003d04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	73fb      	strb	r3, [r7, #15]
          break;
 8003d02:	e005      	b.n	8003d10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ef      	beq.n	8003cf0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4904      	ldr	r1, [pc, #16]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e049      	b.n	8003dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc ff3e 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 f9ee 	bl	8004154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d001      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e04f      	b.n	8003e9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01d      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x76>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d018      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x76>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_TIM_Base_Start_IT+0xc8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x76>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x76>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x76>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x76>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d115      	bne.n	8003e86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d015      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0xb4>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e72:	d011      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e84:	e008      	b.n	8003e98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e000      	b.n	8003e9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40013400 	.word	0x40013400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	00010007 	.word	0x00010007

08003ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f905 	bl	8004116 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8f7 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f908 	bl	800412a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0204 	mvn.w	r2, #4
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8db 	bl	8004116 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8cd 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8de 	bl	800412a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0208 	mvn.w	r2, #8
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8b1 	bl	8004116 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8a3 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8b4 	bl	800412a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0210 	mvn.w	r2, #16
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f887 	bl	8004116 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f879 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f88a 	bl	800412a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0201 	mvn.w	r2, #1
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc fce4 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f99c 	bl	80043ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d10e      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f98f 	bl	80043c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d10e      	bne.n	80040ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d107      	bne.n	80040ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f838 	bl	800413e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d10e      	bne.n	80040fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0220 	mvn.w	r2, #32
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f94f 	bl	8004398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <TIM_Base_SetConfig+0x114>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d00f      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3d      	ldr	r2, [pc, #244]	; (800426c <TIM_Base_SetConfig+0x118>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3c      	ldr	r2, [pc, #240]	; (8004270 <TIM_Base_SetConfig+0x11c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3b      	ldr	r2, [pc, #236]	; (8004274 <TIM_Base_SetConfig+0x120>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <TIM_Base_SetConfig+0x124>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <TIM_Base_SetConfig+0x114>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d01b      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <TIM_Base_SetConfig+0x118>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d017      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <TIM_Base_SetConfig+0x11c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <TIM_Base_SetConfig+0x120>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00f      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a29      	ldr	r2, [pc, #164]	; (8004278 <TIM_Base_SetConfig+0x124>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a28      	ldr	r2, [pc, #160]	; (800427c <TIM_Base_SetConfig+0x128>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <TIM_Base_SetConfig+0x12c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a26      	ldr	r2, [pc, #152]	; (8004284 <TIM_Base_SetConfig+0x130>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d108      	bne.n	8004200 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <TIM_Base_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <TIM_Base_SetConfig+0x124>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <TIM_Base_SetConfig+0x128>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a10      	ldr	r2, [pc, #64]	; (8004280 <TIM_Base_SetConfig+0x12c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0xf8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <TIM_Base_SetConfig+0x130>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800

08004288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e068      	b.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2d      	ldr	r2, [pc, #180]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01d      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d018      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1a      	ldr	r2, [pc, #104]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10c      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40013400 	.word	0x40013400
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e040      	b.n	8004468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fc76 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f82c 	bl	8004470 <UART_SetConfig>
 8004418:	4603      	mov	r3, r0
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e022      	b.n	8004468 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 faaa 	bl	8004984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb31 	bl	8004ac8 <UART_CheckIdleState>
 8004466:	4603      	mov	r3, r0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4bad      	ldr	r3, [pc, #692]	; (8004750 <UART_SetConfig+0x2e0>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	69f9      	ldr	r1, [r7, #28]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4aa2      	ldr	r2, [pc, #648]	; (8004754 <UART_SetConfig+0x2e4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a99      	ldr	r2, [pc, #612]	; (8004758 <UART_SetConfig+0x2e8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d121      	bne.n	800453a <UART_SetConfig+0xca>
 80044f6:	4b99      	ldr	r3, [pc, #612]	; (800475c <UART_SetConfig+0x2ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d817      	bhi.n	8004534 <UART_SetConfig+0xc4>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x9c>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004529 	.word	0x08004529
 8004514:	08004523 	.word	0x08004523
 8004518:	0800452f 	.word	0x0800452f
 800451c:	2301      	movs	r3, #1
 800451e:	76fb      	strb	r3, [r7, #27]
 8004520:	e0e7      	b.n	80046f2 <UART_SetConfig+0x282>
 8004522:	2302      	movs	r3, #2
 8004524:	76fb      	strb	r3, [r7, #27]
 8004526:	e0e4      	b.n	80046f2 <UART_SetConfig+0x282>
 8004528:	2304      	movs	r3, #4
 800452a:	76fb      	strb	r3, [r7, #27]
 800452c:	e0e1      	b.n	80046f2 <UART_SetConfig+0x282>
 800452e:	2308      	movs	r3, #8
 8004530:	76fb      	strb	r3, [r7, #27]
 8004532:	e0de      	b.n	80046f2 <UART_SetConfig+0x282>
 8004534:	2310      	movs	r3, #16
 8004536:	76fb      	strb	r3, [r7, #27]
 8004538:	e0db      	b.n	80046f2 <UART_SetConfig+0x282>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a88      	ldr	r2, [pc, #544]	; (8004760 <UART_SetConfig+0x2f0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d132      	bne.n	80045aa <UART_SetConfig+0x13a>
 8004544:	4b85      	ldr	r3, [pc, #532]	; (800475c <UART_SetConfig+0x2ec>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b0c      	cmp	r3, #12
 8004550:	d828      	bhi.n	80045a4 <UART_SetConfig+0x134>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0xe8>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800458d 	.word	0x0800458d
 800455c:	080045a5 	.word	0x080045a5
 8004560:	080045a5 	.word	0x080045a5
 8004564:	080045a5 	.word	0x080045a5
 8004568:	08004599 	.word	0x08004599
 800456c:	080045a5 	.word	0x080045a5
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045a5 	.word	0x080045a5
 8004578:	08004593 	.word	0x08004593
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045a5 	.word	0x080045a5
 8004588:	0800459f 	.word	0x0800459f
 800458c:	2300      	movs	r3, #0
 800458e:	76fb      	strb	r3, [r7, #27]
 8004590:	e0af      	b.n	80046f2 <UART_SetConfig+0x282>
 8004592:	2302      	movs	r3, #2
 8004594:	76fb      	strb	r3, [r7, #27]
 8004596:	e0ac      	b.n	80046f2 <UART_SetConfig+0x282>
 8004598:	2304      	movs	r3, #4
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e0a9      	b.n	80046f2 <UART_SetConfig+0x282>
 800459e:	2308      	movs	r3, #8
 80045a0:	76fb      	strb	r3, [r7, #27]
 80045a2:	e0a6      	b.n	80046f2 <UART_SetConfig+0x282>
 80045a4:	2310      	movs	r3, #16
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	e0a3      	b.n	80046f2 <UART_SetConfig+0x282>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6d      	ldr	r2, [pc, #436]	; (8004764 <UART_SetConfig+0x2f4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0x186>
 80045b4:	4b69      	ldr	r3, [pc, #420]	; (800475c <UART_SetConfig+0x2ec>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045be:	2b30      	cmp	r3, #48	; 0x30
 80045c0:	d013      	beq.n	80045ea <UART_SetConfig+0x17a>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d814      	bhi.n	80045f0 <UART_SetConfig+0x180>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d009      	beq.n	80045de <UART_SetConfig+0x16e>
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d810      	bhi.n	80045f0 <UART_SetConfig+0x180>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x168>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d006      	beq.n	80045e4 <UART_SetConfig+0x174>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x180>
 80045d8:	2300      	movs	r3, #0
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e089      	b.n	80046f2 <UART_SetConfig+0x282>
 80045de:	2302      	movs	r3, #2
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e086      	b.n	80046f2 <UART_SetConfig+0x282>
 80045e4:	2304      	movs	r3, #4
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e083      	b.n	80046f2 <UART_SetConfig+0x282>
 80045ea:	2308      	movs	r3, #8
 80045ec:	76fb      	strb	r3, [r7, #27]
 80045ee:	e080      	b.n	80046f2 <UART_SetConfig+0x282>
 80045f0:	2310      	movs	r3, #16
 80045f2:	76fb      	strb	r3, [r7, #27]
 80045f4:	e07d      	b.n	80046f2 <UART_SetConfig+0x282>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5b      	ldr	r2, [pc, #364]	; (8004768 <UART_SetConfig+0x2f8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <UART_SetConfig+0x1d2>
 8004600:	4b56      	ldr	r3, [pc, #344]	; (800475c <UART_SetConfig+0x2ec>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800460a:	2bc0      	cmp	r3, #192	; 0xc0
 800460c:	d013      	beq.n	8004636 <UART_SetConfig+0x1c6>
 800460e:	2bc0      	cmp	r3, #192	; 0xc0
 8004610:	d814      	bhi.n	800463c <UART_SetConfig+0x1cc>
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d009      	beq.n	800462a <UART_SetConfig+0x1ba>
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d810      	bhi.n	800463c <UART_SetConfig+0x1cc>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <UART_SetConfig+0x1b4>
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d006      	beq.n	8004630 <UART_SetConfig+0x1c0>
 8004622:	e00b      	b.n	800463c <UART_SetConfig+0x1cc>
 8004624:	2300      	movs	r3, #0
 8004626:	76fb      	strb	r3, [r7, #27]
 8004628:	e063      	b.n	80046f2 <UART_SetConfig+0x282>
 800462a:	2302      	movs	r3, #2
 800462c:	76fb      	strb	r3, [r7, #27]
 800462e:	e060      	b.n	80046f2 <UART_SetConfig+0x282>
 8004630:	2304      	movs	r3, #4
 8004632:	76fb      	strb	r3, [r7, #27]
 8004634:	e05d      	b.n	80046f2 <UART_SetConfig+0x282>
 8004636:	2308      	movs	r3, #8
 8004638:	76fb      	strb	r3, [r7, #27]
 800463a:	e05a      	b.n	80046f2 <UART_SetConfig+0x282>
 800463c:	2310      	movs	r3, #16
 800463e:	76fb      	strb	r3, [r7, #27]
 8004640:	e057      	b.n	80046f2 <UART_SetConfig+0x282>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a49      	ldr	r2, [pc, #292]	; (800476c <UART_SetConfig+0x2fc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d125      	bne.n	8004698 <UART_SetConfig+0x228>
 800464c:	4b43      	ldr	r3, [pc, #268]	; (800475c <UART_SetConfig+0x2ec>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465a:	d017      	beq.n	800468c <UART_SetConfig+0x21c>
 800465c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004660:	d817      	bhi.n	8004692 <UART_SetConfig+0x222>
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d00b      	beq.n	8004680 <UART_SetConfig+0x210>
 8004668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466c:	d811      	bhi.n	8004692 <UART_SetConfig+0x222>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <UART_SetConfig+0x20a>
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d006      	beq.n	8004686 <UART_SetConfig+0x216>
 8004678:	e00b      	b.n	8004692 <UART_SetConfig+0x222>
 800467a:	2300      	movs	r3, #0
 800467c:	76fb      	strb	r3, [r7, #27]
 800467e:	e038      	b.n	80046f2 <UART_SetConfig+0x282>
 8004680:	2302      	movs	r3, #2
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	e035      	b.n	80046f2 <UART_SetConfig+0x282>
 8004686:	2304      	movs	r3, #4
 8004688:	76fb      	strb	r3, [r7, #27]
 800468a:	e032      	b.n	80046f2 <UART_SetConfig+0x282>
 800468c:	2308      	movs	r3, #8
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e02f      	b.n	80046f2 <UART_SetConfig+0x282>
 8004692:	2310      	movs	r3, #16
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e02c      	b.n	80046f2 <UART_SetConfig+0x282>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <UART_SetConfig+0x2e4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d125      	bne.n	80046ee <UART_SetConfig+0x27e>
 80046a2:	4b2e      	ldr	r3, [pc, #184]	; (800475c <UART_SetConfig+0x2ec>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b0:	d017      	beq.n	80046e2 <UART_SetConfig+0x272>
 80046b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b6:	d817      	bhi.n	80046e8 <UART_SetConfig+0x278>
 80046b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046bc:	d00b      	beq.n	80046d6 <UART_SetConfig+0x266>
 80046be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c2:	d811      	bhi.n	80046e8 <UART_SetConfig+0x278>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0x260>
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x26c>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x278>
 80046d0:	2300      	movs	r3, #0
 80046d2:	76fb      	strb	r3, [r7, #27]
 80046d4:	e00d      	b.n	80046f2 <UART_SetConfig+0x282>
 80046d6:	2302      	movs	r3, #2
 80046d8:	76fb      	strb	r3, [r7, #27]
 80046da:	e00a      	b.n	80046f2 <UART_SetConfig+0x282>
 80046dc:	2304      	movs	r3, #4
 80046de:	76fb      	strb	r3, [r7, #27]
 80046e0:	e007      	b.n	80046f2 <UART_SetConfig+0x282>
 80046e2:	2308      	movs	r3, #8
 80046e4:	76fb      	strb	r3, [r7, #27]
 80046e6:	e004      	b.n	80046f2 <UART_SetConfig+0x282>
 80046e8:	2310      	movs	r3, #16
 80046ea:	76fb      	strb	r3, [r7, #27]
 80046ec:	e001      	b.n	80046f2 <UART_SetConfig+0x282>
 80046ee:	2310      	movs	r3, #16
 80046f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a17      	ldr	r2, [pc, #92]	; (8004754 <UART_SetConfig+0x2e4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	f040 8087 	bne.w	800480c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046fe:	7efb      	ldrb	r3, [r7, #27]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d837      	bhi.n	8004774 <UART_SetConfig+0x304>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x29c>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004731 	.word	0x08004731
 8004710:	08004775 	.word	0x08004775
 8004714:	08004739 	.word	0x08004739
 8004718:	08004775 	.word	0x08004775
 800471c:	0800473f 	.word	0x0800473f
 8004720:	08004775 	.word	0x08004775
 8004724:	08004775 	.word	0x08004775
 8004728:	08004775 	.word	0x08004775
 800472c:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fdb8 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8004734:	6178      	str	r0, [r7, #20]
        break;
 8004736:	e022      	b.n	800477e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004738:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <UART_SetConfig+0x300>)
 800473a:	617b      	str	r3, [r7, #20]
        break;
 800473c:	e01f      	b.n	800477e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473e:	f7fe fd19 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8004742:	6178      	str	r0, [r7, #20]
        break;
 8004744:	e01b      	b.n	800477e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	617b      	str	r3, [r7, #20]
        break;
 800474c:	e017      	b.n	800477e <UART_SetConfig+0x30e>
 800474e:	bf00      	nop
 8004750:	efff69f3 	.word	0xefff69f3
 8004754:	40008000 	.word	0x40008000
 8004758:	40013800 	.word	0x40013800
 800475c:	40021000 	.word	0x40021000
 8004760:	40004400 	.word	0x40004400
 8004764:	40004800 	.word	0x40004800
 8004768:	40004c00 	.word	0x40004c00
 800476c:	40005000 	.word	0x40005000
 8004770:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	76bb      	strb	r3, [r7, #26]
        break;
 800477c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80f1 	beq.w	8004968 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	429a      	cmp	r2, r3
 8004794:	d305      	bcc.n	80047a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d902      	bls.n	80047a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	76bb      	strb	r3, [r7, #26]
 80047a6:	e0df      	b.n	8004968 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	020b      	lsls	r3, r1, #8
 80047ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047be:	0202      	lsls	r2, r0, #8
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6849      	ldr	r1, [r1, #4]
 80047c4:	0849      	lsrs	r1, r1, #1
 80047c6:	4608      	mov	r0, r1
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	1814      	adds	r4, r2, r0
 80047ce:	eb43 0501 	adc.w	r5, r3, r1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	4620      	mov	r0, r4
 80047de:	4629      	mov	r1, r5
 80047e0:	f7fb fcf2 	bl	80001c8 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f2:	d308      	bcc.n	8004806 <UART_SetConfig+0x396>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d204      	bcs.n	8004806 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e0b0      	b.n	8004968 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	76bb      	strb	r3, [r7, #26]
 800480a:	e0ad      	b.n	8004968 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004814:	d15c      	bne.n	80048d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004816:	7efb      	ldrb	r3, [r7, #27]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d828      	bhi.n	800486e <UART_SetConfig+0x3fe>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x3b4>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe fd2c 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 800484c:	6178      	str	r0, [r7, #20]
        break;
 800484e:	e013      	b.n	8004878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe fd3e 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8004854:	6178      	str	r0, [r7, #20]
        break;
 8004856:	e00f      	b.n	8004878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b49      	ldr	r3, [pc, #292]	; (8004980 <UART_SetConfig+0x510>)
 800485a:	617b      	str	r3, [r7, #20]
        break;
 800485c:	e00c      	b.n	8004878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe fc89 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8004862:	6178      	str	r0, [r7, #20]
        break;
 8004864:	e008      	b.n	8004878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	617b      	str	r3, [r7, #20]
        break;
 800486c:	e004      	b.n	8004878 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	76bb      	strb	r3, [r7, #26]
        break;
 8004876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d074      	beq.n	8004968 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	005a      	lsls	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b0f      	cmp	r3, #15
 800489a:	d916      	bls.n	80048ca <UART_SetConfig+0x45a>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d212      	bcs.n	80048ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f023 030f 	bic.w	r3, r3, #15
 80048ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	4313      	orrs	r3, r2
 80048be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	89fa      	ldrh	r2, [r7, #14]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e04e      	b.n	8004968 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	76bb      	strb	r3, [r7, #26]
 80048ce:	e04b      	b.n	8004968 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d0:	7efb      	ldrb	r3, [r7, #27]
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x4b6>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x46c>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fcd0 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8004904:	6178      	str	r0, [r7, #20]
        break;
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fce2 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 800490c:	6178      	str	r0, [r7, #20]
        break;
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <UART_SetConfig+0x510>)
 8004912:	617b      	str	r3, [r7, #20]
        break;
 8004914:	e00c      	b.n	8004930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fc2d 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 800491a:	6178      	str	r0, [r7, #20]
        break;
 800491c:	e008      	b.n	8004930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	617b      	str	r3, [r7, #20]
        break;
 8004924:	e004      	b.n	8004930 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	76bb      	strb	r3, [r7, #26]
        break;
 800492e:	bf00      	nop
    }

    if (pclk != 0U)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085a      	lsrs	r2, r3, #1
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	b29b      	uxth	r3, r3
 800494a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d908      	bls.n	8004964 <UART_SetConfig+0x4f4>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d204      	bcs.n	8004964 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e001      	b.n	8004968 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004974:	7ebb      	ldrb	r3, [r7, #26]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bdb0      	pop	{r4, r5, r7, pc}
 800497e:	bf00      	nop
 8004980:	00f42400 	.word	0x00f42400

08004984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01a      	beq.n	8004a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d10a      	bne.n	8004a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad8:	f7fc fa14 	bl	8000f04 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d10e      	bne.n	8004b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f82d 	bl	8004b5a <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e023      	b.n	8004b52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d10e      	bne.n	8004b36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f817 	bl	8004b5a <UART_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e00d      	b.n	8004b52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6a:	e05e      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d05a      	beq.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b74:	f7fc f9c6 	bl	8000f04 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d11b      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e043      	b.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02c      	beq.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	d124      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bf8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e00f      	b.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d091      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4d0d      	ldr	r5, [pc, #52]	; (8004c8c <__libc_init_array+0x38>)
 8004c58:	4c0d      	ldr	r4, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	2600      	movs	r6, #0
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	4d0b      	ldr	r5, [pc, #44]	; (8004c94 <__libc_init_array+0x40>)
 8004c66:	4c0c      	ldr	r4, [pc, #48]	; (8004c98 <__libc_init_array+0x44>)
 8004c68:	f000 f820 	bl	8004cac <_init>
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	2600      	movs	r6, #0
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08004d14 	.word	0x08004d14
 8004c90:	08004d14 	.word	0x08004d14
 8004c94:	08004d14 	.word	0x08004d14
 8004c98:	08004d18 	.word	0x08004d18

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <_init>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr

08004cb8 <_fini>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr
