
Optical_power_managment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08009010  08009010  00019010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800948c  0800948c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009494  08009494  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800949c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001dc  08009678  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08009678  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179e0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed1  00000000  00000000  00037bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a385  00000000  00000000  0003d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016542  00000000  00000000  000674cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108c93  00000000  00000000  0007da0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001866a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006530  00000000  00000000  001866f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ff4 	.word	0x08008ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008ff4 	.word	0x08008ff4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ec4:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000eca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f26:	f001 f975 	bl	8002214 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f30:	f000 fbcc 	bl	80016cc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f40:	f002 f89c 	bl	800307c <HAL_ADCEx_MultiModeConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4a:	f000 fbbf 	bl	80016cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_ADC1_Init+0xec>)
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f52:	2306      	movs	r3, #6
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5a:	237f      	movs	r3, #127	; 0x7f
 8000f5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <MX_ADC1_Init+0xe4>)
 8000f6c:	f001 fb7a 	bl	8002664 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f76:	f000 fba9 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000270 	.word	0x20000270
 8000f88:	50040000 	.word	0x50040000
 8000f8c:	c7520000 	.word	0xc7520000

08000f90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fa8:	4a29      	ldr	r2, [pc, #164]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000faa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fc8:	2204      	movs	r2, #4
 8000fca:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_ADC2_Init+0xbc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_ADC2_Init+0xbc>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_ADC2_Init+0xbc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_ADC2_Init+0xbc>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <MX_ADC2_Init+0xbc>)
 800100a:	f001 f903 	bl	8002214 <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001014:	f000 fb5a 	bl	80016cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_ADC2_Init+0xc4>)
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2306      	movs	r3, #6
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001020:	2304      	movs	r3, #4
 8001022:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001024:	237f      	movs	r3, #127	; 0x7f
 8001026:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001028:	2304      	movs	r3, #4
 800102a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_ADC2_Init+0xbc>)
 8001036:	f001 fb15 	bl	8002664 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001040:	f000 fb44 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000020c 	.word	0x2000020c
 8001050:	50040100 	.word	0x50040100
 8001054:	04300002 	.word	0x04300002

08001058 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_ADC_MspInit+0x168>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d140      	bne.n	80010fc <HAL_ADC_MspInit+0xa4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800107a:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_ADC_MspInit+0x16c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_ADC_MspInit+0x16c>)
 8001082:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <HAL_ADC_MspInit+0x16c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10b      	bne.n	80010a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 8001092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010a4:	4b49      	ldr	r3, [pc, #292]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_ADC_MspInit+0x178>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b0:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ca:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010d2:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010d4:	2220      	movs	r2, #32
 80010d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d8:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010de:	483b      	ldr	r0, [pc, #236]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010e0:	f002 f98e 	bl	8003400 <HAL_DMA_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_ADC_MspInit+0x96>
    {
      Error_Handler();
 80010ea:	f000 faef 	bl	80016cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a36      	ldr	r2, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80010f4:	4a35      	ldr	r2, [pc, #212]	; (80011cc <HAL_ADC_MspInit+0x174>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80010fa:	e05c      	b.n	80011b6 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a34      	ldr	r2, [pc, #208]	; (80011d4 <HAL_ADC_MspInit+0x17c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d157      	bne.n	80011b6 <HAL_ADC_MspInit+0x15e>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_ADC_MspInit+0x16c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <HAL_ADC_MspInit+0x16c>)
 800110e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <HAL_ADC_MspInit+0x16c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d10b      	bne.n	8001130 <HAL_ADC_MspInit+0xd8>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 800111e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_ADC_MspInit+0x170>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114c:	230b      	movs	r3, #11
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	481f      	ldr	r0, [pc, #124]	; (80011d8 <HAL_ADC_MspInit+0x180>)
 800115c:	f002 fb48 	bl	80037f0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_ADC_MspInit+0x188>)
 8001164:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_ADC_MspInit+0x184>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_ADC_MspInit+0x184>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_ADC_MspInit+0x184>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <HAL_ADC_MspInit+0x184>)
 800119c:	f002 f930 	bl	8003400 <HAL_DMA_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_ADC_MspInit+0x152>
      Error_Handler();
 80011a6:	f000 fa91 	bl	80016cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_ADC_MspInit+0x184>)
 80011ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_ADC_MspInit+0x184>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	50040000 	.word	0x50040000
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	40021000 	.word	0x40021000
 80011cc:	200002d4 	.word	0x200002d4
 80011d0:	40020008 	.word	0x40020008
 80011d4:	50040100 	.word	0x50040100
 80011d8:	48000800 	.word	0x48000800
 80011dc:	2000031c 	.word	0x2000031c
 80011e0:	4002001c 	.word	0x4002001c

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_DMA_Init+0x48>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <MX_DMA_Init+0x48>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6493      	str	r3, [r2, #72]	; 0x48
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_DMA_Init+0x48>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200b      	movs	r0, #11
 8001208:	f002 f8c3 	bl	8003392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 f8dc 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200c      	movs	r0, #12
 8001218:	f002 f8bb 	bl	8003392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800121c:	200c      	movs	r0, #12
 800121e:	f002 f8d4 	bl	80033ca <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	4b70      	ldr	r3, [pc, #448]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a6f      	ldr	r2, [pc, #444]	; (8001408 <MX_GPIO_Init+0x1d8>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a69      	ldr	r2, [pc, #420]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <MX_GPIO_Init+0x1d8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <MX_GPIO_Init+0x1d8>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b61      	ldr	r3, [pc, #388]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a5d      	ldr	r2, [pc, #372]	; (8001408 <MX_GPIO_Init+0x1d8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <MX_GPIO_Init+0x1d8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	4b58      	ldr	r3, [pc, #352]	; (8001408 <MX_GPIO_Init+0x1d8>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a57      	ldr	r2, [pc, #348]	; (8001408 <MX_GPIO_Init+0x1d8>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b55      	ldr	r3, [pc, #340]	; (8001408 <MX_GPIO_Init+0x1d8>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWITCH_GPIO_Port, SWITCH_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2102      	movs	r1, #2
 80012c2:	4852      	ldr	r0, [pc, #328]	; (800140c <MX_GPIO_Init+0x1dc>)
 80012c4:	f002 fc56 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2120      	movs	r1, #32
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f002 fc50 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_inv_Pin|DE_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f242 0120 	movw	r1, #8224	; 0x2020
 80012da:	484d      	ldr	r0, [pc, #308]	; (8001410 <MX_GPIO_Init+0x1e0>)
 80012dc:	f002 fc4a 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <MX_GPIO_Init+0x1e4>)
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4845      	ldr	r0, [pc, #276]	; (800140c <MX_GPIO_Init+0x1dc>)
 80012f6:	f002 fa7b 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80012fa:	2302      	movs	r3, #2
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	483e      	ldr	r0, [pc, #248]	; (800140c <MX_GPIO_Init+0x1dc>)
 8001312:	f002 fa6d 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001316:	f640 53fc 	movw	r3, #3580	; 0xdfc
 800131a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	2303      	movs	r3, #3
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4838      	ldr	r0, [pc, #224]	; (800140c <MX_GPIO_Init+0x1dc>)
 800132c:	f002 fa60 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 PA7 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001330:	f649 13c2 	movw	r3, #39362	; 0x99c2
 8001334:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f002 fa52 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3109_PGOOD_Pin;
 800134c:	2310      	movs	r3, #16
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3109_PGOOD_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f002 fa45 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001366:	2320      	movs	r3, #32
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f002 fa36 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001384:	f649 73d7 	movw	r3, #40919	; 0x9fd7
 8001388:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138a:	2303      	movs	r3, #3
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	481d      	ldr	r0, [pc, #116]	; (8001410 <MX_GPIO_Init+0x1e0>)
 800139a:	f002 fa29 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RE_inv_Pin|DE_Pin;
 800139e:	f242 0320 	movw	r3, #8224	; 0x2020
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4816      	ldr	r0, [pc, #88]	; (8001410 <MX_GPIO_Init+0x1e0>)
 80013b8:	f002 fa1a 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3128_PGOOD_Pin;
 80013bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3128_PGOOD_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <MX_GPIO_Init+0x1e0>)
 80013d2:	f002 fa0d 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3105_PGOOD_Pin;
 80013d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3105_PGOOD_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <MX_GPIO_Init+0x1dc>)
 80013ec:	f002 fa00 	bl	80037f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2028      	movs	r0, #40	; 0x28
 80013f6:	f001 ffcc 	bl	8003392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013fa:	2028      	movs	r0, #40	; 0x28
 80013fc:	f001 ffe5 	bl	80033ca <HAL_NVIC_EnableIRQ>

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800
 8001410:	48000400 	.word	0x48000400
 8001414:	10210000 	.word	0x10210000

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141c:	f000 fca8 	bl	8001d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f874 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f7ff ff04 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 8001428:	f7ff fedc 	bl	80011e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800142c:	f000 fb80 	bl	8001b30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001430:	f7ff fd36 	bl	8000ea0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001434:	f000 fb4c 	bl	8001ad0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001438:	f7ff fdaa 	bl	8000f90 <MX_ADC2_Init>
  MX_TIM6_Init();
 800143c:	f000 fabc 	bl	80019b8 <MX_TIM6_Init>
  MX_UART5_Init();
 8001440:	f000 fb16 	bl	8001a70 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // ADC measure
  HAL_ADC_Start_DMA(&hadc1, &dma_temp_measure_raw, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	4929      	ldr	r1, [pc, #164]	; (80014ec <main+0xd4>)
 8001448:	4829      	ldr	r0, [pc, #164]	; (80014f0 <main+0xd8>)
 800144a:	f001 f839 	bl	80024c0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &dma_vcc_measure_raw, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	4928      	ldr	r1, [pc, #160]	; (80014f4 <main+0xdc>)
 8001452:	4829      	ldr	r0, [pc, #164]	; (80014f8 <main+0xe0>)
 8001454:	f001 f834 	bl	80024c0 <HAL_ADC_Start_DMA>

  // Timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <main+0xe4>)
 800145a:	f003 ff39 	bl	80052d0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(LTC3105_PGOOD_GPIO_Port, LTC3105_PGOOD_Pin) == 1)
 800145e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001462:	4827      	ldr	r0, [pc, #156]	; (8001500 <main+0xe8>)
 8001464:	f002 fb6e 	bl	8003b44 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <main+0x66>
	  {
		  g_power_status |= MASK_LTC3105_PGOOD;
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <main+0xec>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <main+0xec>)
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e006      	b.n	800148c <main+0x74>
	  }
	  else
	  {
		  g_power_status &= ~MASK_LTC3105_PGOOD;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <main+0xec>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <main+0xec>)
 800148a:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(LTC3109_PGOOD_GPIO_Port, LTC3109_PGOOD_Pin) == 1)
 800148c:	2110      	movs	r1, #16
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f002 fb57 	bl	8003b44 <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <main+0x94>
	  {
		  g_power_status |= MASK_LTC3109_PGOOD;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <main+0xec>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <main+0xec>)
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e006      	b.n	80014ba <main+0xa2>
	  }
	  else
	  {
		  g_power_status &= ~MASK_LTC3109_PGOOD;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <main+0xec>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f023 0302 	bic.w	r3, r3, #2
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <main+0xec>)
 80014b8:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(LTC3128_PGOOD_GPIO_Port, LTC3128_PGOOD_Pin) == 1)
 80014ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014be:	4812      	ldr	r0, [pc, #72]	; (8001508 <main+0xf0>)
 80014c0:	f002 fb40 	bl	8003b44 <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <main+0xc2>
	  {
		  g_power_status |= MASK_LTC3128_PGOOD;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <main+0xec>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <main+0xec>)
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e7c1      	b.n	800145e <main+0x46>
	  }
	  else
	  {
		  g_power_status &= ~MASK_LTC3128_PGOOD;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <main+0xec>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f023 0304 	bic.w	r3, r3, #4
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <main+0xec>)
 80014e6:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(LTC3105_PGOOD_GPIO_Port, LTC3105_PGOOD_Pin) == 1)
 80014e8:	e7b9      	b.n	800145e <main+0x46>
 80014ea:	bf00      	nop
 80014ec:	20000364 	.word	0x20000364
 80014f0:	20000270 	.word	0x20000270
 80014f4:	20000368 	.word	0x20000368
 80014f8:	2000020c 	.word	0x2000020c
 80014fc:	2000036c 	.word	0x2000036c
 8001500:	48000800 	.word	0x48000800
 8001504:	200001fc 	.word	0x200001fc
 8001508:	48000400 	.word	0x48000400

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0b8      	sub	sp, #224	; 0xe0
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001516:	2244      	movs	r2, #68	; 0x44
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fece 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2288      	movs	r2, #136	; 0x88
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fec0 	bl	80062bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154a:	2310      	movs	r3, #16
 800154c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 800155c:	2302      	movs	r3, #2
 800155e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001562:	2308      	movs	r3, #8
 8001564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001568:	2307      	movs	r3, #7
 800156a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001574:	2308      	movs	r3, #8
 8001576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fba6 	bl	8003cd0 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800158a:	f000 f89f 	bl	80016cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2303      	movs	r3, #3
 8001596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 ff72 	bl	800449c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015be:	f000 f885 	bl	80016cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80015c2:	f244 0313 	movw	r3, #16403	; 0x4013
 80015c6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80015d4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80015d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 f963 	bl	80048a8 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80015e8:	f000 f870 	bl	80016cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f0:	f002 fb18 	bl	8003c24 <HAL_PWREx_ControlVoltageScaling>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015fa:	f000 f867 	bl	80016cc <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	37e0      	adds	r7, #224	; 0xe0
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  /* Prevent unused argument(s) compilation warning */
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b2      	sub	sp, #200	; 0xc8
 800160c:	af02      	add	r7, sp, #8
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
#if defined(TEST_UART)
  if (GPIO_Pin == B1_Pin)
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001618:	d132      	bne.n	8001680 <HAL_GPIO_EXTI_Callback+0x78>
  {
	  char data1[20];
	  char data2[150];

	  int size_1 = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  int size_2 = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  size_1 = sprintf(data1, "TEST_MESSAGE_UART1_");
 8001626:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800162a:	4917      	ldr	r1, [pc, #92]	; (8001688 <HAL_GPIO_EXTI_Callback+0x80>)
 800162c:	4618      	mov	r0, r3
 800162e:	f005 fab7 	bl	8006ba0 <siprintf>
 8001632:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	  HAL_UART_Transmit(&huart1, &data1, size_1, HAL_MAX_DELAY);
 8001636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800163a:	b29a      	uxth	r2, r3
 800163c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <HAL_GPIO_EXTI_Callback+0x84>)
 8001646:	f004 f989 	bl	800595c <HAL_UART_Transmit>
	  size_2 = sprintf(data2, "TEST_MESSAGE_UART2 POWER_STATUS = %d TEMP = %d VCC = %d\n", g_power_status, dma_temp_measure_raw, dma_vcc_measure_raw);
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_GPIO_EXTI_Callback+0x88>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4619      	mov	r1, r3
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_GPIO_EXTI_Callback+0x90>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f107 000c 	add.w	r0, r7, #12
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	460a      	mov	r2, r1
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <HAL_GPIO_EXTI_Callback+0x94>)
 8001664:	f005 fa9c 	bl	8006ba0 <siprintf>
 8001668:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	  HAL_UART_Transmit(&huart5, &data2, size_2, HAL_MAX_DELAY);
 800166c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001670:	b29a      	uxth	r2, r3
 8001672:	f107 010c 	add.w	r1, r7, #12
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	4809      	ldr	r0, [pc, #36]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x98>)
 800167c:	f004 f96e 	bl	800595c <HAL_UART_Transmit>
  }
#endif
}
 8001680:	bf00      	nop
 8001682:	37c0      	adds	r7, #192	; 0xc0
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08009010 	.word	0x08009010
 800168c:	2000043c 	.word	0x2000043c
 8001690:	200001fc 	.word	0x200001fc
 8001694:	20000364 	.word	0x20000364
 8001698:	20000368 	.word	0x20000368
 800169c:	08009024 	.word	0x08009024
 80016a0:	200003b8 	.word	0x200003b8

080016a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d104      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016b6:	2120      	movs	r1, #32
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f002 fa72 	bl	8003ba4 <HAL_GPIO_TogglePin>
	}
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40001000 	.word	0x40001000

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_MspInit+0x44>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_MspInit+0x44>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_MspInit+0x44>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x44>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	; 0x58
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 fb5c 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Channel1_IRQHandler+0x10>)
 800177a:	f001 ff59 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002d4 	.word	0x200002d4

08001788 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Channel2_IRQHandler+0x10>)
 800178e:	f001 ff4f 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000031c 	.word	0x2000031c

0800179c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a4:	f002 fa18 	bl	8003bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM6_DAC_IRQHandler+0x10>)
 80017b2:	f003 fdfd 	bl	80053b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000036c 	.word	0x2000036c

080017c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_kill>:

int _kill(int pid, int sig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017da:	f004 fd45 	bl	8006268 <__errno>
 80017de:	4603      	mov	r3, r0
 80017e0:	2216      	movs	r2, #22
 80017e2:	601a      	str	r2, [r3, #0]
	return -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_exit>:

void _exit (int status)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ffe7 	bl	80017d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001802:	e7fe      	b.n	8001802 <_exit+0x12>

08001804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
	}

return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e009      	b.n	8001864 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf1      	blt.n	8001850 <_write+0x12>
	}
	return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f004 fcaa 	bl	8006268 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20018000 	.word	0x20018000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000200 	.word	0x20000200
 8001948:	20000558 	.word	0x20000558

0800194c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <SystemInit+0x64>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <SystemInit+0x64>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <SystemInit+0x68>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <SystemInit+0x68>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <SystemInit+0x68>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <SystemInit+0x68>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <SystemInit+0x68>)
 8001978:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800197c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001980:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <SystemInit+0x68>)
 8001984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001988:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <SystemInit+0x68>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <SystemInit+0x68>)
 8001990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <SystemInit+0x68>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SystemInit+0x64>)
 800199e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a2:	609a      	str	r2, [r3, #8]
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00
 80019b4:	40021000 	.word	0x40021000

080019b8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_TIM6_Init+0x64>)
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <MX_TIM6_Init+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_TIM6_Init+0x64>)
 80019d0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_TIM6_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 124;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_TIM6_Init+0x64>)
 80019de:	227c      	movs	r2, #124	; 0x7c
 80019e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_TIM6_Init+0x64>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <MX_TIM6_Init+0x64>)
 80019ea:	f003 fc19 	bl	8005220 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019f4:	f7ff fe6a 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_TIM6_Init+0x64>)
 8001a06:	f003 feb5 	bl	8005774 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a10:	f7ff fe5c 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000036c 	.word	0x2000036c
 8001a20:	40001000 	.word	0x40001000

08001a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x44>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d113      	bne.n	8001a5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6593      	str	r3, [r2, #88]	; 0x58
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2036      	movs	r0, #54	; 0x36
 8001a54:	f001 fc9d 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f001 fcb6 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40001000 	.word	0x40001000
 8001a6c:	40021000 	.word	0x40021000

08001a70 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_UART5_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_UART5_Init+0x58>)
 8001ab4:	f003 ff04 	bl	80058c0 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001abe:	f7ff fe05 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003b8 	.word	0x200003b8
 8001acc:	40005000 	.word	0x40005000

08001ad0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <MX_USART1_UART_Init+0x5c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_USART1_UART_Init+0x58>)
 8001b14:	f003 fed4 	bl	80058c0 <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b1e:	f7ff fdd5 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000043c 	.word	0x2000043c
 8001b2c:	40013800 	.word	0x40013800

08001b30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <MX_USART2_UART_Init+0x5c>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART2_UART_Init+0x58>)
 8001b74:	f003 fea4 	bl	80058c0 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b7e:	f7ff fda5 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004c0 	.word	0x200004c0
 8001b8c:	40004400 	.word	0x40004400

08001b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_UART_MspInit+0x174>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d145      	bne.n	8001c3e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001bb2:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	483d      	ldr	r0, [pc, #244]	; (8001d0c <HAL_UART_MspInit+0x17c>)
 8001c18:	f001 fdea 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4836      	ldr	r0, [pc, #216]	; (8001d10 <HAL_UART_MspInit+0x180>)
 8001c38:	f001 fdda 	bl	80037f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c3c:	e05d      	b.n	8001cfa <HAL_UART_MspInit+0x16a>
  else if(uartHandle->Instance==USART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <HAL_UART_MspInit+0x184>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d12a      	bne.n	8001c9e <HAL_UART_MspInit+0x10e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c52:	6613      	str	r3, [r2, #96]	; 0x60
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART_TX_Trans_Pin|UART_RX_Trans_Pin;
 8001c78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c98:	f001 fdaa 	bl	80037f0 <HAL_GPIO_Init>
}
 8001c9c:	e02d      	b.n	8001cfa <HAL_UART_MspInit+0x16a>
  else if(uartHandle->Instance==USART2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_UART_MspInit+0x188>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d128      	bne.n	8001cfa <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_UART_MspInit+0x178>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART2_TX_Debug_Pin|UART2_RX_Debug_Pin;
 8001cd8:	230c      	movs	r3, #12
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf6:	f001 fd7b 	bl	80037f0 <HAL_GPIO_Init>
}
 8001cfa:	bf00      	nop
 8001cfc:	3738      	adds	r7, #56	; 0x38
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40005000 	.word	0x40005000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000c00 	.word	0x48000c00
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40004400 	.word	0x40004400

08001d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff fe14 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
	ldr	r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <LoopForever+0x16>)
	cmp	r2, r3
 8001d46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f004 fa93 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4e:	f7ff fb63 	bl	8001418 <main>

08001d52 <LoopForever>:

LoopForever:
    b LoopForever
 8001d52:	e7fe      	b.n	8001d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d54:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d58:	0800949c 	.word	0x0800949c
	ldr	r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d60:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001d64:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001d68:	20000558 	.word	0x20000558

08001d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_2_IRQHandler>
	...

08001d70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_Init+0x3c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_Init+0x3c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f001 faf8 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 f80f 	bl	8001db0 <HAL_InitTick>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	e001      	b.n	8001da2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9e:	f7ff fc9b 	bl	80016d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40022000 	.word	0x40022000

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_InitTick+0x6c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d023      	beq.n	8001e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_InitTick+0x70>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_InitTick+0x6c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f001 fb03 	bl	80033e6 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d809      	bhi.n	8001e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f001 facd 	bl	8003392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_InitTick+0x74>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e004      	b.n	8001e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e001      	b.n	8001e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000544 	.word	0x20000544

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000544 	.word	0x20000544

08001e68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3360      	adds	r3, #96	; 0x60
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <LL_ADC_SetOffset+0x44>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	03fff000 	.word	0x03fff000

08001f18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3360      	adds	r3, #96	; 0x60
 8001f26:	461a      	mov	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3360      	adds	r3, #96	; 0x60
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3330      	adds	r3, #48	; 0x30
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	211f      	movs	r1, #31
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	f003 011f 	and.w	r1, r3, #31
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3314      	adds	r3, #20
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	0e5b      	lsrs	r3, r3, #25
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	0d1b      	lsrs	r3, r3, #20
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2107      	movs	r1, #7
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	0d1b      	lsrs	r3, r3, #20
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	431a      	orrs	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0318 	and.w	r3, r3, #24
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002074:	40d9      	lsrs	r1, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	400b      	ands	r3, r1
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	0007ffff 	.word	0x0007ffff

08002098 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6093      	str	r3, [r2, #8]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800213c:	d101      	bne.n	8002142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <LL_ADC_IsEnabled+0x18>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <LL_ADC_IsEnabled+0x1a>
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d101      	bne.n	80021de <LL_ADC_REG_IsConversionOngoing+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d101      	bne.n	8002204 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e136      	b.n	800249c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7fe ff0b 	bl	8001058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff3f 	bl	80020d8 <LL_ADC_IsDeepPowerDownEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff25 	bl	80020b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff5a 	bl	8002128 <LL_ADC_IsInternalRegulatorEnabled>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff3e 	bl	8002100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002284:	4b87      	ldr	r3, [pc, #540]	; (80024a4 <HAL_ADC_Init+0x290>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	4a87      	ldr	r2, [pc, #540]	; (80024a8 <HAL_ADC_Init+0x294>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff3c 	bl	8002128 <LL_ADC_IsInternalRegulatorEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff75 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 80022dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80cf 	bne.w	800248a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80cb 	bne.w	800248a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022fc:	f043 0202 	orr.w	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff35 	bl	8002178 <LL_ADC_IsEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d115      	bne.n	8002340 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002314:	4865      	ldr	r0, [pc, #404]	; (80024ac <HAL_ADC_Init+0x298>)
 8002316:	f7ff ff2f 	bl	8002178 <LL_ADC_IsEnabled>
 800231a:	4604      	mov	r4, r0
 800231c:	4864      	ldr	r0, [pc, #400]	; (80024b0 <HAL_ADC_Init+0x29c>)
 800231e:	f7ff ff2b 	bl	8002178 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	431c      	orrs	r4, r3
 8002326:	4863      	ldr	r0, [pc, #396]	; (80024b4 <HAL_ADC_Init+0x2a0>)
 8002328:	f7ff ff26 	bl	8002178 <LL_ADC_IsEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	4323      	orrs	r3, r4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4619      	mov	r1, r3
 800233a:	485f      	ldr	r0, [pc, #380]	; (80024b8 <HAL_ADC_Init+0x2a4>)
 800233c:	f7ff fd94 	bl	8001e68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7e5b      	ldrb	r3, [r3, #25]
 8002344:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800234a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002350:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002356:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d106      	bne.n	800237c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	3b01      	subs	r3, #1
 8002374:	045b      	lsls	r3, r3, #17
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_ADC_Init+0x2a8>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff08 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 80023b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff15 	bl	80021ec <LL_ADC_INJ_IsConversionOngoing>
 80023c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d13d      	bne.n	8002446 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d13a      	bne.n	8002446 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ec:	f023 0302 	bic.w	r3, r3, #2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	69b9      	ldr	r1, [r7, #24]
 80023f6:	430b      	orrs	r3, r1
 80023f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002400:	2b01      	cmp	r3, #1
 8002402:	d118      	bne.n	8002436 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002420:	4311      	orrs	r1, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002426:	430a      	orrs	r2, r1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	e007      	b.n	8002446 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10c      	bne.n	8002468 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f023 010f 	bic.w	r1, r3, #15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
 8002466:	e007      	b.n	8002478 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 020f 	bic.w	r2, r2, #15
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f023 0303 	bic.w	r3, r3, #3
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
 8002488:	e007      	b.n	800249a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	f043 0210 	orr.w	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800249a:	7ffb      	ldrb	r3, [r7, #31]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3724      	adds	r7, #36	; 0x24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	053e2d63 	.word	0x053e2d63
 80024ac:	50040000 	.word	0x50040000
 80024b0:	50040100 	.word	0x50040100
 80024b4:	50040200 	.word	0x50040200
 80024b8:	50040300 	.word	0x50040300
 80024bc:	fff0c007 	.word	0xfff0c007

080024c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024cc:	4850      	ldr	r0, [pc, #320]	; (8002610 <HAL_ADC_Start_DMA+0x150>)
 80024ce:	f7ff fde3 	bl	8002098 <LL_ADC_GetMultimode>
 80024d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fe74 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f040 808e 	bne.w	8002602 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x34>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e089      	b.n	8002608 <HAL_ADC_Start_DMA+0x148>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d002      	beq.n	800250e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b09      	cmp	r3, #9
 800250c:	d172      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fc98 	bl	8002e44 <ADC_Enable>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d165      	bne.n	80025ea <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a37      	ldr	r2, [pc, #220]	; (8002614 <HAL_ADC_Start_DMA+0x154>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d002      	beq.n	8002542 <HAL_ADC_Start_DMA+0x82>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	e000      	b.n	8002544 <HAL_ADC_Start_DMA+0x84>
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <HAL_ADC_Start_DMA+0x158>)
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4293      	cmp	r3, r2
 800254a:	d002      	beq.n	8002552 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	f023 0206 	bic.w	r2, r3, #6
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	659a      	str	r2, [r3, #88]	; 0x58
 8002576:	e002      	b.n	800257e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	4a26      	ldr	r2, [pc, #152]	; (800261c <HAL_ADC_Start_DMA+0x15c>)
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	4a25      	ldr	r2, [pc, #148]	; (8002620 <HAL_ADC_Start_DMA+0x160>)
 800258c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a24      	ldr	r2, [pc, #144]	; (8002624 <HAL_ADC_Start_DMA+0x164>)
 8002594:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	221c      	movs	r2, #28
 800259c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0210 	orr.w	r2, r2, #16
 80025b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3340      	adds	r3, #64	; 0x40
 80025d0:	4619      	mov	r1, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f000 ffcb 	bl	8003570 <HAL_DMA_Start_IT>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fddb 	bl	800219e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025e8:	e00d      	b.n	8002606 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80025f2:	e008      	b.n	8002606 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002600:	e001      	b.n	8002606 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	50040300 	.word	0x50040300
 8002614:	50040100 	.word	0x50040100
 8002618:	50040000 	.word	0x50040000
 800261c:	08002f09 	.word	0x08002f09
 8002620:	08002fe1 	.word	0x08002fe1
 8002624:	08002ffd 	.word	0x08002ffd

08002628 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b0b6      	sub	sp, #216	; 0xd8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x22>
 8002682:	2302      	movs	r3, #2
 8002684:	e3c7      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x7b2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fd97 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 83a8 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d824      	bhi.n	80026f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	3b02      	subs	r3, #2
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d81b      	bhi.n	80026ea <HAL_ADC_ConfigChannel+0x86>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <HAL_ADC_ConfigChannel+0x54>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026d1 	.word	0x080026d1
 80026c0:	080026d9 	.word	0x080026d9
 80026c4:	080026e1 	.word	0x080026e1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	220c      	movs	r2, #12
 80026cc:	605a      	str	r2, [r3, #4]
          break;
 80026ce:	e011      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2212      	movs	r2, #18
 80026d4:	605a      	str	r2, [r3, #4]
          break;
 80026d6:	e00d      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2218      	movs	r2, #24
 80026dc:	605a      	str	r2, [r3, #4]
          break;
 80026de:	e009      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	605a      	str	r2, [r3, #4]
          break;
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2206      	movs	r2, #6
 80026ee:	605a      	str	r2, [r3, #4]
          break;
 80026f0:	e000      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026f2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	f7ff fc4d 	bl	8001fa0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fd5b 	bl	80021c6 <LL_ADC_REG_IsConversionOngoing>
 8002710:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fd67 	bl	80021ec <LL_ADC_INJ_IsConversionOngoing>
 800271e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002722:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 81a6 	bne.w	8002a78 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800272c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 81a1 	bne.w	8002a78 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff fc58 	bl	8001ff8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	08db      	lsrs	r3, r3, #3
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00a      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800277a:	f7ff fba9 	bl	8001ed0 <LL_ADC_SetOffset>
 800277e:	e17b      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fbc6 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x148>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fbbb 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	e01e      	b.n	80027ea <HAL_ADC_ConfigChannel+0x186>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fbb0 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e004      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x19e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	e018      	b.n	8002834 <HAL_ADC_ConfigChannel+0x1d0>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800281a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800281e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e004      	b.n	8002834 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800282a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fb7f 	bl	8001f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fb63 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fb58 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	e01e      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x24c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fb4d 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002890:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e004      	b.n	80028ae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80028a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x264>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	e018      	b.n	80028fa <HAL_ADC_ConfigChannel+0x296>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e004      	b.n	80028fa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d106      	bne.n	800290c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fb1c 	bl	8001f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2102      	movs	r1, #2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fb00 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x2d4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2102      	movs	r1, #2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff faf5 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	e01e      	b.n	8002976 <HAL_ADC_ConfigChannel+0x312>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2102      	movs	r1, #2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff faea 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800295a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800295e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e004      	b.n	8002974 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800296a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x32a>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e016      	b.n	80029bc <HAL_ADC_ConfigChannel+0x358>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e004      	b.n	80029bc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80029b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2102      	movs	r1, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fabb 	bl	8001f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2103      	movs	r1, #3
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa9f 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x396>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2103      	movs	r1, #3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fa94 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	e017      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x3c6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2103      	movs	r1, #3
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fa89 	bl	8001f18 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a14:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x3de>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0e9b      	lsrs	r3, r3, #26
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	e011      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x402>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a52:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e003      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d106      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2103      	movs	r1, #3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fa66 	bl	8001f44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fb7b 	bl	8002178 <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 813f 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f7ff fada 	bl	8002050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a8e      	ldr	r2, [pc, #568]	; (8002cdc <HAL_ADC_ConfigChannel+0x678>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 8130 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x46c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e019      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x4a0>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	bf94      	ite	ls
 8002afe:	2301      	movls	r3, #1
 8002b00:	2300      	movhi	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d079      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x4c0>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	069b      	lsls	r3, r3, #26
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	e015      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x4ec>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x50c>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	e017      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x53c>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x562>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	051b      	lsls	r3, r3, #20
 8002bc4:	e018      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x594>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e003      	b.n	8002bea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	e080      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d107      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x5b4>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	069b      	lsls	r3, r3, #26
 8002c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c16:	e015      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x5e0>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x600>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	e017      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x630>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	61fb      	str	r3, [r7, #28]
  return result;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e003      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x65c>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	3301      	adds	r3, #1
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b1e      	subs	r3, #30
 8002cb8:	051b      	lsls	r3, r3, #20
 8002cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	e01d      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x698>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	613b      	str	r3, [r7, #16]
  return result;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e005      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x684>
 8002cdc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b1e      	subs	r3, #30
 8002cf6:	051b      	lsls	r3, r3, #20
 8002cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7ff f978 	bl	8001ff8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d07a      	beq.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d14:	4843      	ldr	r0, [pc, #268]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d16:	f7ff f8cd 	bl	8001eb4 <LL_ADC_GetCommonPathInternalCh>
 8002d1a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d12c      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d126      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x6e4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a3b      	ldr	r2, [pc, #236]	; (8002e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d15d      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d50:	4619      	mov	r1, r3
 8002d52:	4834      	ldr	r0, [pc, #208]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d54:	f7ff f89b 	bl	8001e8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d80:	e040      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_ADC_ConfigChannel+0x7d8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d118      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x75a>
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d112      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x748>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a22      	ldr	r2, [pc, #136]	; (8002e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d12d      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db4:	4619      	mov	r1, r3
 8002db6:	481b      	ldr	r0, [pc, #108]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002db8:	f7ff f869 	bl	8001e8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dbc:	e024      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d120      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11a      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d115      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de6:	4619      	mov	r1, r3
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dea:	f7ff f850 	bl	8001e8e <LL_ADC_SetCommonPathInternalCh>
 8002dee:	e00c      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e02:	e002      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	37d8      	adds	r7, #216	; 0xd8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	80080000 	.word	0x80080000
 8002e24:	50040300 	.word	0x50040300
 8002e28:	c7520000 	.word	0xc7520000
 8002e2c:	50040000 	.word	0x50040000
 8002e30:	50040200 	.word	0x50040200
 8002e34:	20000000 	.word	0x20000000
 8002e38:	053e2d63 	.word	0x053e2d63
 8002e3c:	cb840000 	.word	0xcb840000
 8002e40:	80000001 	.word	0x80000001

08002e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f991 	bl	8002178 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d14d      	bne.n	8002ef8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <ADC_Enable+0xc0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f043 0210 	orr.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e039      	b.n	8002efa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f960 	bl	8002150 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e90:	f7fe ffde 	bl	8001e50 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e96:	e028      	b.n	8002eea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff f96b 	bl	8002178 <LL_ADC_IsEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d104      	bne.n	8002eb2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f94f 	bl	8002150 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eb2:	f7fe ffcd 	bl	8001e50 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d914      	bls.n	8002eea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d00d      	beq.n	8002eea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e007      	b.n	8002efa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d1cf      	bne.n	8002e98 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	8000003f 	.word	0x8000003f

08002f08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d14b      	bne.n	8002fba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d021      	beq.n	8002f80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f81a 	bl	8001f7a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d032      	beq.n	8002fb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d12b      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11f      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
 8002f7e:	e018      	b.n	8002fb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d111      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff fb38 	bl	8002628 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fb8:	e00e      	b.n	8002fd8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7ff fb42 	bl	8002650 <HAL_ADC_ErrorCallback>
}
 8002fcc:	e004      	b.n	8002fd8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fb24 	bl	800263c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff fb14 	bl	8002650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <LL_ADC_IsEnabled>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <LL_ADC_IsEnabled+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_IsEnabled+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_REG_IsConversionOngoing>:
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d101      	bne.n	800306e <LL_ADC_REG_IsConversionOngoing+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b09f      	sub	sp, #124	; 0x7c
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003096:	2302      	movs	r3, #2
 8003098:	e093      	b.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030a2:	2300      	movs	r3, #0
 80030a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80030a6:	2300      	movs	r3, #0
 80030a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a47      	ldr	r2, [pc, #284]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d102      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	e001      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e072      	b.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ffb9 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 80030e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ffb3 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d154      	bne.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d151      	bne.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d02c      	beq.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800311a:	035b      	lsls	r3, r3, #13
 800311c:	430b      	orrs	r3, r1
 800311e:	431a      	orrs	r2, r3
 8003120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003122:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003124:	4829      	ldr	r0, [pc, #164]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003126:	f7ff ff83 	bl	8003030 <LL_ADC_IsEnabled>
 800312a:	4604      	mov	r4, r0
 800312c:	4828      	ldr	r0, [pc, #160]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800312e:	f7ff ff7f 	bl	8003030 <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	431c      	orrs	r4, r3
 8003136:	4828      	ldr	r0, [pc, #160]	; (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003138:	f7ff ff7a 	bl	8003030 <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	4323      	orrs	r3, r4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d137      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	6811      	ldr	r1, [r2, #0]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	430a      	orrs	r2, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003160:	e028      	b.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800316c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316e:	4817      	ldr	r0, [pc, #92]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003170:	f7ff ff5e 	bl	8003030 <LL_ADC_IsEnabled>
 8003174:	4604      	mov	r4, r0
 8003176:	4816      	ldr	r0, [pc, #88]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003178:	f7ff ff5a 	bl	8003030 <LL_ADC_IsEnabled>
 800317c:	4603      	mov	r3, r0
 800317e:	431c      	orrs	r4, r3
 8003180:	4815      	ldr	r0, [pc, #84]	; (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003182:	f7ff ff55 	bl	8003030 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	4323      	orrs	r3, r4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d112      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003196:	f023 030f 	bic.w	r3, r3, #15
 800319a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800319c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800319e:	e009      	b.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80031b2:	e000      	b.n	80031b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	377c      	adds	r7, #124	; 0x7c
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	50040000 	.word	0x50040000
 80031d0:	50040100 	.word	0x50040100
 80031d4:	50040300 	.word	0x50040300
 80031d8:	50040200 	.word	0x50040200

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff8e 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff29 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a4:	f7ff ff3e 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7ff ff8e 	bl	80032d0 <NVIC_EncodePriority>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff5d 	bl	800327c <__NVIC_SetPriority>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff31 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ffa2 	bl	8003338 <SysTick_Config>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e098      	b.n	8003544 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_DMA_Init+0x150>)
 800341a:	429a      	cmp	r2, r3
 800341c:	d80f      	bhi.n	800343e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_DMA_Init+0x154>)
 8003426:	4413      	add	r3, r2
 8003428:	4a4b      	ldr	r2, [pc, #300]	; (8003558 <HAL_DMA_Init+0x158>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	009a      	lsls	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a48      	ldr	r2, [pc, #288]	; (800355c <HAL_DMA_Init+0x15c>)
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
 800343c:	e00e      	b.n	800345c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_DMA_Init+0x160>)
 8003446:	4413      	add	r3, r2
 8003448:	4a43      	ldr	r2, [pc, #268]	; (8003558 <HAL_DMA_Init+0x158>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a42      	ldr	r2, [pc, #264]	; (8003564 <HAL_DMA_Init+0x164>)
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b6:	d039      	beq.n	800352c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	4a27      	ldr	r2, [pc, #156]	; (800355c <HAL_DMA_Init+0x15c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d11a      	bne.n	80034f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_DMA_Init+0x168>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 031c 	and.w	r3, r3, #28
 80034ce:	210f      	movs	r1, #15
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	4924      	ldr	r1, [pc, #144]	; (8003568 <HAL_DMA_Init+0x168>)
 80034d8:	4013      	ands	r3, r2
 80034da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_DMA_Init+0x168>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f003 031c 	and.w	r3, r3, #28
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	491d      	ldr	r1, [pc, #116]	; (8003568 <HAL_DMA_Init+0x168>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
 80034f6:	e019      	b.n	800352c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_DMA_Init+0x16c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f003 031c 	and.w	r3, r3, #28
 8003504:	210f      	movs	r1, #15
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	4917      	ldr	r1, [pc, #92]	; (800356c <HAL_DMA_Init+0x16c>)
 800350e:	4013      	ands	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_DMA_Init+0x16c>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f003 031c 	and.w	r3, r3, #28
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	4911      	ldr	r1, [pc, #68]	; (800356c <HAL_DMA_Init+0x16c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40020407 	.word	0x40020407
 8003554:	bffdfff8 	.word	0xbffdfff8
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	40020000 	.word	0x40020000
 8003560:	bffdfbf8 	.word	0xbffdfbf8
 8003564:	40020400 	.word	0x40020400
 8003568:	400200a8 	.word	0x400200a8
 800356c:	400204a8 	.word	0x400204a8

08003570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Start_IT+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e04b      	b.n	8003628 <HAL_DMA_Start_IT+0xb8>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d13a      	bne.n	800361a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f8e0 	bl	800378e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 020e 	orr.w	r2, r2, #14
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00f      	b.n	8003608 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0204 	bic.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 020a 	orr.w	r2, r2, #10
 8003606:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e005      	b.n	8003626 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f003 031c 	and.w	r3, r3, #28
 8003650:	2204      	movs	r2, #4
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d026      	beq.n	80036aa <HAL_DMA_IRQHandler+0x7a>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d021      	beq.n	80036aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f003 021c 	and.w	r2, r3, #28
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	2104      	movs	r1, #4
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b00      	cmp	r3, #0
 800369e:	d071      	beq.n	8003784 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	e06c      	b.n	8003784 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f003 031c 	and.w	r3, r3, #28
 80036b2:	2202      	movs	r2, #2
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02e      	beq.n	800371c <HAL_DMA_IRQHandler+0xec>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d029      	beq.n	800371c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 020a 	bic.w	r2, r2, #10
 80036e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f003 021c 	and.w	r2, r3, #28
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2102      	movs	r1, #2
 80036fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003700:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d038      	beq.n	8003784 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800371a:	e033      	b.n	8003784 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f003 031c 	and.w	r3, r3, #28
 8003724:	2208      	movs	r2, #8
 8003726:	409a      	lsls	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d02a      	beq.n	8003786 <HAL_DMA_IRQHandler+0x156>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d025      	beq.n	8003786 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 020e 	bic.w	r2, r2, #14
 8003748:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f003 021c 	and.w	r2, r3, #28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003784:	bf00      	nop
 8003786:	bf00      	nop
}
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	f003 021c 	and.w	r2, r3, #28
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d108      	bne.n	80037d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037d0:	e007      	b.n	80037e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	60da      	str	r2, [r3, #12]
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fe:	e17f      	b.n	8003b00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8171 	beq.w	8003afa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d00b      	beq.n	8003838 <HAL_GPIO_Init+0x48>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d007      	beq.n	8003838 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382c:	2b11      	cmp	r3, #17
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b12      	cmp	r3, #18
 8003836:	d130      	bne.n	800389a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2203      	movs	r2, #3
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800386e:	2201      	movs	r2, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0201 	and.w	r2, r3, #1
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d118      	bne.n	80038d8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038ac:	2201      	movs	r2, #1
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	08db      	lsrs	r3, r3, #3
 80038c2:	f003 0201 	and.w	r2, r3, #1
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x128>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b12      	cmp	r3, #18
 8003916:	d123      	bne.n	8003960 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	220f      	movs	r2, #15
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	08da      	lsrs	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3208      	adds	r2, #8
 800395a:	6939      	ldr	r1, [r7, #16]
 800395c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0203 	and.w	r2, r3, #3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80ac 	beq.w	8003afa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_GPIO_Init+0x330>)
 80039a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a6:	4a5e      	ldr	r2, [pc, #376]	; (8003b20 <HAL_GPIO_Init+0x330>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6613      	str	r3, [r2, #96]	; 0x60
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_GPIO_Init+0x330>)
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039ba:	4a5a      	ldr	r2, [pc, #360]	; (8003b24 <HAL_GPIO_Init+0x334>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	220f      	movs	r2, #15
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039e4:	d025      	beq.n	8003a32 <HAL_GPIO_Init+0x242>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4f      	ldr	r2, [pc, #316]	; (8003b28 <HAL_GPIO_Init+0x338>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <HAL_GPIO_Init+0x23e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_GPIO_Init+0x33c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_Init+0x23a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_GPIO_Init+0x340>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x236>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4c      	ldr	r2, [pc, #304]	; (8003b34 <HAL_GPIO_Init+0x344>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x232>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4b      	ldr	r2, [pc, #300]	; (8003b38 <HAL_GPIO_Init+0x348>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x22e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <HAL_GPIO_Init+0x34c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x22a>
 8003a16:	2306      	movs	r3, #6
 8003a18:	e00c      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e00a      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a1e:	2305      	movs	r3, #5
 8003a20:	e008      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a22:	2304      	movs	r3, #4
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e004      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e002      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_GPIO_Init+0x244>
 8003a32:	2300      	movs	r3, #0
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	f002 0203 	and.w	r2, r2, #3
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a44:	4937      	ldr	r1, [pc, #220]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a76:	4a32      	ldr	r2, [pc, #200]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a7c:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aa0:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3301      	adds	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f47f ae78 	bne.w	8003800 <HAL_GPIO_Init+0x10>
  }
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010000 	.word	0x40010000
 8003b28:	48000400 	.word	0x48000400
 8003b2c:	48000800 	.word	0x48000800
 8003b30:	48000c00 	.word	0x48000c00
 8003b34:	48001000 	.word	0x48001000
 8003b38:	48001400 	.word	0x48001400
 8003b3c:	48001800 	.word	0x48001800
 8003b40:	40010400 	.word	0x40010400

08003b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e001      	b.n	8003b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43d9      	mvns	r1, r3
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fd06 	bl	8001608 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40010400 	.word	0x40010400

08003c08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40007000 	.word	0x40007000

08003c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c32:	d130      	bne.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c34:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d038      	beq.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2232      	movs	r2, #50	; 0x32
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	0c9b      	lsrs	r3, r3, #18
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c68:	e002      	b.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d102      	bne.n	8003c84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f2      	bne.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	d110      	bne.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e00f      	b.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d007      	beq.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cac:	4a05      	ldr	r2, [pc, #20]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	431bde83 	.word	0x431bde83

08003cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e3d4      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce2:	4ba1      	ldr	r3, [pc, #644]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cec:	4b9e      	ldr	r3, [pc, #632]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80e4 	beq.w	8003ecc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_RCC_OscConfig+0x4a>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	f040 808b 	bne.w	8003e28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f040 8087 	bne.w	8003e28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d1a:	4b93      	ldr	r3, [pc, #588]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e3ac      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	4b8c      	ldr	r3, [pc, #560]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_RCC_OscConfig+0x7c>
 8003d42:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4a:	e005      	b.n	8003d58 <HAL_RCC_OscConfig+0x88>
 8003d4c:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d223      	bcs.n	8003da4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fd41 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e38d      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d70:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a7c      	ldr	r2, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d76:	f043 0308 	orr.w	r3, r3, #8
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b7a      	ldr	r3, [pc, #488]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4977      	ldr	r1, [pc, #476]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	4972      	ldr	r1, [pc, #456]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
 8003da2:	e025      	b.n	8003df0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003da4:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6f      	ldr	r2, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003daa:	f043 0308 	orr.w	r3, r3, #8
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	496a      	ldr	r1, [pc, #424]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc2:	4b69      	ldr	r3, [pc, #420]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	4965      	ldr	r1, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fd01 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e34d      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003df0:	f000 fc36 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	495a      	ldr	r1, [pc, #360]	; (8003f6c <HAL_RCC_OscConfig+0x29c>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_OscConfig+0x2a0>)
 8003e0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e10:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <HAL_RCC_OscConfig+0x2a4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd ffcb 	bl	8001db0 <HAL_InitTick>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d052      	beq.n	8003eca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	e331      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d032      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e30:	4b4d      	ldr	r3, [pc, #308]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a4c      	ldr	r2, [pc, #304]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe f808 	bl	8001e50 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e44:	f7fe f804 	bl	8001e50 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e31a      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a40      	ldr	r2, [pc, #256]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e68:	f043 0308 	orr.w	r3, r3, #8
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	493b      	ldr	r1, [pc, #236]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e80:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	4936      	ldr	r1, [pc, #216]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	e01a      	b.n	8003ecc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e96:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a33      	ldr	r2, [pc, #204]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ea2:	f7fd ffd5 	bl	8001e50 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eaa:	f7fd ffd1 	bl	8001e50 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e2e7      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x1da>
 8003ec8:	e000      	b.n	8003ecc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d074      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d005      	beq.n	8003eea <HAL_RCC_OscConfig+0x21a>
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d10e      	bne.n	8003f02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d10b      	bne.n	8003f02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d064      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x2f0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d160      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e2c4      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x24a>
 8003f0c:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	e01d      	b.n	8003f56 <HAL_RCC_OscConfig+0x286>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f22:	d10c      	bne.n	8003f3e <HAL_RCC_OscConfig+0x26e>
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0f      	ldr	r2, [pc, #60]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e00b      	b.n	8003f56 <HAL_RCC_OscConfig+0x286>
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <HAL_RCC_OscConfig+0x298>)
 8003f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd ff77 	bl	8001e50 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f64:	e011      	b.n	8003f8a <HAL_RCC_OscConfig+0x2ba>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08009060 	.word	0x08009060
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fd ff6a 	bl	8001e50 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e280      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8a:	4baf      	ldr	r3, [pc, #700]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2a8>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd ff5a 	bl	8001e50 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fd ff56 	bl	8001e50 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e26c      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb2:	4ba5      	ldr	r3, [pc, #660]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2d0>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d060      	beq.n	8004090 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x310>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d119      	bne.n	800400e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d116      	bne.n	800400e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe0:	4b99      	ldr	r3, [pc, #612]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x328>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e249      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b93      	ldr	r3, [pc, #588]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	4990      	ldr	r1, [pc, #576]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400c:	e040      	b.n	8004090 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d023      	beq.n	800405e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004016:	4b8c      	ldr	r3, [pc, #560]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8b      	ldr	r2, [pc, #556]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fd ff15 	bl	8001e50 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402a:	f7fd ff11 	bl	8001e50 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e227      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800403c:	4b82      	ldr	r3, [pc, #520]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b7f      	ldr	r3, [pc, #508]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	497c      	ldr	r1, [pc, #496]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
 800405c:	e018      	b.n	8004090 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405e:	4b7a      	ldr	r3, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a79      	ldr	r2, [pc, #484]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd fef1 	bl	8001e50 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7fd feed 	bl	8001e50 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e203      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004084:	4b70      	ldr	r3, [pc, #448]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d03c      	beq.n	8004116 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a4:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fd fecc 	bl	8001e50 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fd fec8 	bl	8001e50 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1de      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ce:	4b5e      	ldr	r3, [pc, #376]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ef      	beq.n	80040bc <HAL_RCC_OscConfig+0x3ec>
 80040dc:	e01b      	b.n	8004116 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040de:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80040e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fd feaf 	bl	8001e50 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fd feab 	bl	8001e50 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1c1      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004108:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1ef      	bne.n	80040f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80a6 	beq.w	8004270 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004128:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b44      	ldr	r3, [pc, #272]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	4a43      	ldr	r2, [pc, #268]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413e:	6593      	str	r3, [r2, #88]	; 0x58
 8004140:	4b41      	ldr	r3, [pc, #260]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RCC_OscConfig+0x57c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d118      	bne.n	800418e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415c:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_OscConfig+0x57c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a3a      	ldr	r2, [pc, #232]	; (800424c <HAL_RCC_OscConfig+0x57c>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004168:	f7fd fe72 	bl	8001e50 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd fe6e 	bl	8001e50 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e184      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004182:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_RCC_OscConfig+0x57c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4d8>
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a6:	e024      	b.n	80041f2 <HAL_RCC_OscConfig+0x522>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d110      	bne.n	80041d2 <HAL_RCC_OscConfig+0x502>
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	4a24      	ldr	r2, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c0:	4b21      	ldr	r3, [pc, #132]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	4a20      	ldr	r2, [pc, #128]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041d0:	e00f      	b.n	80041f2 <HAL_RCC_OscConfig+0x522>
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e2:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 80041ea:	f023 0304 	bic.w	r3, r3, #4
 80041ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fd fe29 	bl	8001e50 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fd fe25 	bl	8001e50 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e139      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_OscConfig+0x578>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ed      	beq.n	8004202 <HAL_RCC_OscConfig+0x532>
 8004226:	e01a      	b.n	800425e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd fe12 	bl	8001e50 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800422e:	e00f      	b.n	8004250 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fd fe0e 	bl	8001e50 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d906      	bls.n	8004250 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e122      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004250:	4b90      	ldr	r3, [pc, #576]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e8      	bne.n	8004230 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800425e:	7ffb      	ldrb	r3, [r7, #31]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b8b      	ldr	r3, [pc, #556]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	4a8a      	ldr	r2, [pc, #552]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8108 	beq.w	800448a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	2b02      	cmp	r3, #2
 8004280:	f040 80d0 	bne.w	8004424 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004284:	4b83      	ldr	r3, [pc, #524]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0203 	and.w	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d130      	bne.n	80042fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	3b01      	subs	r3, #1
 80042a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d127      	bne.n	80042fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d11f      	bne.n	80042fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c4:	2a07      	cmp	r2, #7
 80042c6:	bf14      	ite	ne
 80042c8:	2201      	movne	r2, #1
 80042ca:	2200      	moveq	r2, #0
 80042cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d113      	bne.n	80042fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	3b01      	subs	r3, #1
 80042e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	3b01      	subs	r3, #1
 80042f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d06e      	beq.n	80043d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	d069      	beq.n	80043d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004300:	4b64      	ldr	r3, [pc, #400]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800430c:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0b7      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800431c:	4b5d      	ldr	r3, [pc, #372]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a5c      	ldr	r2, [pc, #368]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004328:	f7fd fd92 	bl	8001e50 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd fd8e 	bl	8001e50 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0a4      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004342:	4b54      	ldr	r3, [pc, #336]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434e:	4b51      	ldr	r3, [pc, #324]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	4b51      	ldr	r3, [pc, #324]	; (8004498 <HAL_RCC_OscConfig+0x7c8>)
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800435e:	3a01      	subs	r2, #1
 8004360:	0112      	lsls	r2, r2, #4
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004368:	0212      	lsls	r2, r2, #8
 800436a:	4311      	orrs	r1, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004370:	0852      	lsrs	r2, r2, #1
 8004372:	3a01      	subs	r2, #1
 8004374:	0552      	lsls	r2, r2, #21
 8004376:	4311      	orrs	r1, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800437c:	0852      	lsrs	r2, r2, #1
 800437e:	3a01      	subs	r2, #1
 8004380:	0652      	lsls	r2, r2, #25
 8004382:	4311      	orrs	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004388:	0912      	lsrs	r2, r2, #4
 800438a:	0452      	lsls	r2, r2, #17
 800438c:	430a      	orrs	r2, r1
 800438e:	4941      	ldr	r1, [pc, #260]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3e      	ldr	r2, [pc, #248]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 800439a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043a0:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ac:	f7fd fd50 	bl	8001e50 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fd fd4c 	bl	8001e50 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e062      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d2:	e05a      	b.n	800448a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e059      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d8:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d152      	bne.n	800448a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043fc:	f7fd fd28 	bl	8001e50 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fd24 	bl	8001e50 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e03a      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004416:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x734>
 8004422:	e032      	b.n	800448a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b0c      	cmp	r3, #12
 8004428:	d02d      	beq.n	8004486 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004434:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004436:	4b17      	ldr	r3, [pc, #92]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4a13      	ldr	r2, [pc, #76]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004448:	f023 0303 	bic.w	r3, r3, #3
 800444c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800444e:	4b11      	ldr	r3, [pc, #68]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a10      	ldr	r2, [pc, #64]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 8004454:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fd fcf7 	bl	8001e50 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd fcf3 	bl	8001e50 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e009      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCC_OscConfig+0x7c4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x796>
 8004484:	e001      	b.n	800448a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	f99d808c 	.word	0xf99d808c

0800449c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0c8      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b66      	ldr	r3, [pc, #408]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d910      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0207 	bic.w	r2, r3, #7
 80044c6:	4961      	ldr	r1, [pc, #388]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b5f      	ldr	r3, [pc, #380]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0b0      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d04c      	beq.n	8004586 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f4:	4b56      	ldr	r3, [pc, #344]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d121      	bne.n	8004544 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e09e      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d107      	bne.n	800451c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d115      	bne.n	8004544 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e092      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004524:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e086      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004534:	4b46      	ldr	r3, [pc, #280]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e07e      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004544:	4b42      	ldr	r3, [pc, #264]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 0203 	bic.w	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	493f      	ldr	r1, [pc, #252]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fd fc7b 	bl	8001e50 <HAL_GetTick>
 800455a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455c:	e00a      	b.n	8004574 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455e:	f7fd fc77 	bl	8001e50 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e066      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 020c 	and.w	r2, r3, #12
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	429a      	cmp	r2, r3
 8004584:	d1eb      	bne.n	800455e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004592:	4b2f      	ldr	r3, [pc, #188]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	492c      	ldr	r1, [pc, #176]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d210      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 0207 	bic.w	r2, r3, #7
 80045ba:	4924      	ldr	r1, [pc, #144]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e036      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4918      	ldr	r1, [pc, #96]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4910      	ldr	r1, [pc, #64]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004612:	f000 f825 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8004616:	4602      	mov	r2, r0
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_RCC_ClockConfig+0x1b4>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	490c      	ldr	r1, [pc, #48]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	5ccb      	ldrb	r3, [r1, r3]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	fa22 f303 	lsr.w	r3, r2, r3
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fbba 	bl	8001db0 <HAL_InitTick>
 800463c:	4603      	mov	r3, r0
 800463e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004640:	7afb      	ldrb	r3, [r7, #11]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40022000 	.word	0x40022000
 8004650:	40021000 	.word	0x40021000
 8004654:	08009060 	.word	0x08009060
 8004658:	20000000 	.word	0x20000000
 800465c:	20000004 	.word	0x20000004

08004660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466e:	4b3e      	ldr	r3, [pc, #248]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004678:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x34>
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b0c      	cmp	r3, #12
 800468c:	d121      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d11e      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046a0:	4b31      	ldr	r3, [pc, #196]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e005      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046b0:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046bc:	4a2b      	ldr	r2, [pc, #172]	; (800476c <HAL_RCC_GetSysClockFreq+0x10c>)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d102      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_RCC_GetSysClockFreq+0x110>)
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e004      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_RCC_GetSysClockFreq+0x114>)
 80046e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d134      	bne.n	8004758 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0xa6>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0xac>
 8004704:	e005      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004706:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_GetSysClockFreq+0x110>)
 8004708:	617b      	str	r3, [r7, #20]
      break;
 800470a:	e005      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_GetSysClockFreq+0x114>)
 800470e:	617b      	str	r3, [r7, #20]
      break;
 8004710:	e002      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	617b      	str	r3, [r7, #20]
      break;
 8004716:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	3301      	adds	r3, #1
 8004724:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	fb02 f203 	mul.w	r2, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	0e5b      	lsrs	r3, r3, #25
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	3301      	adds	r3, #1
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004758:	69bb      	ldr	r3, [r7, #24]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	08009078 	.word	0x08009078
 8004770:	00f42400 	.word	0x00f42400
 8004774:	007a1200 	.word	0x007a1200

08004778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCC_GetHCLKFreq+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000000 	.word	0x20000000

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004794:	f7ff fff0 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	08009070 	.word	0x08009070

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047c0:	f7ff ffda 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0adb      	lsrs	r3, r3, #11
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4904      	ldr	r1, [pc, #16]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	08009070 	.word	0x08009070

080047e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004800:	f7ff fa02 	bl	8003c08 <HAL_PWREx_GetVoltageRange>
 8004804:	6178      	str	r0, [r7, #20]
 8004806:	e014      	b.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004812:	6593      	str	r3, [r2, #88]	; 0x58
 8004814:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004820:	f7ff f9f2 	bl	8003c08 <HAL_PWREx_GetVoltageRange>
 8004824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004838:	d10b      	bne.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d919      	bls.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2ba0      	cmp	r3, #160	; 0xa0
 8004844:	d902      	bls.n	800484c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004846:	2302      	movs	r3, #2
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e013      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800484c:	2301      	movs	r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e010      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d902      	bls.n	800485e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004858:	2303      	movs	r3, #3
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	e00a      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d102      	bne.n	800486a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004864:	2302      	movs	r3, #2
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e004      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d101      	bne.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 0207 	bic.w	r2, r3, #7
 800487c:	4909      	ldr	r1, [pc, #36]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40022000 	.word	0x40022000

080048a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b0:	2300      	movs	r3, #0
 80048b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b4:	2300      	movs	r3, #0
 80048b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d041      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048cc:	d02a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048d2:	d824      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048de:	d81e      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e8:	d010      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ea:	e018      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048ec:	4b86      	ldr	r3, [pc, #536]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a85      	ldr	r2, [pc, #532]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048f8:	e015      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fabb 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800490a:	e00c      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3320      	adds	r3, #32
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fba6 	bl	8005064 <RCCEx_PLLSAI2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	74fb      	strb	r3, [r7, #19]
      break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800492c:	4b76      	ldr	r3, [pc, #472]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493a:	4973      	ldr	r1, [pc, #460]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004942:	e001      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d041      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800495e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004962:	d824      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800496a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800496e:	d81e      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d010      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800497a:	e018      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800497c:	4b62      	ldr	r3, [pc, #392]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a61      	ldr	r2, [pc, #388]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fa73 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb5e 	bl	8005064 <RCCEx_PLLSAI2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	74fb      	strb	r3, [r7, #19]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049bc:	4b52      	ldr	r3, [pc, #328]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ca:	494f      	ldr	r1, [pc, #316]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a0 	beq.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ea:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a00:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a0c:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a28:	f7fd fa12 	bl	8001e50 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a2e:	e009      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fd fa0e 	bl	8001e50 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d902      	bls.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	74fb      	strb	r3, [r7, #19]
        break;
 8004a42:	e005      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ef      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d15c      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a56:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01f      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d019      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a80:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd f9cd 	bl	8001e50 <HAL_GetTick>
 8004ab6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd f9c9 	bl	8001e50 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ec      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	4904      	ldr	r1, [pc, #16]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004afe:	e009      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
 8004b04:	e006      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b14:	7c7b      	ldrb	r3, [r7, #17]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b9e      	ldr	r3, [pc, #632]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a9d      	ldr	r2, [pc, #628]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b32:	4b98      	ldr	r3, [pc, #608]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f023 0203 	bic.w	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	4994      	ldr	r1, [pc, #592]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b54:	4b8f      	ldr	r3, [pc, #572]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 020c 	bic.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	498c      	ldr	r1, [pc, #560]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b76:	4b87      	ldr	r3, [pc, #540]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	4983      	ldr	r1, [pc, #524]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b98:	4b7e      	ldr	r3, [pc, #504]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	497b      	ldr	r1, [pc, #492]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bba:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	4972      	ldr	r1, [pc, #456]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bdc:	4b6d      	ldr	r3, [pc, #436]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	496a      	ldr	r1, [pc, #424]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	4961      	ldr	r1, [pc, #388]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c20:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	4959      	ldr	r1, [pc, #356]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c42:	4b54      	ldr	r3, [pc, #336]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	4950      	ldr	r1, [pc, #320]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c64:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	4948      	ldr	r1, [pc, #288]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	493f      	ldr	r1, [pc, #252]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d028      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb6:	4937      	ldr	r1, [pc, #220]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc8:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd2:	60d3      	str	r3, [r2, #12]
 8004cd4:	e011      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f8c8 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d028      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	491f      	ldr	r1, [pc, #124]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d24:	d106      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d26:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d30:	60d3      	str	r3, [r2, #12]
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f899 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	4908      	ldr	r1, [pc, #32]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d82:	d109      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a02      	ldr	r2, [pc, #8]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
 8004d90:	e014      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f867 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02f      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd6:	4928      	ldr	r1, [pc, #160]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de6:	d10d      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f844 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d014      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
 8004e02:	e011      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3320      	adds	r3, #32
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f925 	bl	8005064 <RCCEx_PLLSAI2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e24:	7cfb      	ldrb	r3, [r7, #19]
 8004e26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e42:	490d      	ldr	r1, [pc, #52]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e66:	4904      	ldr	r1, [pc, #16]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000

08004e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8a:	4b75      	ldr	r3, [pc, #468]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e96:	4b72      	ldr	r3, [pc, #456]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0203 	and.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10d      	bne.n	8004ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d047      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	e044      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d018      	beq.n	8004f02 <RCCEx_PLLSAI1_Config+0x86>
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d825      	bhi.n	8004f20 <RCCEx_PLLSAI1_Config+0xa4>
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d002      	beq.n	8004ede <RCCEx_PLLSAI1_Config+0x62>
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d009      	beq.n	8004ef0 <RCCEx_PLLSAI1_Config+0x74>
 8004edc:	e020      	b.n	8004f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ede:	4b60      	ldr	r3, [pc, #384]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11d      	bne.n	8004f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eee:	e01a      	b.n	8004f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e013      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f02:	4b57      	ldr	r3, [pc, #348]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f0e:	4b54      	ldr	r3, [pc, #336]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f1e:	e006      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e004      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f26:	bf00      	nop
 8004f28:	e002      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6819      	ldr	r1, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	4944      	ldr	r1, [pc, #272]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d17d      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f58:	4b41      	ldr	r3, [pc, #260]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a40      	ldr	r2, [pc, #256]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f64:	f7fc ff74 	bl	8001e50 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6a:	e009      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6c:	f7fc ff70 	bl	8001e50 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d902      	bls.n	8004f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f7e:	e005      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f80:	4b37      	ldr	r3, [pc, #220]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ef      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d160      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	0211      	lsls	r1, r2, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	0912      	lsrs	r2, r2, #4
 8004fb0:	0452      	lsls	r2, r2, #17
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	492a      	ldr	r1, [pc, #168]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
 8004fba:	e027      	b.n	800500c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d112      	bne.n	8004fe8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	0211      	lsls	r1, r2, #8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6912      	ldr	r2, [r2, #16]
 8004fd8:	0852      	lsrs	r2, r2, #1
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0552      	lsls	r2, r2, #21
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	491f      	ldr	r1, [pc, #124]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
 8004fe6:	e011      	b.n	800500c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
 8004ff8:	0211      	lsls	r1, r2, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6952      	ldr	r2, [r2, #20]
 8004ffe:	0852      	lsrs	r2, r2, #1
 8005000:	3a01      	subs	r2, #1
 8005002:	0652      	lsls	r2, r2, #25
 8005004:	430a      	orrs	r2, r1
 8005006:	4916      	ldr	r1, [pc, #88]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fc ff1a 	bl	8001e50 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005020:	f7fc ff16 	bl	8001e50 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
          break;
 8005032:	e005      	b.n	8005040 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	4904      	ldr	r1, [pc, #16]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000

08005064 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005072:	4b6a      	ldr	r3, [pc, #424]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800507e:	4b67      	ldr	r3, [pc, #412]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0203 	and.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d10d      	bne.n	80050aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
       ||
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005096:	4b61      	ldr	r3, [pc, #388]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
       ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d047      	beq.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
 80050ae:	e044      	b.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d018      	beq.n	80050ea <RCCEx_PLLSAI2_Config+0x86>
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d825      	bhi.n	8005108 <RCCEx_PLLSAI2_Config+0xa4>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d002      	beq.n	80050c6 <RCCEx_PLLSAI2_Config+0x62>
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d009      	beq.n	80050d8 <RCCEx_PLLSAI2_Config+0x74>
 80050c4:	e020      	b.n	8005108 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050c6:	4b55      	ldr	r3, [pc, #340]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11d      	bne.n	800510e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d6:	e01a      	b.n	800510e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050d8:	4b50      	ldr	r3, [pc, #320]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d116      	bne.n	8005112 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e8:	e013      	b.n	8005112 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005106:	e006      	b.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e004      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005116:	bf00      	nop
    }

    if(status == HAL_OK)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800511e:	4b3f      	ldr	r3, [pc, #252]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	3b01      	subs	r3, #1
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	430b      	orrs	r3, r1
 8005134:	4939      	ldr	r1, [pc, #228]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d167      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005140:	4b36      	ldr	r3, [pc, #216]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a35      	ldr	r2, [pc, #212]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fc fe80 	bl	8001e50 <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005154:	f7fc fe7c 	bl	8001e50 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
        break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005168:	4b2c      	ldr	r3, [pc, #176]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ef      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d14a      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d111      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	0211      	lsls	r1, r2, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68d2      	ldr	r2, [r2, #12]
 8005196:	0912      	lsrs	r2, r2, #4
 8005198:	0452      	lsls	r2, r2, #17
 800519a:	430a      	orrs	r2, r1
 800519c:	491f      	ldr	r1, [pc, #124]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	614b      	str	r3, [r1, #20]
 80051a2:	e011      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	0211      	lsls	r1, r2, #8
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6912      	ldr	r2, [r2, #16]
 80051ba:	0852      	lsrs	r2, r2, #1
 80051bc:	3a01      	subs	r2, #1
 80051be:	0652      	lsls	r2, r2, #25
 80051c0:	430a      	orrs	r2, r1
 80051c2:	4916      	ldr	r1, [pc, #88]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc fe3c 	bl	8001e50 <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051da:	e009      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051dc:	f7fc fe38 	bl	8001e50 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	73fb      	strb	r3, [r7, #15]
          break;
 80051ee:	e005      	b.n	80051fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e049      	b.n	80052c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fbec 	bl	8001a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 f9ee 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e04f      	b.n	8005388 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a23      	ldr	r2, [pc, #140]	; (8005394 <HAL_TIM_Base_Start_IT+0xc4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01d      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0x76>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d018      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0x76>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <HAL_TIM_Base_Start_IT+0xc8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0x76>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1e      	ldr	r2, [pc, #120]	; (800539c <HAL_TIM_Base_Start_IT+0xcc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0x76>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0x76>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIM_Base_Start_IT+0x76>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d115      	bne.n	8005372 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	4b17      	ldr	r3, [pc, #92]	; (80053ac <HAL_TIM_Base_Start_IT+0xdc>)
 800534e:	4013      	ands	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b06      	cmp	r3, #6
 8005356:	d015      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0xb4>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535e:	d011      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005370:	e008      	b.n	8005384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e000      	b.n	8005386 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40013400 	.word	0x40013400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	00010007 	.word	0x00010007

080053b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0202 	mvn.w	r2, #2
 80053dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f905 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f8f7 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f908 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b04      	cmp	r3, #4
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0204 	mvn.w	r2, #4
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8db 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8cd 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8de 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b08      	cmp	r3, #8
 800546c:	d122      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b08      	cmp	r3, #8
 800547a:	d11b      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0208 	mvn.w	r2, #8
 8005484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2204      	movs	r2, #4
 800548a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8b1 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f8a3 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8b4 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d122      	bne.n	8005508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d11b      	bne.n	8005508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0210 	mvn.w	r2, #16
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2208      	movs	r2, #8
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f887 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f879 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f88a 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10e      	bne.n	8005534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0201 	mvn.w	r2, #1
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc f8b8 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d10e      	bne.n	8005560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554c:	2b80      	cmp	r3, #128	; 0x80
 800554e:	d107      	bne.n	8005560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f99c 	bl	8005898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556e:	d10e      	bne.n	800558e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557a:	2b80      	cmp	r3, #128	; 0x80
 800557c:	d107      	bne.n	800558e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f98f 	bl	80058ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d10e      	bne.n	80055ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d107      	bne.n	80055ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f838 	bl	800562a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d10e      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d107      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0220 	mvn.w	r2, #32
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f94f 	bl	8005884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a40      	ldr	r2, [pc, #256]	; (8005754 <TIM_Base_SetConfig+0x114>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3d      	ldr	r2, [pc, #244]	; (8005758 <TIM_Base_SetConfig+0x118>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3c      	ldr	r2, [pc, #240]	; (800575c <TIM_Base_SetConfig+0x11c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3b      	ldr	r2, [pc, #236]	; (8005760 <TIM_Base_SetConfig+0x120>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3a      	ldr	r2, [pc, #232]	; (8005764 <TIM_Base_SetConfig+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <TIM_Base_SetConfig+0x114>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01f      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d01b      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2c      	ldr	r2, [pc, #176]	; (8005758 <TIM_Base_SetConfig+0x118>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d017      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2b      	ldr	r2, [pc, #172]	; (800575c <TIM_Base_SetConfig+0x11c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <TIM_Base_SetConfig+0x120>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a29      	ldr	r2, [pc, #164]	; (8005764 <TIM_Base_SetConfig+0x124>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a28      	ldr	r2, [pc, #160]	; (8005768 <TIM_Base_SetConfig+0x128>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a27      	ldr	r2, [pc, #156]	; (800576c <TIM_Base_SetConfig+0x12c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a26      	ldr	r2, [pc, #152]	; (8005770 <TIM_Base_SetConfig+0x130>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d108      	bne.n	80056ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a10      	ldr	r2, [pc, #64]	; (8005754 <TIM_Base_SetConfig+0x114>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00f      	beq.n	8005738 <TIM_Base_SetConfig+0xf8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a12      	ldr	r2, [pc, #72]	; (8005764 <TIM_Base_SetConfig+0x124>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0xf8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <TIM_Base_SetConfig+0x128>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0xf8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a10      	ldr	r2, [pc, #64]	; (800576c <TIM_Base_SetConfig+0x12c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0xf8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0f      	ldr	r2, [pc, #60]	; (8005770 <TIM_Base_SetConfig+0x130>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d103      	bne.n	8005740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	615a      	str	r2, [r3, #20]
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005788:	2302      	movs	r3, #2
 800578a:	e068      	b.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2e      	ldr	r2, [pc, #184]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2d      	ldr	r2, [pc, #180]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1e      	ldr	r2, [pc, #120]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01d      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fe:	d018      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1a      	ldr	r2, [pc, #104]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a18      	ldr	r2, [pc, #96]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a13      	ldr	r2, [pc, #76]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a14      	ldr	r2, [pc, #80]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d10c      	bne.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4313      	orrs	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40013400 	.word	0x40013400
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40014000 	.word	0x40014000

08005884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e040      	b.n	8005954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fc f954 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2224      	movs	r2, #36	; 0x24
 80058ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8c0 	bl	8005a84 <UART_SetConfig>
 8005904:	4603      	mov	r3, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e022      	b.n	8005954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb3e 	bl	8005f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800592a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800593a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fbc5 	bl	80060dc <UART_CheckIdleState>
 8005952:	4603      	mov	r3, r0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005970:	2b20      	cmp	r3, #32
 8005972:	f040 8082 	bne.w	8005a7a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_UART_Transmit+0x26>
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07a      	b.n	8005a7c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_UART_Transmit+0x38>
 8005990:	2302      	movs	r3, #2
 8005992:	e073      	b.n	8005a7c <HAL_UART_Transmit+0x120>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2221      	movs	r2, #33	; 0x21
 80059a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059aa:	f7fc fa51 	bl	8001e50 <HAL_GetTick>
 80059ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	88fa      	ldrh	r2, [r7, #6]
 80059b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d108      	bne.n	80059dc <HAL_UART_Transmit+0x80>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e003      	b.n	80059e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059ec:	e02d      	b.n	8005a4a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fbb8 	bl	800616e <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e039      	b.n	8005a7c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	881a      	ldrh	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a1a:	b292      	uxth	r2, r2
 8005a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	3302      	adds	r3, #2
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e008      	b.n	8005a38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	781a      	ldrb	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1cb      	bne.n	80059ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fb84 	bl	800616e <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e005      	b.n	8005a7c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	b5b0      	push	{r4, r5, r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4bad      	ldr	r3, [pc, #692]	; (8005d64 <UART_SetConfig+0x2e0>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	69f9      	ldr	r1, [r7, #28]
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4aa2      	ldr	r2, [pc, #648]	; (8005d68 <UART_SetConfig+0x2e4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a99      	ldr	r2, [pc, #612]	; (8005d6c <UART_SetConfig+0x2e8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d121      	bne.n	8005b4e <UART_SetConfig+0xca>
 8005b0a:	4b99      	ldr	r3, [pc, #612]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d817      	bhi.n	8005b48 <UART_SetConfig+0xc4>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x9c>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b3d 	.word	0x08005b3d
 8005b28:	08005b37 	.word	0x08005b37
 8005b2c:	08005b43 	.word	0x08005b43
 8005b30:	2301      	movs	r3, #1
 8005b32:	76fb      	strb	r3, [r7, #27]
 8005b34:	e0e7      	b.n	8005d06 <UART_SetConfig+0x282>
 8005b36:	2302      	movs	r3, #2
 8005b38:	76fb      	strb	r3, [r7, #27]
 8005b3a:	e0e4      	b.n	8005d06 <UART_SetConfig+0x282>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	76fb      	strb	r3, [r7, #27]
 8005b40:	e0e1      	b.n	8005d06 <UART_SetConfig+0x282>
 8005b42:	2308      	movs	r3, #8
 8005b44:	76fb      	strb	r3, [r7, #27]
 8005b46:	e0de      	b.n	8005d06 <UART_SetConfig+0x282>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e0db      	b.n	8005d06 <UART_SetConfig+0x282>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a88      	ldr	r2, [pc, #544]	; (8005d74 <UART_SetConfig+0x2f0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d132      	bne.n	8005bbe <UART_SetConfig+0x13a>
 8005b58:	4b85      	ldr	r3, [pc, #532]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d828      	bhi.n	8005bb8 <UART_SetConfig+0x134>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0xe8>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005bb9 	.word	0x08005bb9
 8005b74:	08005bb9 	.word	0x08005bb9
 8005b78:	08005bb9 	.word	0x08005bb9
 8005b7c:	08005bad 	.word	0x08005bad
 8005b80:	08005bb9 	.word	0x08005bb9
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005ba7 	.word	0x08005ba7
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005bb3 	.word	0x08005bb3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	76fb      	strb	r3, [r7, #27]
 8005ba4:	e0af      	b.n	8005d06 <UART_SetConfig+0x282>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	76fb      	strb	r3, [r7, #27]
 8005baa:	e0ac      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bac:	2304      	movs	r3, #4
 8005bae:	76fb      	strb	r3, [r7, #27]
 8005bb0:	e0a9      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	76fb      	strb	r3, [r7, #27]
 8005bb6:	e0a6      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	76fb      	strb	r3, [r7, #27]
 8005bbc:	e0a3      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a6d      	ldr	r2, [pc, #436]	; (8005d78 <UART_SetConfig+0x2f4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d120      	bne.n	8005c0a <UART_SetConfig+0x186>
 8005bc8:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bd2:	2b30      	cmp	r3, #48	; 0x30
 8005bd4:	d013      	beq.n	8005bfe <UART_SetConfig+0x17a>
 8005bd6:	2b30      	cmp	r3, #48	; 0x30
 8005bd8:	d814      	bhi.n	8005c04 <UART_SetConfig+0x180>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d009      	beq.n	8005bf2 <UART_SetConfig+0x16e>
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d810      	bhi.n	8005c04 <UART_SetConfig+0x180>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <UART_SetConfig+0x168>
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d006      	beq.n	8005bf8 <UART_SetConfig+0x174>
 8005bea:	e00b      	b.n	8005c04 <UART_SetConfig+0x180>
 8005bec:	2300      	movs	r3, #0
 8005bee:	76fb      	strb	r3, [r7, #27]
 8005bf0:	e089      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	76fb      	strb	r3, [r7, #27]
 8005bf6:	e086      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	76fb      	strb	r3, [r7, #27]
 8005bfc:	e083      	b.n	8005d06 <UART_SetConfig+0x282>
 8005bfe:	2308      	movs	r3, #8
 8005c00:	76fb      	strb	r3, [r7, #27]
 8005c02:	e080      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c04:	2310      	movs	r3, #16
 8005c06:	76fb      	strb	r3, [r7, #27]
 8005c08:	e07d      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a5b      	ldr	r2, [pc, #364]	; (8005d7c <UART_SetConfig+0x2f8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d120      	bne.n	8005c56 <UART_SetConfig+0x1d2>
 8005c14:	4b56      	ldr	r3, [pc, #344]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c20:	d013      	beq.n	8005c4a <UART_SetConfig+0x1c6>
 8005c22:	2bc0      	cmp	r3, #192	; 0xc0
 8005c24:	d814      	bhi.n	8005c50 <UART_SetConfig+0x1cc>
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d009      	beq.n	8005c3e <UART_SetConfig+0x1ba>
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d810      	bhi.n	8005c50 <UART_SetConfig+0x1cc>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <UART_SetConfig+0x1b4>
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d006      	beq.n	8005c44 <UART_SetConfig+0x1c0>
 8005c36:	e00b      	b.n	8005c50 <UART_SetConfig+0x1cc>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	76fb      	strb	r3, [r7, #27]
 8005c3c:	e063      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	76fb      	strb	r3, [r7, #27]
 8005c42:	e060      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c44:	2304      	movs	r3, #4
 8005c46:	76fb      	strb	r3, [r7, #27]
 8005c48:	e05d      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	76fb      	strb	r3, [r7, #27]
 8005c4e:	e05a      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c50:	2310      	movs	r3, #16
 8005c52:	76fb      	strb	r3, [r7, #27]
 8005c54:	e057      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a49      	ldr	r2, [pc, #292]	; (8005d80 <UART_SetConfig+0x2fc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d125      	bne.n	8005cac <UART_SetConfig+0x228>
 8005c60:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6e:	d017      	beq.n	8005ca0 <UART_SetConfig+0x21c>
 8005c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c74:	d817      	bhi.n	8005ca6 <UART_SetConfig+0x222>
 8005c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7a:	d00b      	beq.n	8005c94 <UART_SetConfig+0x210>
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c80:	d811      	bhi.n	8005ca6 <UART_SetConfig+0x222>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <UART_SetConfig+0x20a>
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8a:	d006      	beq.n	8005c9a <UART_SetConfig+0x216>
 8005c8c:	e00b      	b.n	8005ca6 <UART_SetConfig+0x222>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	76fb      	strb	r3, [r7, #27]
 8005c92:	e038      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c94:	2302      	movs	r3, #2
 8005c96:	76fb      	strb	r3, [r7, #27]
 8005c98:	e035      	b.n	8005d06 <UART_SetConfig+0x282>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	76fb      	strb	r3, [r7, #27]
 8005c9e:	e032      	b.n	8005d06 <UART_SetConfig+0x282>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	76fb      	strb	r3, [r7, #27]
 8005ca4:	e02f      	b.n	8005d06 <UART_SetConfig+0x282>
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	76fb      	strb	r3, [r7, #27]
 8005caa:	e02c      	b.n	8005d06 <UART_SetConfig+0x282>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2d      	ldr	r2, [pc, #180]	; (8005d68 <UART_SetConfig+0x2e4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d125      	bne.n	8005d02 <UART_SetConfig+0x27e>
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc4:	d017      	beq.n	8005cf6 <UART_SetConfig+0x272>
 8005cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cca:	d817      	bhi.n	8005cfc <UART_SetConfig+0x278>
 8005ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd0:	d00b      	beq.n	8005cea <UART_SetConfig+0x266>
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd6:	d811      	bhi.n	8005cfc <UART_SetConfig+0x278>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <UART_SetConfig+0x260>
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce0:	d006      	beq.n	8005cf0 <UART_SetConfig+0x26c>
 8005ce2:	e00b      	b.n	8005cfc <UART_SetConfig+0x278>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	76fb      	strb	r3, [r7, #27]
 8005ce8:	e00d      	b.n	8005d06 <UART_SetConfig+0x282>
 8005cea:	2302      	movs	r3, #2
 8005cec:	76fb      	strb	r3, [r7, #27]
 8005cee:	e00a      	b.n	8005d06 <UART_SetConfig+0x282>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	76fb      	strb	r3, [r7, #27]
 8005cf4:	e007      	b.n	8005d06 <UART_SetConfig+0x282>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	76fb      	strb	r3, [r7, #27]
 8005cfa:	e004      	b.n	8005d06 <UART_SetConfig+0x282>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	e001      	b.n	8005d06 <UART_SetConfig+0x282>
 8005d02:	2310      	movs	r3, #16
 8005d04:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <UART_SetConfig+0x2e4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	f040 8087 	bne.w	8005e20 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d12:	7efb      	ldrb	r3, [r7, #27]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d837      	bhi.n	8005d88 <UART_SetConfig+0x304>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x29c>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d4d 	.word	0x08005d4d
 8005d2c:	08005d89 	.word	0x08005d89
 8005d30:	08005d53 	.word	0x08005d53
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d89 	.word	0x08005d89
 8005d40:	08005d5b 	.word	0x08005d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fe fd24 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8005d48:	6178      	str	r0, [r7, #20]
        break;
 8005d4a:	e022      	b.n	8005d92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <UART_SetConfig+0x300>)
 8005d4e:	617b      	str	r3, [r7, #20]
        break;
 8005d50:	e01f      	b.n	8005d92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d52:	f7fe fc85 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8005d56:	6178      	str	r0, [r7, #20]
        break;
 8005d58:	e01b      	b.n	8005d92 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5e:	617b      	str	r3, [r7, #20]
        break;
 8005d60:	e017      	b.n	8005d92 <UART_SetConfig+0x30e>
 8005d62:	bf00      	nop
 8005d64:	efff69f3 	.word	0xefff69f3
 8005d68:	40008000 	.word	0x40008000
 8005d6c:	40013800 	.word	0x40013800
 8005d70:	40021000 	.word	0x40021000
 8005d74:	40004400 	.word	0x40004400
 8005d78:	40004800 	.word	0x40004800
 8005d7c:	40004c00 	.word	0x40004c00
 8005d80:	40005000 	.word	0x40005000
 8005d84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	76bb      	strb	r3, [r7, #26]
        break;
 8005d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80f1 	beq.w	8005f7c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d305      	bcc.n	8005db6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d902      	bls.n	8005dbc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	76bb      	strb	r3, [r7, #26]
 8005dba:	e0df      	b.n	8005f7c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	020b      	lsls	r3, r1, #8
 8005dce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dd2:	0202      	lsls	r2, r0, #8
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	6849      	ldr	r1, [r1, #4]
 8005dd8:	0849      	lsrs	r1, r1, #1
 8005dda:	4608      	mov	r0, r1
 8005ddc:	f04f 0100 	mov.w	r1, #0
 8005de0:	1814      	adds	r4, r2, r0
 8005de2:	eb43 0501 	adc.w	r5, r3, r1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	4620      	mov	r0, r4
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7fa fed8 	bl	8000ba8 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e06:	d308      	bcc.n	8005e1a <UART_SetConfig+0x396>
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e0e:	d204      	bcs.n	8005e1a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e0b0      	b.n	8005f7c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	76bb      	strb	r3, [r7, #26]
 8005e1e:	e0ad      	b.n	8005f7c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	d15c      	bne.n	8005ee4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005e2a:	7efb      	ldrb	r3, [r7, #27]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d828      	bhi.n	8005e82 <UART_SetConfig+0x3fe>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x3b4>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	08005e83 	.word	0x08005e83
 8005e48:	08005e73 	.word	0x08005e73
 8005e4c:	08005e83 	.word	0x08005e83
 8005e50:	08005e83 	.word	0x08005e83
 8005e54:	08005e83 	.word	0x08005e83
 8005e58:	08005e7b 	.word	0x08005e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fe fc98 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8005e60:	6178      	str	r0, [r7, #20]
        break;
 8005e62:	e013      	b.n	8005e8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e64:	f7fe fcaa 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8005e68:	6178      	str	r0, [r7, #20]
        break;
 8005e6a:	e00f      	b.n	8005e8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e6c:	4b49      	ldr	r3, [pc, #292]	; (8005f94 <UART_SetConfig+0x510>)
 8005e6e:	617b      	str	r3, [r7, #20]
        break;
 8005e70:	e00c      	b.n	8005e8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e72:	f7fe fbf5 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8005e76:	6178      	str	r0, [r7, #20]
        break;
 8005e78:	e008      	b.n	8005e8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	617b      	str	r3, [r7, #20]
        break;
 8005e80:	e004      	b.n	8005e8c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	76bb      	strb	r3, [r7, #26]
        break;
 8005e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d074      	beq.n	8005f7c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	005a      	lsls	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	441a      	add	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b0f      	cmp	r3, #15
 8005eae:	d916      	bls.n	8005ede <UART_SetConfig+0x45a>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb6:	d212      	bcs.n	8005ede <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f023 030f 	bic.w	r3, r3, #15
 8005ec0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	89fb      	ldrh	r3, [r7, #14]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	89fa      	ldrh	r2, [r7, #14]
 8005eda:	60da      	str	r2, [r3, #12]
 8005edc:	e04e      	b.n	8005f7c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	76bb      	strb	r3, [r7, #26]
 8005ee2:	e04b      	b.n	8005f7c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee4:	7efb      	ldrb	r3, [r7, #27]
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d827      	bhi.n	8005f3a <UART_SetConfig+0x4b6>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x46c>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f3b 	.word	0x08005f3b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
 8005f10:	08005f33 	.word	0x08005f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fe fc3c 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8005f18:	6178      	str	r0, [r7, #20]
        break;
 8005f1a:	e013      	b.n	8005f44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fe fc4e 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8005f20:	6178      	str	r0, [r7, #20]
        break;
 8005f22:	e00f      	b.n	8005f44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <UART_SetConfig+0x510>)
 8005f26:	617b      	str	r3, [r7, #20]
        break;
 8005f28:	e00c      	b.n	8005f44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fe fb99 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8005f2e:	6178      	str	r0, [r7, #20]
        break;
 8005f30:	e008      	b.n	8005f44 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	617b      	str	r3, [r7, #20]
        break;
 8005f38:	e004      	b.n	8005f44 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	76bb      	strb	r3, [r7, #26]
        break;
 8005f42:	bf00      	nop
    }

    if (pclk != 0U)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	085a      	lsrs	r2, r3, #1
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	441a      	add	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d908      	bls.n	8005f78 <UART_SetConfig+0x4f4>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d204      	bcs.n	8005f78 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	e001      	b.n	8005f7c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f88:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bdb0      	pop	{r4, r5, r7, pc}
 8005f92:	bf00      	nop
 8005f94:	00f42400 	.word	0x00f42400

08005f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01a      	beq.n	80060ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006096:	d10a      	bne.n	80060ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	605a      	str	r2, [r3, #4]
  }
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060ec:	f7fb feb0 	bl	8001e50 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d10e      	bne.n	800611e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f82d 	bl	800616e <UART_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e023      	b.n	8006166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d10e      	bne.n	800614a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f817 	bl	800616e <UART_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e00d      	b.n	8006166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4613      	mov	r3, r2
 800617c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617e:	e05e      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d05a      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006188:	f7fb fe62 	bl	8001e50 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	d302      	bcc.n	800619e <UART_WaitOnFlagUntilTimeout+0x30>
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d11b      	bne.n	80061d6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e043      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d02c      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f2:	d124      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800620c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	429a      	cmp	r2, r3
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	429a      	cmp	r2, r3
 800625a:	d091      	beq.n	8006180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	; (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	2000000c 	.word	0x2000000c

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	; (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	; (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	; (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	; (80062b8 <__libc_init_array+0x44>)
 8006288:	f002 feb4 	bl	8008ff4 <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08009494 	.word	0x08009494
 80062b0:	08009494 	.word	0x08009494
 80062b4:	08009494 	.word	0x08009494
 80062b8:	08009498 	.word	0x08009498

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <__cvt>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	ec55 4b10 	vmov	r4, r5, d0
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	460e      	mov	r6, r1
 80062d8:	4619      	mov	r1, r3
 80062da:	462b      	mov	r3, r5
 80062dc:	bfbb      	ittet	lt
 80062de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062e2:	461d      	movlt	r5, r3
 80062e4:	2300      	movge	r3, #0
 80062e6:	232d      	movlt	r3, #45	; 0x2d
 80062e8:	700b      	strb	r3, [r1, #0]
 80062ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062f0:	4691      	mov	r9, r2
 80062f2:	f023 0820 	bic.w	r8, r3, #32
 80062f6:	bfbc      	itt	lt
 80062f8:	4622      	movlt	r2, r4
 80062fa:	4614      	movlt	r4, r2
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006300:	d005      	beq.n	800630e <__cvt+0x42>
 8006302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006306:	d100      	bne.n	800630a <__cvt+0x3e>
 8006308:	3601      	adds	r6, #1
 800630a:	2102      	movs	r1, #2
 800630c:	e000      	b.n	8006310 <__cvt+0x44>
 800630e:	2103      	movs	r1, #3
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab02      	add	r3, sp, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	ec45 4b10 	vmov	d0, r4, r5
 800631c:	4653      	mov	r3, sl
 800631e:	4632      	mov	r2, r6
 8006320:	f000 fcea 	bl	8006cf8 <_dtoa_r>
 8006324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006328:	4607      	mov	r7, r0
 800632a:	d102      	bne.n	8006332 <__cvt+0x66>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d022      	beq.n	8006378 <__cvt+0xac>
 8006332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006336:	eb07 0906 	add.w	r9, r7, r6
 800633a:	d110      	bne.n	800635e <__cvt+0x92>
 800633c:	783b      	ldrb	r3, [r7, #0]
 800633e:	2b30      	cmp	r3, #48	; 0x30
 8006340:	d10a      	bne.n	8006358 <__cvt+0x8c>
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800634e:	b918      	cbnz	r0, 8006358 <__cvt+0x8c>
 8006350:	f1c6 0601 	rsb	r6, r6, #1
 8006354:	f8ca 6000 	str.w	r6, [sl]
 8006358:	f8da 3000 	ldr.w	r3, [sl]
 800635c:	4499      	add	r9, r3
 800635e:	2200      	movs	r2, #0
 8006360:	2300      	movs	r3, #0
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800636a:	b108      	cbz	r0, 8006370 <__cvt+0xa4>
 800636c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006370:	2230      	movs	r2, #48	; 0x30
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	454b      	cmp	r3, r9
 8006376:	d307      	bcc.n	8006388 <__cvt+0xbc>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800637c:	1bdb      	subs	r3, r3, r7
 800637e:	4638      	mov	r0, r7
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	b004      	add	sp, #16
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	9103      	str	r1, [sp, #12]
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e7f0      	b.n	8006372 <__cvt+0xa6>

08006390 <__exponent>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	4603      	mov	r3, r0
 8006394:	2900      	cmp	r1, #0
 8006396:	bfb8      	it	lt
 8006398:	4249      	neglt	r1, r1
 800639a:	f803 2b02 	strb.w	r2, [r3], #2
 800639e:	bfb4      	ite	lt
 80063a0:	222d      	movlt	r2, #45	; 0x2d
 80063a2:	222b      	movge	r2, #43	; 0x2b
 80063a4:	2909      	cmp	r1, #9
 80063a6:	7042      	strb	r2, [r0, #1]
 80063a8:	dd2a      	ble.n	8006400 <__exponent+0x70>
 80063aa:	f10d 0407 	add.w	r4, sp, #7
 80063ae:	46a4      	mov	ip, r4
 80063b0:	270a      	movs	r7, #10
 80063b2:	46a6      	mov	lr, r4
 80063b4:	460a      	mov	r2, r1
 80063b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063ba:	fb07 1516 	mls	r5, r7, r6, r1
 80063be:	3530      	adds	r5, #48	; 0x30
 80063c0:	2a63      	cmp	r2, #99	; 0x63
 80063c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80063c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063ca:	4631      	mov	r1, r6
 80063cc:	dcf1      	bgt.n	80063b2 <__exponent+0x22>
 80063ce:	3130      	adds	r1, #48	; 0x30
 80063d0:	f1ae 0502 	sub.w	r5, lr, #2
 80063d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063d8:	1c44      	adds	r4, r0, #1
 80063da:	4629      	mov	r1, r5
 80063dc:	4561      	cmp	r1, ip
 80063de:	d30a      	bcc.n	80063f6 <__exponent+0x66>
 80063e0:	f10d 0209 	add.w	r2, sp, #9
 80063e4:	eba2 020e 	sub.w	r2, r2, lr
 80063e8:	4565      	cmp	r5, ip
 80063ea:	bf88      	it	hi
 80063ec:	2200      	movhi	r2, #0
 80063ee:	4413      	add	r3, r2
 80063f0:	1a18      	subs	r0, r3, r0
 80063f2:	b003      	add	sp, #12
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063fe:	e7ed      	b.n	80063dc <__exponent+0x4c>
 8006400:	2330      	movs	r3, #48	; 0x30
 8006402:	3130      	adds	r1, #48	; 0x30
 8006404:	7083      	strb	r3, [r0, #2]
 8006406:	70c1      	strb	r1, [r0, #3]
 8006408:	1d03      	adds	r3, r0, #4
 800640a:	e7f1      	b.n	80063f0 <__exponent+0x60>

0800640c <_printf_float>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	ed2d 8b02 	vpush	{d8}
 8006414:	b08d      	sub	sp, #52	; 0x34
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800641c:	4616      	mov	r6, r2
 800641e:	461f      	mov	r7, r3
 8006420:	4605      	mov	r5, r0
 8006422:	f001 fa55 	bl	80078d0 <_localeconv_r>
 8006426:	f8d0 a000 	ldr.w	sl, [r0]
 800642a:	4650      	mov	r0, sl
 800642c:	f7f9 fed0 	bl	80001d0 <strlen>
 8006430:	2300      	movs	r3, #0
 8006432:	930a      	str	r3, [sp, #40]	; 0x28
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	f8d8 3000 	ldr.w	r3, [r8]
 800643c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006440:	3307      	adds	r3, #7
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	f103 0208 	add.w	r2, r3, #8
 800644a:	f8c8 2000 	str.w	r2, [r8]
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800645a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	f8cd 8018 	str.w	r8, [sp, #24]
 8006464:	ee08 0a10 	vmov	s16, r0
 8006468:	4b9f      	ldr	r3, [pc, #636]	; (80066e8 <_printf_float+0x2dc>)
 800646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	f7fa fb5b 	bl	8000b2c <__aeabi_dcmpun>
 8006476:	bb88      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647c:	4b9a      	ldr	r3, [pc, #616]	; (80066e8 <_printf_float+0x2dc>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	f7fa fb35 	bl	8000af0 <__aeabi_dcmple>
 8006486:	bb48      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb24 	bl	8000adc <__aeabi_dcmplt>
 8006494:	b110      	cbz	r0, 800649c <_printf_float+0x90>
 8006496:	232d      	movs	r3, #45	; 0x2d
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649c:	4b93      	ldr	r3, [pc, #588]	; (80066ec <_printf_float+0x2e0>)
 800649e:	4894      	ldr	r0, [pc, #592]	; (80066f0 <_printf_float+0x2e4>)
 80064a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064a4:	bf94      	ite	ls
 80064a6:	4698      	movls	r8, r3
 80064a8:	4680      	movhi	r8, r0
 80064aa:	2303      	movs	r3, #3
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	f023 0204 	bic.w	r2, r3, #4
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	9700      	str	r7, [sp, #0]
 80064bc:	4633      	mov	r3, r6
 80064be:	aa0b      	add	r2, sp, #44	; 0x2c
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f9d8 	bl	8006878 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f040 8090 	bne.w	80065ee <_printf_float+0x1e2>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	b00d      	add	sp, #52	; 0x34
 80064d4:	ecbd 8b02 	vpop	{d8}
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa fb22 	bl	8000b2c <__aeabi_dcmpun>
 80064e8:	b140      	cbz	r0, 80064fc <_printf_float+0xf0>
 80064ea:	464b      	mov	r3, r9
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bfbc      	itt	lt
 80064f0:	232d      	movlt	r3, #45	; 0x2d
 80064f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064f6:	487f      	ldr	r0, [pc, #508]	; (80066f4 <_printf_float+0x2e8>)
 80064f8:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <_printf_float+0x2ec>)
 80064fa:	e7d1      	b.n	80064a0 <_printf_float+0x94>
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006502:	9206      	str	r2, [sp, #24]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	d13f      	bne.n	8006588 <_printf_float+0x17c>
 8006508:	2306      	movs	r3, #6
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	ab0a      	add	r3, sp, #40	; 0x28
 800651a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800651e:	ab09      	add	r3, sp, #36	; 0x24
 8006520:	ec49 8b10 	vmov	d0, r8, r9
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fecd 	bl	80062cc <__cvt>
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006536:	2b47      	cmp	r3, #71	; 0x47
 8006538:	4680      	mov	r8, r0
 800653a:	d108      	bne.n	800654e <_printf_float+0x142>
 800653c:	1cc8      	adds	r0, r1, #3
 800653e:	db02      	blt.n	8006546 <_printf_float+0x13a>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	4299      	cmp	r1, r3
 8006544:	dd41      	ble.n	80065ca <_printf_float+0x1be>
 8006546:	f1ab 0b02 	sub.w	fp, fp, #2
 800654a:	fa5f fb8b 	uxtb.w	fp, fp
 800654e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006552:	d820      	bhi.n	8006596 <_printf_float+0x18a>
 8006554:	3901      	subs	r1, #1
 8006556:	465a      	mov	r2, fp
 8006558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800655c:	9109      	str	r1, [sp, #36]	; 0x24
 800655e:	f7ff ff17 	bl	8006390 <__exponent>
 8006562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006564:	1813      	adds	r3, r2, r0
 8006566:	2a01      	cmp	r2, #1
 8006568:	4681      	mov	r9, r0
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	dc02      	bgt.n	8006574 <_printf_float+0x168>
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	07d2      	lsls	r2, r2, #31
 8006572:	d501      	bpl.n	8006578 <_printf_float+0x16c>
 8006574:	3301      	adds	r3, #1
 8006576:	6123      	str	r3, [r4, #16]
 8006578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800657c:	2b00      	cmp	r3, #0
 800657e:	d09c      	beq.n	80064ba <_printf_float+0xae>
 8006580:	232d      	movs	r3, #45	; 0x2d
 8006582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006586:	e798      	b.n	80064ba <_printf_float+0xae>
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2a47      	cmp	r2, #71	; 0x47
 800658c:	d1be      	bne.n	800650c <_printf_float+0x100>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1bc      	bne.n	800650c <_printf_float+0x100>
 8006592:	2301      	movs	r3, #1
 8006594:	e7b9      	b.n	800650a <_printf_float+0xfe>
 8006596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800659a:	d118      	bne.n	80065ce <_printf_float+0x1c2>
 800659c:	2900      	cmp	r1, #0
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	dd0b      	ble.n	80065ba <_printf_float+0x1ae>
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	b913      	cbnz	r3, 80065ac <_printf_float+0x1a0>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	07d0      	lsls	r0, r2, #31
 80065aa:	d502      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065ac:	3301      	adds	r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065b4:	f04f 0900 	mov.w	r9, #0
 80065b8:	e7de      	b.n	8006578 <_printf_float+0x16c>
 80065ba:	b913      	cbnz	r3, 80065c2 <_printf_float+0x1b6>
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	07d2      	lsls	r2, r2, #31
 80065c0:	d501      	bpl.n	80065c6 <_printf_float+0x1ba>
 80065c2:	3302      	adds	r3, #2
 80065c4:	e7f4      	b.n	80065b0 <_printf_float+0x1a4>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e7f2      	b.n	80065b0 <_printf_float+0x1a4>
 80065ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	4299      	cmp	r1, r3
 80065d2:	db05      	blt.n	80065e0 <_printf_float+0x1d4>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6121      	str	r1, [r4, #16]
 80065d8:	07d8      	lsls	r0, r3, #31
 80065da:	d5ea      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065dc:	1c4b      	adds	r3, r1, #1
 80065de:	e7e7      	b.n	80065b0 <_printf_float+0x1a4>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	bfd4      	ite	le
 80065e4:	f1c1 0202 	rsble	r2, r1, #2
 80065e8:	2201      	movgt	r2, #1
 80065ea:	4413      	add	r3, r2
 80065ec:	e7e0      	b.n	80065b0 <_printf_float+0x1a4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	055a      	lsls	r2, r3, #21
 80065f2:	d407      	bmi.n	8006604 <_printf_float+0x1f8>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	4642      	mov	r2, r8
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d12c      	bne.n	800665c <_printf_float+0x250>
 8006602:	e764      	b.n	80064ce <_printf_float+0xc2>
 8006604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006608:	f240 80e0 	bls.w	80067cc <_printf_float+0x3c0>
 800660c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006618:	2800      	cmp	r0, #0
 800661a:	d034      	beq.n	8006686 <_printf_float+0x27a>
 800661c:	4a37      	ldr	r2, [pc, #220]	; (80066fc <_printf_float+0x2f0>)
 800661e:	2301      	movs	r3, #1
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af51 	beq.w	80064ce <_printf_float+0xc2>
 800662c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006630:	429a      	cmp	r2, r3
 8006632:	db02      	blt.n	800663a <_printf_float+0x22e>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	07d8      	lsls	r0, r3, #31
 8006638:	d510      	bpl.n	800665c <_printf_float+0x250>
 800663a:	ee18 3a10 	vmov	r3, s16
 800663e:	4652      	mov	r2, sl
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af41 	beq.w	80064ce <_printf_float+0xc2>
 800664c:	f04f 0800 	mov.w	r8, #0
 8006650:	f104 091a 	add.w	r9, r4, #26
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	4543      	cmp	r3, r8
 800665a:	dc09      	bgt.n	8006670 <_printf_float+0x264>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	f100 8105 	bmi.w	800686e <_printf_float+0x462>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e730      	b.n	80064d2 <_printf_float+0xc6>
 8006670:	2301      	movs	r3, #1
 8006672:	464a      	mov	r2, r9
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af27 	beq.w	80064ce <_printf_float+0xc2>
 8006680:	f108 0801 	add.w	r8, r8, #1
 8006684:	e7e6      	b.n	8006654 <_printf_float+0x248>
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc39      	bgt.n	8006700 <_printf_float+0x2f4>
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <_printf_float+0x2f0>)
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af19 	beq.w	80064ce <_printf_float+0xc2>
 800669c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d102      	bne.n	80066aa <_printf_float+0x29e>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d5d8      	bpl.n	800665c <_printf_float+0x250>
 80066aa:	ee18 3a10 	vmov	r3, s16
 80066ae:	4652      	mov	r2, sl
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af09 	beq.w	80064ce <_printf_float+0xc2>
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	f104 0a1a 	add.w	sl, r4, #26
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	425b      	negs	r3, r3
 80066c8:	454b      	cmp	r3, r9
 80066ca:	dc01      	bgt.n	80066d0 <_printf_float+0x2c4>
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	e792      	b.n	80065f6 <_printf_float+0x1ea>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4652      	mov	r2, sl
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aef7 	beq.w	80064ce <_printf_float+0xc2>
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	e7ee      	b.n	80066c4 <_printf_float+0x2b8>
 80066e6:	bf00      	nop
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	080090ac 	.word	0x080090ac
 80066f0:	080090b0 	.word	0x080090b0
 80066f4:	080090b8 	.word	0x080090b8
 80066f8:	080090b4 	.word	0x080090b4
 80066fc:	080090bc 	.word	0x080090bc
 8006700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006704:	429a      	cmp	r2, r3
 8006706:	bfa8      	it	ge
 8006708:	461a      	movge	r2, r3
 800670a:	2a00      	cmp	r2, #0
 800670c:	4691      	mov	r9, r2
 800670e:	dc37      	bgt.n	8006780 <_printf_float+0x374>
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006718:	f104 021a 	add.w	r2, r4, #26
 800671c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	eba3 0309 	sub.w	r3, r3, r9
 8006724:	455b      	cmp	r3, fp
 8006726:	dc33      	bgt.n	8006790 <_printf_float+0x384>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	db3b      	blt.n	80067a8 <_printf_float+0x39c>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07da      	lsls	r2, r3, #31
 8006734:	d438      	bmi.n	80067a8 <_printf_float+0x39c>
 8006736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006738:	9b05      	ldr	r3, [sp, #20]
 800673a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	eba2 0901 	sub.w	r9, r2, r1
 8006742:	4599      	cmp	r9, r3
 8006744:	bfa8      	it	ge
 8006746:	4699      	movge	r9, r3
 8006748:	f1b9 0f00 	cmp.w	r9, #0
 800674c:	dc35      	bgt.n	80067ba <_printf_float+0x3ae>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006756:	f104 0a1a 	add.w	sl, r4, #26
 800675a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	eba3 0309 	sub.w	r3, r3, r9
 8006764:	4543      	cmp	r3, r8
 8006766:	f77f af79 	ble.w	800665c <_printf_float+0x250>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f aeaa 	beq.w	80064ce <_printf_float+0xc2>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	e7ec      	b.n	800675a <_printf_float+0x34e>
 8006780:	4613      	mov	r3, r2
 8006782:	4631      	mov	r1, r6
 8006784:	4642      	mov	r2, r8
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d1c0      	bne.n	8006710 <_printf_float+0x304>
 800678e:	e69e      	b.n	80064ce <_printf_float+0xc2>
 8006790:	2301      	movs	r3, #1
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	9205      	str	r2, [sp, #20]
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f ae97 	beq.w	80064ce <_printf_float+0xc2>
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	f10b 0b01 	add.w	fp, fp, #1
 80067a6:	e7b9      	b.n	800671c <_printf_float+0x310>
 80067a8:	ee18 3a10 	vmov	r3, s16
 80067ac:	4652      	mov	r2, sl
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1be      	bne.n	8006736 <_printf_float+0x32a>
 80067b8:	e689      	b.n	80064ce <_printf_float+0xc2>
 80067ba:	9a05      	ldr	r2, [sp, #20]
 80067bc:	464b      	mov	r3, r9
 80067be:	4442      	add	r2, r8
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c1      	bne.n	800674e <_printf_float+0x342>
 80067ca:	e680      	b.n	80064ce <_printf_float+0xc2>
 80067cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	dc01      	bgt.n	80067d6 <_printf_float+0x3ca>
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d538      	bpl.n	8006848 <_printf_float+0x43c>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4642      	mov	r2, r8
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae74 	beq.w	80064ce <_printf_float+0xc2>
 80067e6:	ee18 3a10 	vmov	r3, s16
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f ae6b 	beq.w	80064ce <_printf_float+0xc2>
 80067f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	f7fa f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8006804:	b9d8      	cbnz	r0, 800683e <_printf_float+0x432>
 8006806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006808:	f108 0201 	add.w	r2, r8, #1
 800680c:	3b01      	subs	r3, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d10e      	bne.n	8006836 <_printf_float+0x42a>
 8006818:	e659      	b.n	80064ce <_printf_float+0xc2>
 800681a:	2301      	movs	r3, #1
 800681c:	4652      	mov	r2, sl
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae52 	beq.w	80064ce <_printf_float+0xc2>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	4543      	cmp	r3, r8
 8006834:	dcf1      	bgt.n	800681a <_printf_float+0x40e>
 8006836:	464b      	mov	r3, r9
 8006838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800683c:	e6dc      	b.n	80065f8 <_printf_float+0x1ec>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0a1a 	add.w	sl, r4, #26
 8006846:	e7f2      	b.n	800682e <_printf_float+0x422>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7df      	b.n	800680e <_printf_float+0x402>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae38 	beq.w	80064ce <_printf_float+0xc2>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x442>
 800686c:	e6fa      	b.n	8006664 <_printf_float+0x258>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x456>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4699      	mov	r9, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006894:	4607      	mov	r7, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc26      	bgt.n	800690e <_printf_common+0x96>
 80068c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d42b      	bmi.n	8006928 <_printf_common+0xb0>
 80068d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d4:	4649      	mov	r1, r9
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c0      	blx	r8
 80068da:	3001      	adds	r0, #1
 80068dc:	d01e      	beq.n	800691c <_printf_common+0xa4>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	68e5      	ldr	r5, [r4, #12]
 80068e2:	6832      	ldr	r2, [r6, #0]
 80068e4:	f003 0306 	and.w	r3, r3, #6
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	bf08      	it	eq
 80068ec:	1aad      	subeq	r5, r5, r2
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	bf0c      	ite	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	2500      	movne	r5, #0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bfc4      	itt	gt
 80068fe:	1a9b      	subgt	r3, r3, r2
 8006900:	18ed      	addgt	r5, r5, r3
 8006902:	2600      	movs	r6, #0
 8006904:	341a      	adds	r4, #26
 8006906:	42b5      	cmp	r5, r6
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xc8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xa8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4649      	mov	r1, r9
 8006914:	4638      	mov	r0, r7
 8006916:	47c0      	blx	r8
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xac>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c6      	b.n	80068b6 <_printf_common+0x3e>
 8006928:	18e1      	adds	r1, r4, r3
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	2030      	movs	r0, #48	; 0x30
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006932:	4422      	add	r2, r4
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693c:	3302      	adds	r3, #2
 800693e:	e7c7      	b.n	80068d0 <_printf_common+0x58>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4649      	mov	r1, r9
 8006946:	4638      	mov	r0, r7
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xa4>
 800694e:	3601      	adds	r6, #1
 8006950:	e7d9      	b.n	8006906 <_printf_common+0x8e>
	...

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	460c      	mov	r4, r1
 800695a:	4691      	mov	r9, r2
 800695c:	7e27      	ldrb	r7, [r4, #24]
 800695e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006960:	2f78      	cmp	r7, #120	; 0x78
 8006962:	4680      	mov	r8, r0
 8006964:	469a      	mov	sl, r3
 8006966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	; 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d8 	beq.w	8006b26 <_printf_i+0x1d2>
 8006976:	2f58      	cmp	r7, #88	; 0x58
 8006978:	f000 80a3 	beq.w	8006ac2 <_printf_i+0x16e>
 800697c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a001      	add	r0, pc, #4	; (adr r0, 8006994 <_printf_i+0x40>)
 8006990:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006b0d 	.word	0x08006b0d
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006aef 	.word	0x08006aef
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b2f 	.word	0x08006b2f
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006af7 	.word	0x08006af7
 80069ec:	680b      	ldr	r3, [r1, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	600a      	str	r2, [r1, #0]
 80069f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a3      	b.n	8006b48 <_printf_i+0x1f4>
 8006a00:	6825      	ldr	r5, [r4, #0]
 8006a02:	6808      	ldr	r0, [r1, #0]
 8006a04:	062e      	lsls	r6, r5, #24
 8006a06:	f100 0304 	add.w	r3, r0, #4
 8006a0a:	d50a      	bpl.n	8006a22 <_printf_i+0xce>
 8006a0c:	6805      	ldr	r5, [r0, #0]
 8006a0e:	600b      	str	r3, [r1, #0]
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	da03      	bge.n	8006a1c <_printf_i+0xc8>
 8006a14:	232d      	movs	r3, #45	; 0x2d
 8006a16:	426d      	negs	r5, r5
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	485e      	ldr	r0, [pc, #376]	; (8006b98 <_printf_i+0x244>)
 8006a1e:	230a      	movs	r3, #10
 8006a20:	e019      	b.n	8006a56 <_printf_i+0x102>
 8006a22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a26:	6805      	ldr	r5, [r0, #0]
 8006a28:	600b      	str	r3, [r1, #0]
 8006a2a:	bf18      	it	ne
 8006a2c:	b22d      	sxthne	r5, r5
 8006a2e:	e7ef      	b.n	8006a10 <_printf_i+0xbc>
 8006a30:	680b      	ldr	r3, [r1, #0]
 8006a32:	6825      	ldr	r5, [r4, #0]
 8006a34:	1d18      	adds	r0, r3, #4
 8006a36:	6008      	str	r0, [r1, #0]
 8006a38:	0628      	lsls	r0, r5, #24
 8006a3a:	d501      	bpl.n	8006a40 <_printf_i+0xec>
 8006a3c:	681d      	ldr	r5, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <_printf_i+0xf2>
 8006a40:	0669      	lsls	r1, r5, #25
 8006a42:	d5fb      	bpl.n	8006a3c <_printf_i+0xe8>
 8006a44:	881d      	ldrh	r5, [r3, #0]
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <_printf_i+0x244>)
 8006a48:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	230a      	movne	r3, #10
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a56:	6866      	ldr	r6, [r4, #4]
 8006a58:	60a6      	str	r6, [r4, #8]
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	bfa2      	ittt	ge
 8006a5e:	6821      	ldrge	r1, [r4, #0]
 8006a60:	f021 0104 	bicge.w	r1, r1, #4
 8006a64:	6021      	strge	r1, [r4, #0]
 8006a66:	b90d      	cbnz	r5, 8006a6c <_printf_i+0x118>
 8006a68:	2e00      	cmp	r6, #0
 8006a6a:	d04d      	beq.n	8006b08 <_printf_i+0x1b4>
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a72:	fb03 5711 	mls	r7, r3, r1, r5
 8006a76:	5dc7      	ldrb	r7, [r0, r7]
 8006a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a7c:	462f      	mov	r7, r5
 8006a7e:	42bb      	cmp	r3, r7
 8006a80:	460d      	mov	r5, r1
 8006a82:	d9f4      	bls.n	8006a6e <_printf_i+0x11a>
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <_printf_i+0x14c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07df      	lsls	r7, r3, #31
 8006a8c:	d508      	bpl.n	8006aa0 <_printf_i+0x14c>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	4299      	cmp	r1, r3
 8006a94:	bfde      	ittt	le
 8006a96:	2330      	movle	r3, #48	; 0x30
 8006a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aa0:	1b92      	subs	r2, r2, r6
 8006aa2:	6122      	str	r2, [r4, #16]
 8006aa4:	f8cd a000 	str.w	sl, [sp]
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	aa03      	add	r2, sp, #12
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fee2 	bl	8006878 <_printf_common>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d14c      	bne.n	8006b52 <_printf_i+0x1fe>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	b004      	add	sp, #16
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	4835      	ldr	r0, [pc, #212]	; (8006b98 <_printf_i+0x244>)
 8006ac4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	680e      	ldr	r6, [r1, #0]
 8006acc:	061f      	lsls	r7, r3, #24
 8006ace:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ad2:	600e      	str	r6, [r1, #0]
 8006ad4:	d514      	bpl.n	8006b00 <_printf_i+0x1ac>
 8006ad6:	07d9      	lsls	r1, r3, #31
 8006ad8:	bf44      	itt	mi
 8006ada:	f043 0320 	orrmi.w	r3, r3, #32
 8006ade:	6023      	strmi	r3, [r4, #0]
 8006ae0:	b91d      	cbnz	r5, 8006aea <_printf_i+0x196>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f023 0320 	bic.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	2310      	movs	r3, #16
 8006aec:	e7b0      	b.n	8006a50 <_printf_i+0xfc>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	2378      	movs	r3, #120	; 0x78
 8006af8:	4828      	ldr	r0, [pc, #160]	; (8006b9c <_printf_i+0x248>)
 8006afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006afe:	e7e3      	b.n	8006ac8 <_printf_i+0x174>
 8006b00:	065e      	lsls	r6, r3, #25
 8006b02:	bf48      	it	mi
 8006b04:	b2ad      	uxthmi	r5, r5
 8006b06:	e7e6      	b.n	8006ad6 <_printf_i+0x182>
 8006b08:	4616      	mov	r6, r2
 8006b0a:	e7bb      	b.n	8006a84 <_printf_i+0x130>
 8006b0c:	680b      	ldr	r3, [r1, #0]
 8006b0e:	6826      	ldr	r6, [r4, #0]
 8006b10:	6960      	ldr	r0, [r4, #20]
 8006b12:	1d1d      	adds	r5, r3, #4
 8006b14:	600d      	str	r5, [r1, #0]
 8006b16:	0635      	lsls	r5, r6, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1cc>
 8006b1c:	6018      	str	r0, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1d2>
 8006b20:	0671      	lsls	r1, r6, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1c8>
 8006b24:	8018      	strh	r0, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	e7ba      	b.n	8006aa4 <_printf_i+0x150>
 8006b2e:	680b      	ldr	r3, [r1, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	600a      	str	r2, [r1, #0]
 8006b34:	681e      	ldr	r6, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7f9 fb50 	bl	80001e0 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1f2>
 8006b42:	1b80      	subs	r0, r0, r6
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	e7a8      	b.n	8006aa4 <_printf_i+0x150>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ab      	beq.n	8006ab8 <_printf_i+0x164>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x23a>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a4      	b.n	8006abc <_printf_i+0x168>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09b      	beq.n	8006ab8 <_printf_i+0x164>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x21e>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x212>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x22e>
 8006b96:	bf00      	nop
 8006b98:	080090be 	.word	0x080090be
 8006b9c:	080090cf 	.word	0x080090cf

08006ba0 <siprintf>:
 8006ba0:	b40e      	push	{r1, r2, r3}
 8006ba2:	b500      	push	{lr}
 8006ba4:	b09c      	sub	sp, #112	; 0x70
 8006ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ba8:	9002      	str	r0, [sp, #8]
 8006baa:	9006      	str	r0, [sp, #24]
 8006bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bb0:	4809      	ldr	r0, [pc, #36]	; (8006bd8 <siprintf+0x38>)
 8006bb2:	9107      	str	r1, [sp, #28]
 8006bb4:	9104      	str	r1, [sp, #16]
 8006bb6:	4909      	ldr	r1, [pc, #36]	; (8006bdc <siprintf+0x3c>)
 8006bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bbc:	9105      	str	r1, [sp, #20]
 8006bbe:	6800      	ldr	r0, [r0, #0]
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	a902      	add	r1, sp, #8
 8006bc4:	f001 fb32 	bl	800822c <_svfiprintf_r>
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	b01c      	add	sp, #112	; 0x70
 8006bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd4:	b003      	add	sp, #12
 8006bd6:	4770      	bx	lr
 8006bd8:	2000000c 	.word	0x2000000c
 8006bdc:	ffff0208 	.word	0xffff0208

08006be0 <quorem>:
 8006be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	6903      	ldr	r3, [r0, #16]
 8006be6:	690c      	ldr	r4, [r1, #16]
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	4607      	mov	r7, r0
 8006bec:	f2c0 8081 	blt.w	8006cf2 <quorem+0x112>
 8006bf0:	3c01      	subs	r4, #1
 8006bf2:	f101 0814 	add.w	r8, r1, #20
 8006bf6:	f100 0514 	add.w	r5, r0, #20
 8006bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c18:	d331      	bcc.n	8006c7e <quorem+0x9e>
 8006c1a:	f04f 0e00 	mov.w	lr, #0
 8006c1e:	4640      	mov	r0, r8
 8006c20:	46ac      	mov	ip, r5
 8006c22:	46f2      	mov	sl, lr
 8006c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c28:	b293      	uxth	r3, r2
 8006c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	ebaa 0303 	sub.w	r3, sl, r3
 8006c38:	0c12      	lsrs	r2, r2, #16
 8006c3a:	f8dc a000 	ldr.w	sl, [ip]
 8006c3e:	fb06 e202 	mla	r2, r6, r2, lr
 8006c42:	fa13 f38a 	uxtah	r3, r3, sl
 8006c46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c4a:	fa1f fa82 	uxth.w	sl, r2
 8006c4e:	f8dc 2000 	ldr.w	r2, [ip]
 8006c52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c60:	4581      	cmp	r9, r0
 8006c62:	f84c 3b04 	str.w	r3, [ip], #4
 8006c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c6a:	d2db      	bcs.n	8006c24 <quorem+0x44>
 8006c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c70:	b92b      	cbnz	r3, 8006c7e <quorem+0x9e>
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	429d      	cmp	r5, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	d32e      	bcc.n	8006cda <quorem+0xfa>
 8006c7c:	613c      	str	r4, [r7, #16]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f001 f8be 	bl	8007e00 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	db24      	blt.n	8006cd2 <quorem+0xf2>
 8006c88:	3601      	adds	r6, #1
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f04f 0c00 	mov.w	ip, #0
 8006c90:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c94:	f8d0 e000 	ldr.w	lr, [r0]
 8006c98:	b293      	uxth	r3, r2
 8006c9a:	ebac 0303 	sub.w	r3, ip, r3
 8006c9e:	0c12      	lsrs	r2, r2, #16
 8006ca0:	fa13 f38e 	uxtah	r3, r3, lr
 8006ca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cb2:	45c1      	cmp	r9, r8
 8006cb4:	f840 3b04 	str.w	r3, [r0], #4
 8006cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cbc:	d2e8      	bcs.n	8006c90 <quorem+0xb0>
 8006cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cc6:	b922      	cbnz	r2, 8006cd2 <quorem+0xf2>
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	429d      	cmp	r5, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	d30a      	bcc.n	8006ce6 <quorem+0x106>
 8006cd0:	613c      	str	r4, [r7, #16]
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	b003      	add	sp, #12
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d1cc      	bne.n	8006c7c <quorem+0x9c>
 8006ce2:	3c01      	subs	r4, #1
 8006ce4:	e7c7      	b.n	8006c76 <quorem+0x96>
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	d1f0      	bne.n	8006cd0 <quorem+0xf0>
 8006cee:	3c01      	subs	r4, #1
 8006cf0:	e7eb      	b.n	8006cca <quorem+0xea>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e7ee      	b.n	8006cd4 <quorem+0xf4>
	...

08006cf8 <_dtoa_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b02 	vpush	{d8}
 8006d00:	ec57 6b10 	vmov	r6, r7, d0
 8006d04:	b095      	sub	sp, #84	; 0x54
 8006d06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d0c:	9105      	str	r1, [sp, #20]
 8006d0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d12:	4604      	mov	r4, r0
 8006d14:	9209      	str	r2, [sp, #36]	; 0x24
 8006d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d18:	b975      	cbnz	r5, 8006d38 <_dtoa_r+0x40>
 8006d1a:	2010      	movs	r0, #16
 8006d1c:	f000 fddc 	bl	80078d8 <malloc>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6260      	str	r0, [r4, #36]	; 0x24
 8006d24:	b920      	cbnz	r0, 8006d30 <_dtoa_r+0x38>
 8006d26:	4bb2      	ldr	r3, [pc, #712]	; (8006ff0 <_dtoa_r+0x2f8>)
 8006d28:	21ea      	movs	r1, #234	; 0xea
 8006d2a:	48b2      	ldr	r0, [pc, #712]	; (8006ff4 <_dtoa_r+0x2fc>)
 8006d2c:	f001 fb8e 	bl	800844c <__assert_func>
 8006d30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d34:	6005      	str	r5, [r0, #0]
 8006d36:	60c5      	str	r5, [r0, #12]
 8006d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d3a:	6819      	ldr	r1, [r3, #0]
 8006d3c:	b151      	cbz	r1, 8006d54 <_dtoa_r+0x5c>
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	604a      	str	r2, [r1, #4]
 8006d42:	2301      	movs	r3, #1
 8006d44:	4093      	lsls	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fe1b 	bl	8007984 <_Bfree>
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	1e3b      	subs	r3, r7, #0
 8006d56:	bfb9      	ittee	lt
 8006d58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d5c:	9303      	strlt	r3, [sp, #12]
 8006d5e:	2300      	movge	r3, #0
 8006d60:	f8c8 3000 	strge.w	r3, [r8]
 8006d64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d68:	4ba3      	ldr	r3, [pc, #652]	; (8006ff8 <_dtoa_r+0x300>)
 8006d6a:	bfbc      	itt	lt
 8006d6c:	2201      	movlt	r2, #1
 8006d6e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d72:	ea33 0309 	bics.w	r3, r3, r9
 8006d76:	d11b      	bne.n	8006db0 <_dtoa_r+0xb8>
 8006d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d84:	4333      	orrs	r3, r6
 8006d86:	f000 857a 	beq.w	800787e <_dtoa_r+0xb86>
 8006d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d8c:	b963      	cbnz	r3, 8006da8 <_dtoa_r+0xb0>
 8006d8e:	4b9b      	ldr	r3, [pc, #620]	; (8006ffc <_dtoa_r+0x304>)
 8006d90:	e024      	b.n	8006ddc <_dtoa_r+0xe4>
 8006d92:	4b9b      	ldr	r3, [pc, #620]	; (8007000 <_dtoa_r+0x308>)
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	9800      	ldr	r0, [sp, #0]
 8006d9e:	b015      	add	sp, #84	; 0x54
 8006da0:	ecbd 8b02 	vpop	{d8}
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	4b94      	ldr	r3, [pc, #592]	; (8006ffc <_dtoa_r+0x304>)
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	3303      	adds	r3, #3
 8006dae:	e7f3      	b.n	8006d98 <_dtoa_r+0xa0>
 8006db0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	ec51 0b17 	vmov	r0, r1, d7
 8006dba:	2300      	movs	r3, #0
 8006dbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006dc0:	f7f9 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	b158      	cbz	r0, 8006de0 <_dtoa_r+0xe8>
 8006dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8551 	beq.w	8007878 <_dtoa_r+0xb80>
 8006dd6:	488b      	ldr	r0, [pc, #556]	; (8007004 <_dtoa_r+0x30c>)
 8006dd8:	6018      	str	r0, [r3, #0]
 8006dda:	1e43      	subs	r3, r0, #1
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	e7dd      	b.n	8006d9c <_dtoa_r+0xa4>
 8006de0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006de4:	aa12      	add	r2, sp, #72	; 0x48
 8006de6:	a913      	add	r1, sp, #76	; 0x4c
 8006de8:	4620      	mov	r0, r4
 8006dea:	f001 f8ad 	bl	8007f48 <__d2b>
 8006dee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006df2:	4683      	mov	fp, r0
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	d07c      	beq.n	8006ef2 <_dtoa_r+0x1fa>
 8006df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006e06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e12:	4b7d      	ldr	r3, [pc, #500]	; (8007008 <_dtoa_r+0x310>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	4630      	mov	r0, r6
 8006e18:	4639      	mov	r1, r7
 8006e1a:	f7f9 fa35 	bl	8000288 <__aeabi_dsub>
 8006e1e:	a36e      	add	r3, pc, #440	; (adr r3, 8006fd8 <_dtoa_r+0x2e0>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 fbe8 	bl	80005f8 <__aeabi_dmul>
 8006e28:	a36d      	add	r3, pc, #436	; (adr r3, 8006fe0 <_dtoa_r+0x2e8>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fa2d 	bl	800028c <__adddf3>
 8006e32:	4606      	mov	r6, r0
 8006e34:	4628      	mov	r0, r5
 8006e36:	460f      	mov	r7, r1
 8006e38:	f7f9 fb74 	bl	8000524 <__aeabi_i2d>
 8006e3c:	a36a      	add	r3, pc, #424	; (adr r3, 8006fe8 <_dtoa_r+0x2f0>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 fa1d 	bl	800028c <__adddf3>
 8006e52:	4606      	mov	r6, r0
 8006e54:	460f      	mov	r7, r1
 8006e56:	f7f9 fe7f 	bl	8000b58 <__aeabi_d2iz>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4682      	mov	sl, r0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8006e68:	b148      	cbz	r0, 8006e7e <_dtoa_r+0x186>
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f7f9 fb5a 	bl	8000524 <__aeabi_i2d>
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	f7f9 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e78:	b908      	cbnz	r0, 8006e7e <_dtoa_r+0x186>
 8006e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e7e:	f1ba 0f16 	cmp.w	sl, #22
 8006e82:	d854      	bhi.n	8006f2e <_dtoa_r+0x236>
 8006e84:	4b61      	ldr	r3, [pc, #388]	; (800700c <_dtoa_r+0x314>)
 8006e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e92:	f7f9 fe23 	bl	8000adc <__aeabi_dcmplt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d04b      	beq.n	8006f32 <_dtoa_r+0x23a>
 8006e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ea4:	1b5d      	subs	r5, r3, r5
 8006ea6:	1e6b      	subs	r3, r5, #1
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	bf43      	ittte	mi
 8006eac:	2300      	movmi	r3, #0
 8006eae:	f1c5 0801 	rsbmi	r8, r5, #1
 8006eb2:	9304      	strmi	r3, [sp, #16]
 8006eb4:	f04f 0800 	movpl.w	r8, #0
 8006eb8:	f1ba 0f00 	cmp.w	sl, #0
 8006ebc:	db3b      	blt.n	8006f36 <_dtoa_r+0x23e>
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006ec4:	4453      	add	r3, sl
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9306      	str	r3, [sp, #24]
 8006ecc:	9b05      	ldr	r3, [sp, #20]
 8006ece:	2b09      	cmp	r3, #9
 8006ed0:	d869      	bhi.n	8006fa6 <_dtoa_r+0x2ae>
 8006ed2:	2b05      	cmp	r3, #5
 8006ed4:	bfc4      	itt	gt
 8006ed6:	3b04      	subgt	r3, #4
 8006ed8:	9305      	strgt	r3, [sp, #20]
 8006eda:	9b05      	ldr	r3, [sp, #20]
 8006edc:	f1a3 0302 	sub.w	r3, r3, #2
 8006ee0:	bfcc      	ite	gt
 8006ee2:	2500      	movgt	r5, #0
 8006ee4:	2501      	movle	r5, #1
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d869      	bhi.n	8006fbe <_dtoa_r+0x2c6>
 8006eea:	e8df f003 	tbb	[pc, r3]
 8006eee:	4e2c      	.short	0x4e2c
 8006ef0:	5a4c      	.short	0x5a4c
 8006ef2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ef6:	441d      	add	r5, r3
 8006ef8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	bfc1      	itttt	gt
 8006f00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f08:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f10:	bfda      	itte	le
 8006f12:	f1c3 0320 	rsble	r3, r3, #32
 8006f16:	fa06 f003 	lslle.w	r0, r6, r3
 8006f1a:	4318      	orrgt	r0, r3
 8006f1c:	f7f9 faf2 	bl	8000504 <__aeabi_ui2d>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4606      	mov	r6, r0
 8006f24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f28:	3d01      	subs	r5, #1
 8006f2a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f2c:	e771      	b.n	8006e12 <_dtoa_r+0x11a>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e7b6      	b.n	8006ea0 <_dtoa_r+0x1a8>
 8006f32:	900e      	str	r0, [sp, #56]	; 0x38
 8006f34:	e7b5      	b.n	8006ea2 <_dtoa_r+0x1aa>
 8006f36:	f1ca 0300 	rsb	r3, sl, #0
 8006f3a:	9306      	str	r3, [sp, #24]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	eba8 080a 	sub.w	r8, r8, sl
 8006f42:	930d      	str	r3, [sp, #52]	; 0x34
 8006f44:	e7c2      	b.n	8006ecc <_dtoa_r+0x1d4>
 8006f46:	2300      	movs	r3, #0
 8006f48:	9308      	str	r3, [sp, #32]
 8006f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc39      	bgt.n	8006fc4 <_dtoa_r+0x2cc>
 8006f50:	f04f 0901 	mov.w	r9, #1
 8006f54:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f58:	464b      	mov	r3, r9
 8006f5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f60:	2200      	movs	r2, #0
 8006f62:	6042      	str	r2, [r0, #4]
 8006f64:	2204      	movs	r2, #4
 8006f66:	f102 0614 	add.w	r6, r2, #20
 8006f6a:	429e      	cmp	r6, r3
 8006f6c:	6841      	ldr	r1, [r0, #4]
 8006f6e:	d92f      	bls.n	8006fd0 <_dtoa_r+0x2d8>
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fcc7 	bl	8007904 <_Balloc>
 8006f76:	9000      	str	r0, [sp, #0]
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d14b      	bne.n	8007014 <_dtoa_r+0x31c>
 8006f7c:	4b24      	ldr	r3, [pc, #144]	; (8007010 <_dtoa_r+0x318>)
 8006f7e:	4602      	mov	r2, r0
 8006f80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f84:	e6d1      	b.n	8006d2a <_dtoa_r+0x32>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e7de      	b.n	8006f48 <_dtoa_r+0x250>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9308      	str	r3, [sp, #32]
 8006f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f90:	eb0a 0903 	add.w	r9, sl, r3
 8006f94:	f109 0301 	add.w	r3, r9, #1
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	bfb8      	it	lt
 8006f9e:	2301      	movlt	r3, #1
 8006fa0:	e7dd      	b.n	8006f5e <_dtoa_r+0x266>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7f2      	b.n	8006f8c <_dtoa_r+0x294>
 8006fa6:	2501      	movs	r5, #1
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9305      	str	r3, [sp, #20]
 8006fac:	9508      	str	r5, [sp, #32]
 8006fae:	f04f 39ff 	mov.w	r9, #4294967295
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fb8:	2312      	movs	r3, #18
 8006fba:	9209      	str	r2, [sp, #36]	; 0x24
 8006fbc:	e7cf      	b.n	8006f5e <_dtoa_r+0x266>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	9308      	str	r3, [sp, #32]
 8006fc2:	e7f4      	b.n	8006fae <_dtoa_r+0x2b6>
 8006fc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	e7c6      	b.n	8006f5e <_dtoa_r+0x266>
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	6041      	str	r1, [r0, #4]
 8006fd4:	0052      	lsls	r2, r2, #1
 8006fd6:	e7c6      	b.n	8006f66 <_dtoa_r+0x26e>
 8006fd8:	636f4361 	.word	0x636f4361
 8006fdc:	3fd287a7 	.word	0x3fd287a7
 8006fe0:	8b60c8b3 	.word	0x8b60c8b3
 8006fe4:	3fc68a28 	.word	0x3fc68a28
 8006fe8:	509f79fb 	.word	0x509f79fb
 8006fec:	3fd34413 	.word	0x3fd34413
 8006ff0:	080090ed 	.word	0x080090ed
 8006ff4:	08009104 	.word	0x08009104
 8006ff8:	7ff00000 	.word	0x7ff00000
 8006ffc:	080090e9 	.word	0x080090e9
 8007000:	080090e0 	.word	0x080090e0
 8007004:	080090bd 	.word	0x080090bd
 8007008:	3ff80000 	.word	0x3ff80000
 800700c:	08009200 	.word	0x08009200
 8007010:	08009163 	.word	0x08009163
 8007014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007016:	9a00      	ldr	r2, [sp, #0]
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	2b0e      	cmp	r3, #14
 800701e:	f200 80ad 	bhi.w	800717c <_dtoa_r+0x484>
 8007022:	2d00      	cmp	r5, #0
 8007024:	f000 80aa 	beq.w	800717c <_dtoa_r+0x484>
 8007028:	f1ba 0f00 	cmp.w	sl, #0
 800702c:	dd36      	ble.n	800709c <_dtoa_r+0x3a4>
 800702e:	4ac3      	ldr	r2, [pc, #780]	; (800733c <_dtoa_r+0x644>)
 8007030:	f00a 030f 	and.w	r3, sl, #15
 8007034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007038:	ed93 7b00 	vldr	d7, [r3]
 800703c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007040:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007044:	eeb0 8a47 	vmov.f32	s16, s14
 8007048:	eef0 8a67 	vmov.f32	s17, s15
 800704c:	d016      	beq.n	800707c <_dtoa_r+0x384>
 800704e:	4bbc      	ldr	r3, [pc, #752]	; (8007340 <_dtoa_r+0x648>)
 8007050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007058:	f7f9 fbf8 	bl	800084c <__aeabi_ddiv>
 800705c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007060:	f007 070f 	and.w	r7, r7, #15
 8007064:	2503      	movs	r5, #3
 8007066:	4eb6      	ldr	r6, [pc, #728]	; (8007340 <_dtoa_r+0x648>)
 8007068:	b957      	cbnz	r7, 8007080 <_dtoa_r+0x388>
 800706a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706e:	ec53 2b18 	vmov	r2, r3, d8
 8007072:	f7f9 fbeb 	bl	800084c <__aeabi_ddiv>
 8007076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800707a:	e029      	b.n	80070d0 <_dtoa_r+0x3d8>
 800707c:	2502      	movs	r5, #2
 800707e:	e7f2      	b.n	8007066 <_dtoa_r+0x36e>
 8007080:	07f9      	lsls	r1, r7, #31
 8007082:	d508      	bpl.n	8007096 <_dtoa_r+0x39e>
 8007084:	ec51 0b18 	vmov	r0, r1, d8
 8007088:	e9d6 2300 	ldrd	r2, r3, [r6]
 800708c:	f7f9 fab4 	bl	80005f8 <__aeabi_dmul>
 8007090:	ec41 0b18 	vmov	d8, r0, r1
 8007094:	3501      	adds	r5, #1
 8007096:	107f      	asrs	r7, r7, #1
 8007098:	3608      	adds	r6, #8
 800709a:	e7e5      	b.n	8007068 <_dtoa_r+0x370>
 800709c:	f000 80a6 	beq.w	80071ec <_dtoa_r+0x4f4>
 80070a0:	f1ca 0600 	rsb	r6, sl, #0
 80070a4:	4ba5      	ldr	r3, [pc, #660]	; (800733c <_dtoa_r+0x644>)
 80070a6:	4fa6      	ldr	r7, [pc, #664]	; (8007340 <_dtoa_r+0x648>)
 80070a8:	f006 020f 	and.w	r2, r6, #15
 80070ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070b8:	f7f9 fa9e 	bl	80005f8 <__aeabi_dmul>
 80070bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c0:	1136      	asrs	r6, r6, #4
 80070c2:	2300      	movs	r3, #0
 80070c4:	2502      	movs	r5, #2
 80070c6:	2e00      	cmp	r6, #0
 80070c8:	f040 8085 	bne.w	80071d6 <_dtoa_r+0x4de>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1d2      	bne.n	8007076 <_dtoa_r+0x37e>
 80070d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 808c 	beq.w	80071f0 <_dtoa_r+0x4f8>
 80070d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070dc:	4b99      	ldr	r3, [pc, #612]	; (8007344 <_dtoa_r+0x64c>)
 80070de:	2200      	movs	r2, #0
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 fcfa 	bl	8000adc <__aeabi_dcmplt>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	f000 8081 	beq.w	80071f0 <_dtoa_r+0x4f8>
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d07d      	beq.n	80071f0 <_dtoa_r+0x4f8>
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	dd3c      	ble.n	8007174 <_dtoa_r+0x47c>
 80070fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	2200      	movs	r2, #0
 8007102:	4b91      	ldr	r3, [pc, #580]	; (8007348 <_dtoa_r+0x650>)
 8007104:	4630      	mov	r0, r6
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fa76 	bl	80005f8 <__aeabi_dmul>
 800710c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007110:	3501      	adds	r5, #1
 8007112:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007116:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800711a:	4628      	mov	r0, r5
 800711c:	f7f9 fa02 	bl	8000524 <__aeabi_i2d>
 8007120:	4632      	mov	r2, r6
 8007122:	463b      	mov	r3, r7
 8007124:	f7f9 fa68 	bl	80005f8 <__aeabi_dmul>
 8007128:	4b88      	ldr	r3, [pc, #544]	; (800734c <_dtoa_r+0x654>)
 800712a:	2200      	movs	r2, #0
 800712c:	f7f9 f8ae 	bl	800028c <__adddf3>
 8007130:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007138:	9303      	str	r3, [sp, #12]
 800713a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d15c      	bne.n	80071fa <_dtoa_r+0x502>
 8007140:	4b83      	ldr	r3, [pc, #524]	; (8007350 <_dtoa_r+0x658>)
 8007142:	2200      	movs	r2, #0
 8007144:	4630      	mov	r0, r6
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 f89e 	bl	8000288 <__aeabi_dsub>
 800714c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007150:	4606      	mov	r6, r0
 8007152:	460f      	mov	r7, r1
 8007154:	f7f9 fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8007158:	2800      	cmp	r0, #0
 800715a:	f040 8296 	bne.w	800768a <_dtoa_r+0x992>
 800715e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007162:	4630      	mov	r0, r6
 8007164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007168:	4639      	mov	r1, r7
 800716a:	f7f9 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800716e:	2800      	cmp	r0, #0
 8007170:	f040 8288 	bne.w	8007684 <_dtoa_r+0x98c>
 8007174:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007178:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800717c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800717e:	2b00      	cmp	r3, #0
 8007180:	f2c0 8158 	blt.w	8007434 <_dtoa_r+0x73c>
 8007184:	f1ba 0f0e 	cmp.w	sl, #14
 8007188:	f300 8154 	bgt.w	8007434 <_dtoa_r+0x73c>
 800718c:	4b6b      	ldr	r3, [pc, #428]	; (800733c <_dtoa_r+0x644>)
 800718e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007192:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	f280 80e3 	bge.w	8007364 <_dtoa_r+0x66c>
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f300 80df 	bgt.w	8007364 <_dtoa_r+0x66c>
 80071a6:	f040 826d 	bne.w	8007684 <_dtoa_r+0x98c>
 80071aa:	4b69      	ldr	r3, [pc, #420]	; (8007350 <_dtoa_r+0x658>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f7f9 fa21 	bl	80005f8 <__aeabi_dmul>
 80071b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ba:	f7f9 fca3 	bl	8000b04 <__aeabi_dcmpge>
 80071be:	9e01      	ldr	r6, [sp, #4]
 80071c0:	4637      	mov	r7, r6
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f040 8243 	bne.w	800764e <_dtoa_r+0x956>
 80071c8:	9d00      	ldr	r5, [sp, #0]
 80071ca:	2331      	movs	r3, #49	; 0x31
 80071cc:	f805 3b01 	strb.w	r3, [r5], #1
 80071d0:	f10a 0a01 	add.w	sl, sl, #1
 80071d4:	e23f      	b.n	8007656 <_dtoa_r+0x95e>
 80071d6:	07f2      	lsls	r2, r6, #31
 80071d8:	d505      	bpl.n	80071e6 <_dtoa_r+0x4ee>
 80071da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071de:	f7f9 fa0b 	bl	80005f8 <__aeabi_dmul>
 80071e2:	3501      	adds	r5, #1
 80071e4:	2301      	movs	r3, #1
 80071e6:	1076      	asrs	r6, r6, #1
 80071e8:	3708      	adds	r7, #8
 80071ea:	e76c      	b.n	80070c6 <_dtoa_r+0x3ce>
 80071ec:	2502      	movs	r5, #2
 80071ee:	e76f      	b.n	80070d0 <_dtoa_r+0x3d8>
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80071f6:	930c      	str	r3, [sp, #48]	; 0x30
 80071f8:	e78d      	b.n	8007116 <_dtoa_r+0x41e>
 80071fa:	9900      	ldr	r1, [sp, #0]
 80071fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007200:	4b4e      	ldr	r3, [pc, #312]	; (800733c <_dtoa_r+0x644>)
 8007202:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007206:	4401      	add	r1, r0
 8007208:	9102      	str	r1, [sp, #8]
 800720a:	9908      	ldr	r1, [sp, #32]
 800720c:	eeb0 8a47 	vmov.f32	s16, s14
 8007210:	eef0 8a67 	vmov.f32	s17, s15
 8007214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800721c:	2900      	cmp	r1, #0
 800721e:	d045      	beq.n	80072ac <_dtoa_r+0x5b4>
 8007220:	494c      	ldr	r1, [pc, #304]	; (8007354 <_dtoa_r+0x65c>)
 8007222:	2000      	movs	r0, #0
 8007224:	f7f9 fb12 	bl	800084c <__aeabi_ddiv>
 8007228:	ec53 2b18 	vmov	r2, r3, d8
 800722c:	f7f9 f82c 	bl	8000288 <__aeabi_dsub>
 8007230:	9d00      	ldr	r5, [sp, #0]
 8007232:	ec41 0b18 	vmov	d8, r0, r1
 8007236:	4639      	mov	r1, r7
 8007238:	4630      	mov	r0, r6
 800723a:	f7f9 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800723e:	900c      	str	r0, [sp, #48]	; 0x30
 8007240:	f7f9 f970 	bl	8000524 <__aeabi_i2d>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 f81c 	bl	8000288 <__aeabi_dsub>
 8007250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007252:	3330      	adds	r3, #48	; 0x30
 8007254:	f805 3b01 	strb.w	r3, [r5], #1
 8007258:	ec53 2b18 	vmov	r2, r3, d8
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	f7f9 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	d165      	bne.n	8007334 <_dtoa_r+0x63c>
 8007268:	4632      	mov	r2, r6
 800726a:	463b      	mov	r3, r7
 800726c:	4935      	ldr	r1, [pc, #212]	; (8007344 <_dtoa_r+0x64c>)
 800726e:	2000      	movs	r0, #0
 8007270:	f7f9 f80a 	bl	8000288 <__aeabi_dsub>
 8007274:	ec53 2b18 	vmov	r2, r3, d8
 8007278:	f7f9 fc30 	bl	8000adc <__aeabi_dcmplt>
 800727c:	2800      	cmp	r0, #0
 800727e:	f040 80b9 	bne.w	80073f4 <_dtoa_r+0x6fc>
 8007282:	9b02      	ldr	r3, [sp, #8]
 8007284:	429d      	cmp	r5, r3
 8007286:	f43f af75 	beq.w	8007174 <_dtoa_r+0x47c>
 800728a:	4b2f      	ldr	r3, [pc, #188]	; (8007348 <_dtoa_r+0x650>)
 800728c:	ec51 0b18 	vmov	r0, r1, d8
 8007290:	2200      	movs	r2, #0
 8007292:	f7f9 f9b1 	bl	80005f8 <__aeabi_dmul>
 8007296:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <_dtoa_r+0x650>)
 8007298:	ec41 0b18 	vmov	d8, r0, r1
 800729c:	2200      	movs	r2, #0
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	f7f9 f9a9 	bl	80005f8 <__aeabi_dmul>
 80072a6:	4606      	mov	r6, r0
 80072a8:	460f      	mov	r7, r1
 80072aa:	e7c4      	b.n	8007236 <_dtoa_r+0x53e>
 80072ac:	ec51 0b17 	vmov	r0, r1, d7
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	9d00      	ldr	r5, [sp, #0]
 80072b8:	930c      	str	r3, [sp, #48]	; 0x30
 80072ba:	ec41 0b18 	vmov	d8, r0, r1
 80072be:	4639      	mov	r1, r7
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7f9 fc49 	bl	8000b58 <__aeabi_d2iz>
 80072c6:	9011      	str	r0, [sp, #68]	; 0x44
 80072c8:	f7f9 f92c 	bl	8000524 <__aeabi_i2d>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f8 ffd8 	bl	8000288 <__aeabi_dsub>
 80072d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072da:	3330      	adds	r3, #48	; 0x30
 80072dc:	f805 3b01 	strb.w	r3, [r5], #1
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	429d      	cmp	r5, r3
 80072e4:	4606      	mov	r6, r0
 80072e6:	460f      	mov	r7, r1
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	d134      	bne.n	8007358 <_dtoa_r+0x660>
 80072ee:	4b19      	ldr	r3, [pc, #100]	; (8007354 <_dtoa_r+0x65c>)
 80072f0:	ec51 0b18 	vmov	r0, r1, d8
 80072f4:	f7f8 ffca 	bl	800028c <__adddf3>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4630      	mov	r0, r6
 80072fe:	4639      	mov	r1, r7
 8007300:	f7f9 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 8007304:	2800      	cmp	r0, #0
 8007306:	d175      	bne.n	80073f4 <_dtoa_r+0x6fc>
 8007308:	ec53 2b18 	vmov	r2, r3, d8
 800730c:	4911      	ldr	r1, [pc, #68]	; (8007354 <_dtoa_r+0x65c>)
 800730e:	2000      	movs	r0, #0
 8007310:	f7f8 ffba 	bl	8000288 <__aeabi_dsub>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4630      	mov	r0, r6
 800731a:	4639      	mov	r1, r7
 800731c:	f7f9 fbde 	bl	8000adc <__aeabi_dcmplt>
 8007320:	2800      	cmp	r0, #0
 8007322:	f43f af27 	beq.w	8007174 <_dtoa_r+0x47c>
 8007326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007328:	1e6b      	subs	r3, r5, #1
 800732a:	930c      	str	r3, [sp, #48]	; 0x30
 800732c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d0f8      	beq.n	8007326 <_dtoa_r+0x62e>
 8007334:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007338:	e04a      	b.n	80073d0 <_dtoa_r+0x6d8>
 800733a:	bf00      	nop
 800733c:	08009200 	.word	0x08009200
 8007340:	080091d8 	.word	0x080091d8
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	40240000 	.word	0x40240000
 800734c:	401c0000 	.word	0x401c0000
 8007350:	40140000 	.word	0x40140000
 8007354:	3fe00000 	.word	0x3fe00000
 8007358:	4baf      	ldr	r3, [pc, #700]	; (8007618 <_dtoa_r+0x920>)
 800735a:	f7f9 f94d 	bl	80005f8 <__aeabi_dmul>
 800735e:	4606      	mov	r6, r0
 8007360:	460f      	mov	r7, r1
 8007362:	e7ac      	b.n	80072be <_dtoa_r+0x5c6>
 8007364:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007368:	9d00      	ldr	r5, [sp, #0]
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 fa6b 	bl	800084c <__aeabi_ddiv>
 8007376:	f7f9 fbef 	bl	8000b58 <__aeabi_d2iz>
 800737a:	9002      	str	r0, [sp, #8]
 800737c:	f7f9 f8d2 	bl	8000524 <__aeabi_i2d>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7f9 f938 	bl	80005f8 <__aeabi_dmul>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4630      	mov	r0, r6
 800738e:	4639      	mov	r1, r7
 8007390:	f7f8 ff7a 	bl	8000288 <__aeabi_dsub>
 8007394:	9e02      	ldr	r6, [sp, #8]
 8007396:	9f01      	ldr	r7, [sp, #4]
 8007398:	3630      	adds	r6, #48	; 0x30
 800739a:	f805 6b01 	strb.w	r6, [r5], #1
 800739e:	9e00      	ldr	r6, [sp, #0]
 80073a0:	1bae      	subs	r6, r5, r6
 80073a2:	42b7      	cmp	r7, r6
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	d137      	bne.n	800741a <_dtoa_r+0x722>
 80073aa:	f7f8 ff6f 	bl	800028c <__adddf3>
 80073ae:	4642      	mov	r2, r8
 80073b0:	464b      	mov	r3, r9
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	f7f9 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 80073ba:	b9c8      	cbnz	r0, 80073f0 <_dtoa_r+0x6f8>
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f9 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 80073c8:	b110      	cbz	r0, 80073d0 <_dtoa_r+0x6d8>
 80073ca:	9b02      	ldr	r3, [sp, #8]
 80073cc:	07d9      	lsls	r1, r3, #31
 80073ce:	d40f      	bmi.n	80073f0 <_dtoa_r+0x6f8>
 80073d0:	4620      	mov	r0, r4
 80073d2:	4659      	mov	r1, fp
 80073d4:	f000 fad6 	bl	8007984 <_Bfree>
 80073d8:	2300      	movs	r3, #0
 80073da:	702b      	strb	r3, [r5, #0]
 80073dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073de:	f10a 0001 	add.w	r0, sl, #1
 80073e2:	6018      	str	r0, [r3, #0]
 80073e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f43f acd8 	beq.w	8006d9c <_dtoa_r+0xa4>
 80073ec:	601d      	str	r5, [r3, #0]
 80073ee:	e4d5      	b.n	8006d9c <_dtoa_r+0xa4>
 80073f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80073f4:	462b      	mov	r3, r5
 80073f6:	461d      	mov	r5, r3
 80073f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073fc:	2a39      	cmp	r2, #57	; 0x39
 80073fe:	d108      	bne.n	8007412 <_dtoa_r+0x71a>
 8007400:	9a00      	ldr	r2, [sp, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d1f7      	bne.n	80073f6 <_dtoa_r+0x6fe>
 8007406:	9a07      	ldr	r2, [sp, #28]
 8007408:	9900      	ldr	r1, [sp, #0]
 800740a:	3201      	adds	r2, #1
 800740c:	9207      	str	r2, [sp, #28]
 800740e:	2230      	movs	r2, #48	; 0x30
 8007410:	700a      	strb	r2, [r1, #0]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	3201      	adds	r2, #1
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e78c      	b.n	8007334 <_dtoa_r+0x63c>
 800741a:	4b7f      	ldr	r3, [pc, #508]	; (8007618 <_dtoa_r+0x920>)
 800741c:	2200      	movs	r2, #0
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	2200      	movs	r2, #0
 8007424:	2300      	movs	r3, #0
 8007426:	4606      	mov	r6, r0
 8007428:	460f      	mov	r7, r1
 800742a:	f7f9 fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800742e:	2800      	cmp	r0, #0
 8007430:	d09b      	beq.n	800736a <_dtoa_r+0x672>
 8007432:	e7cd      	b.n	80073d0 <_dtoa_r+0x6d8>
 8007434:	9a08      	ldr	r2, [sp, #32]
 8007436:	2a00      	cmp	r2, #0
 8007438:	f000 80c4 	beq.w	80075c4 <_dtoa_r+0x8cc>
 800743c:	9a05      	ldr	r2, [sp, #20]
 800743e:	2a01      	cmp	r2, #1
 8007440:	f300 80a8 	bgt.w	8007594 <_dtoa_r+0x89c>
 8007444:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007446:	2a00      	cmp	r2, #0
 8007448:	f000 80a0 	beq.w	800758c <_dtoa_r+0x894>
 800744c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007450:	9e06      	ldr	r6, [sp, #24]
 8007452:	4645      	mov	r5, r8
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	2101      	movs	r1, #1
 8007458:	441a      	add	r2, r3
 800745a:	4620      	mov	r0, r4
 800745c:	4498      	add	r8, r3
 800745e:	9204      	str	r2, [sp, #16]
 8007460:	f000 fb4c 	bl	8007afc <__i2b>
 8007464:	4607      	mov	r7, r0
 8007466:	2d00      	cmp	r5, #0
 8007468:	dd0b      	ble.n	8007482 <_dtoa_r+0x78a>
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd08      	ble.n	8007482 <_dtoa_r+0x78a>
 8007470:	42ab      	cmp	r3, r5
 8007472:	9a04      	ldr	r2, [sp, #16]
 8007474:	bfa8      	it	ge
 8007476:	462b      	movge	r3, r5
 8007478:	eba8 0803 	sub.w	r8, r8, r3
 800747c:	1aed      	subs	r5, r5, r3
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	9304      	str	r3, [sp, #16]
 8007482:	9b06      	ldr	r3, [sp, #24]
 8007484:	b1fb      	cbz	r3, 80074c6 <_dtoa_r+0x7ce>
 8007486:	9b08      	ldr	r3, [sp, #32]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 809f 	beq.w	80075cc <_dtoa_r+0x8d4>
 800748e:	2e00      	cmp	r6, #0
 8007490:	dd11      	ble.n	80074b6 <_dtoa_r+0x7be>
 8007492:	4639      	mov	r1, r7
 8007494:	4632      	mov	r2, r6
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fbec 	bl	8007c74 <__pow5mult>
 800749c:	465a      	mov	r2, fp
 800749e:	4601      	mov	r1, r0
 80074a0:	4607      	mov	r7, r0
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 fb40 	bl	8007b28 <__multiply>
 80074a8:	4659      	mov	r1, fp
 80074aa:	9007      	str	r0, [sp, #28]
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fa69 	bl	8007984 <_Bfree>
 80074b2:	9b07      	ldr	r3, [sp, #28]
 80074b4:	469b      	mov	fp, r3
 80074b6:	9b06      	ldr	r3, [sp, #24]
 80074b8:	1b9a      	subs	r2, r3, r6
 80074ba:	d004      	beq.n	80074c6 <_dtoa_r+0x7ce>
 80074bc:	4659      	mov	r1, fp
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 fbd8 	bl	8007c74 <__pow5mult>
 80074c4:	4683      	mov	fp, r0
 80074c6:	2101      	movs	r1, #1
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fb17 	bl	8007afc <__i2b>
 80074ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	4606      	mov	r6, r0
 80074d4:	dd7c      	ble.n	80075d0 <_dtoa_r+0x8d8>
 80074d6:	461a      	mov	r2, r3
 80074d8:	4601      	mov	r1, r0
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 fbca 	bl	8007c74 <__pow5mult>
 80074e0:	9b05      	ldr	r3, [sp, #20]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	4606      	mov	r6, r0
 80074e6:	dd76      	ble.n	80075d6 <_dtoa_r+0x8de>
 80074e8:	2300      	movs	r3, #0
 80074ea:	9306      	str	r3, [sp, #24]
 80074ec:	6933      	ldr	r3, [r6, #16]
 80074ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074f2:	6918      	ldr	r0, [r3, #16]
 80074f4:	f000 fab2 	bl	8007a5c <__hi0bits>
 80074f8:	f1c0 0020 	rsb	r0, r0, #32
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	4418      	add	r0, r3
 8007500:	f010 001f 	ands.w	r0, r0, #31
 8007504:	f000 8086 	beq.w	8007614 <_dtoa_r+0x91c>
 8007508:	f1c0 0320 	rsb	r3, r0, #32
 800750c:	2b04      	cmp	r3, #4
 800750e:	dd7f      	ble.n	8007610 <_dtoa_r+0x918>
 8007510:	f1c0 001c 	rsb	r0, r0, #28
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	4403      	add	r3, r0
 8007518:	4480      	add	r8, r0
 800751a:	4405      	add	r5, r0
 800751c:	9304      	str	r3, [sp, #16]
 800751e:	f1b8 0f00 	cmp.w	r8, #0
 8007522:	dd05      	ble.n	8007530 <_dtoa_r+0x838>
 8007524:	4659      	mov	r1, fp
 8007526:	4642      	mov	r2, r8
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fbfd 	bl	8007d28 <__lshift>
 800752e:	4683      	mov	fp, r0
 8007530:	9b04      	ldr	r3, [sp, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dd05      	ble.n	8007542 <_dtoa_r+0x84a>
 8007536:	4631      	mov	r1, r6
 8007538:	461a      	mov	r2, r3
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fbf4 	bl	8007d28 <__lshift>
 8007540:	4606      	mov	r6, r0
 8007542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007544:	2b00      	cmp	r3, #0
 8007546:	d069      	beq.n	800761c <_dtoa_r+0x924>
 8007548:	4631      	mov	r1, r6
 800754a:	4658      	mov	r0, fp
 800754c:	f000 fc58 	bl	8007e00 <__mcmp>
 8007550:	2800      	cmp	r0, #0
 8007552:	da63      	bge.n	800761c <_dtoa_r+0x924>
 8007554:	2300      	movs	r3, #0
 8007556:	4659      	mov	r1, fp
 8007558:	220a      	movs	r2, #10
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fa34 	bl	80079c8 <__multadd>
 8007560:	9b08      	ldr	r3, [sp, #32]
 8007562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007566:	4683      	mov	fp, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 818f 	beq.w	800788c <_dtoa_r+0xb94>
 800756e:	4639      	mov	r1, r7
 8007570:	2300      	movs	r3, #0
 8007572:	220a      	movs	r2, #10
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fa27 	bl	80079c8 <__multadd>
 800757a:	f1b9 0f00 	cmp.w	r9, #0
 800757e:	4607      	mov	r7, r0
 8007580:	f300 808e 	bgt.w	80076a0 <_dtoa_r+0x9a8>
 8007584:	9b05      	ldr	r3, [sp, #20]
 8007586:	2b02      	cmp	r3, #2
 8007588:	dc50      	bgt.n	800762c <_dtoa_r+0x934>
 800758a:	e089      	b.n	80076a0 <_dtoa_r+0x9a8>
 800758c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800758e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007592:	e75d      	b.n	8007450 <_dtoa_r+0x758>
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	1e5e      	subs	r6, r3, #1
 8007598:	9b06      	ldr	r3, [sp, #24]
 800759a:	42b3      	cmp	r3, r6
 800759c:	bfbf      	itttt	lt
 800759e:	9b06      	ldrlt	r3, [sp, #24]
 80075a0:	9606      	strlt	r6, [sp, #24]
 80075a2:	1af2      	sublt	r2, r6, r3
 80075a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80075a6:	bfb6      	itet	lt
 80075a8:	189b      	addlt	r3, r3, r2
 80075aa:	1b9e      	subge	r6, r3, r6
 80075ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	bfb8      	it	lt
 80075b2:	2600      	movlt	r6, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfb5      	itete	lt
 80075b8:	eba8 0503 	sublt.w	r5, r8, r3
 80075bc:	9b01      	ldrge	r3, [sp, #4]
 80075be:	2300      	movlt	r3, #0
 80075c0:	4645      	movge	r5, r8
 80075c2:	e747      	b.n	8007454 <_dtoa_r+0x75c>
 80075c4:	9e06      	ldr	r6, [sp, #24]
 80075c6:	9f08      	ldr	r7, [sp, #32]
 80075c8:	4645      	mov	r5, r8
 80075ca:	e74c      	b.n	8007466 <_dtoa_r+0x76e>
 80075cc:	9a06      	ldr	r2, [sp, #24]
 80075ce:	e775      	b.n	80074bc <_dtoa_r+0x7c4>
 80075d0:	9b05      	ldr	r3, [sp, #20]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	dc18      	bgt.n	8007608 <_dtoa_r+0x910>
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	b9b3      	cbnz	r3, 8007608 <_dtoa_r+0x910>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075e0:	b9a3      	cbnz	r3, 800760c <_dtoa_r+0x914>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075e8:	0d1b      	lsrs	r3, r3, #20
 80075ea:	051b      	lsls	r3, r3, #20
 80075ec:	b12b      	cbz	r3, 80075fa <_dtoa_r+0x902>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	f108 0801 	add.w	r8, r8, #1
 80075f8:	2301      	movs	r3, #1
 80075fa:	9306      	str	r3, [sp, #24]
 80075fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f af74 	bne.w	80074ec <_dtoa_r+0x7f4>
 8007604:	2001      	movs	r0, #1
 8007606:	e779      	b.n	80074fc <_dtoa_r+0x804>
 8007608:	2300      	movs	r3, #0
 800760a:	e7f6      	b.n	80075fa <_dtoa_r+0x902>
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	e7f4      	b.n	80075fa <_dtoa_r+0x902>
 8007610:	d085      	beq.n	800751e <_dtoa_r+0x826>
 8007612:	4618      	mov	r0, r3
 8007614:	301c      	adds	r0, #28
 8007616:	e77d      	b.n	8007514 <_dtoa_r+0x81c>
 8007618:	40240000 	.word	0x40240000
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	dc38      	bgt.n	8007694 <_dtoa_r+0x99c>
 8007622:	9b05      	ldr	r3, [sp, #20]
 8007624:	2b02      	cmp	r3, #2
 8007626:	dd35      	ble.n	8007694 <_dtoa_r+0x99c>
 8007628:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800762c:	f1b9 0f00 	cmp.w	r9, #0
 8007630:	d10d      	bne.n	800764e <_dtoa_r+0x956>
 8007632:	4631      	mov	r1, r6
 8007634:	464b      	mov	r3, r9
 8007636:	2205      	movs	r2, #5
 8007638:	4620      	mov	r0, r4
 800763a:	f000 f9c5 	bl	80079c8 <__multadd>
 800763e:	4601      	mov	r1, r0
 8007640:	4606      	mov	r6, r0
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fbdc 	bl	8007e00 <__mcmp>
 8007648:	2800      	cmp	r0, #0
 800764a:	f73f adbd 	bgt.w	80071c8 <_dtoa_r+0x4d0>
 800764e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007650:	9d00      	ldr	r5, [sp, #0]
 8007652:	ea6f 0a03 	mvn.w	sl, r3
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	4631      	mov	r1, r6
 800765c:	4620      	mov	r0, r4
 800765e:	f000 f991 	bl	8007984 <_Bfree>
 8007662:	2f00      	cmp	r7, #0
 8007664:	f43f aeb4 	beq.w	80073d0 <_dtoa_r+0x6d8>
 8007668:	f1b8 0f00 	cmp.w	r8, #0
 800766c:	d005      	beq.n	800767a <_dtoa_r+0x982>
 800766e:	45b8      	cmp	r8, r7
 8007670:	d003      	beq.n	800767a <_dtoa_r+0x982>
 8007672:	4641      	mov	r1, r8
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f985 	bl	8007984 <_Bfree>
 800767a:	4639      	mov	r1, r7
 800767c:	4620      	mov	r0, r4
 800767e:	f000 f981 	bl	8007984 <_Bfree>
 8007682:	e6a5      	b.n	80073d0 <_dtoa_r+0x6d8>
 8007684:	2600      	movs	r6, #0
 8007686:	4637      	mov	r7, r6
 8007688:	e7e1      	b.n	800764e <_dtoa_r+0x956>
 800768a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800768c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007690:	4637      	mov	r7, r6
 8007692:	e599      	b.n	80071c8 <_dtoa_r+0x4d0>
 8007694:	9b08      	ldr	r3, [sp, #32]
 8007696:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80fd 	beq.w	800789a <_dtoa_r+0xba2>
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	dd05      	ble.n	80076b0 <_dtoa_r+0x9b8>
 80076a4:	4639      	mov	r1, r7
 80076a6:	462a      	mov	r2, r5
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fb3d 	bl	8007d28 <__lshift>
 80076ae:	4607      	mov	r7, r0
 80076b0:	9b06      	ldr	r3, [sp, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d05c      	beq.n	8007770 <_dtoa_r+0xa78>
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 f923 	bl	8007904 <_Balloc>
 80076be:	4605      	mov	r5, r0
 80076c0:	b928      	cbnz	r0, 80076ce <_dtoa_r+0x9d6>
 80076c2:	4b80      	ldr	r3, [pc, #512]	; (80078c4 <_dtoa_r+0xbcc>)
 80076c4:	4602      	mov	r2, r0
 80076c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076ca:	f7ff bb2e 	b.w	8006d2a <_dtoa_r+0x32>
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	3202      	adds	r2, #2
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	f107 010c 	add.w	r1, r7, #12
 80076d8:	300c      	adds	r0, #12
 80076da:	f000 f905 	bl	80078e8 <memcpy>
 80076de:	2201      	movs	r2, #1
 80076e0:	4629      	mov	r1, r5
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fb20 	bl	8007d28 <__lshift>
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	9b00      	ldr	r3, [sp, #0]
 80076f0:	444b      	add	r3, r9
 80076f2:	9307      	str	r3, [sp, #28]
 80076f4:	9b02      	ldr	r3, [sp, #8]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	46b8      	mov	r8, r7
 80076fc:	9306      	str	r3, [sp, #24]
 80076fe:	4607      	mov	r7, r0
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	4631      	mov	r1, r6
 8007704:	3b01      	subs	r3, #1
 8007706:	4658      	mov	r0, fp
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	f7ff fa69 	bl	8006be0 <quorem>
 800770e:	4603      	mov	r3, r0
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	9004      	str	r0, [sp, #16]
 8007714:	4641      	mov	r1, r8
 8007716:	4658      	mov	r0, fp
 8007718:	9308      	str	r3, [sp, #32]
 800771a:	f000 fb71 	bl	8007e00 <__mcmp>
 800771e:	463a      	mov	r2, r7
 8007720:	4681      	mov	r9, r0
 8007722:	4631      	mov	r1, r6
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fb87 	bl	8007e38 <__mdiff>
 800772a:	68c2      	ldr	r2, [r0, #12]
 800772c:	9b08      	ldr	r3, [sp, #32]
 800772e:	4605      	mov	r5, r0
 8007730:	bb02      	cbnz	r2, 8007774 <_dtoa_r+0xa7c>
 8007732:	4601      	mov	r1, r0
 8007734:	4658      	mov	r0, fp
 8007736:	f000 fb63 	bl	8007e00 <__mcmp>
 800773a:	9b08      	ldr	r3, [sp, #32]
 800773c:	4602      	mov	r2, r0
 800773e:	4629      	mov	r1, r5
 8007740:	4620      	mov	r0, r4
 8007742:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007746:	f000 f91d 	bl	8007984 <_Bfree>
 800774a:	9b05      	ldr	r3, [sp, #20]
 800774c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774e:	9d01      	ldr	r5, [sp, #4]
 8007750:	ea43 0102 	orr.w	r1, r3, r2
 8007754:	9b06      	ldr	r3, [sp, #24]
 8007756:	430b      	orrs	r3, r1
 8007758:	9b08      	ldr	r3, [sp, #32]
 800775a:	d10d      	bne.n	8007778 <_dtoa_r+0xa80>
 800775c:	2b39      	cmp	r3, #57	; 0x39
 800775e:	d029      	beq.n	80077b4 <_dtoa_r+0xabc>
 8007760:	f1b9 0f00 	cmp.w	r9, #0
 8007764:	dd01      	ble.n	800776a <_dtoa_r+0xa72>
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	3331      	adds	r3, #49	; 0x31
 800776a:	9a02      	ldr	r2, [sp, #8]
 800776c:	7013      	strb	r3, [r2, #0]
 800776e:	e774      	b.n	800765a <_dtoa_r+0x962>
 8007770:	4638      	mov	r0, r7
 8007772:	e7b9      	b.n	80076e8 <_dtoa_r+0x9f0>
 8007774:	2201      	movs	r2, #1
 8007776:	e7e2      	b.n	800773e <_dtoa_r+0xa46>
 8007778:	f1b9 0f00 	cmp.w	r9, #0
 800777c:	db06      	blt.n	800778c <_dtoa_r+0xa94>
 800777e:	9905      	ldr	r1, [sp, #20]
 8007780:	ea41 0909 	orr.w	r9, r1, r9
 8007784:	9906      	ldr	r1, [sp, #24]
 8007786:	ea59 0101 	orrs.w	r1, r9, r1
 800778a:	d120      	bne.n	80077ce <_dtoa_r+0xad6>
 800778c:	2a00      	cmp	r2, #0
 800778e:	ddec      	ble.n	800776a <_dtoa_r+0xa72>
 8007790:	4659      	mov	r1, fp
 8007792:	2201      	movs	r2, #1
 8007794:	4620      	mov	r0, r4
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	f000 fac6 	bl	8007d28 <__lshift>
 800779c:	4631      	mov	r1, r6
 800779e:	4683      	mov	fp, r0
 80077a0:	f000 fb2e 	bl	8007e00 <__mcmp>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	dc02      	bgt.n	80077b0 <_dtoa_r+0xab8>
 80077aa:	d1de      	bne.n	800776a <_dtoa_r+0xa72>
 80077ac:	07da      	lsls	r2, r3, #31
 80077ae:	d5dc      	bpl.n	800776a <_dtoa_r+0xa72>
 80077b0:	2b39      	cmp	r3, #57	; 0x39
 80077b2:	d1d8      	bne.n	8007766 <_dtoa_r+0xa6e>
 80077b4:	9a02      	ldr	r2, [sp, #8]
 80077b6:	2339      	movs	r3, #57	; 0x39
 80077b8:	7013      	strb	r3, [r2, #0]
 80077ba:	462b      	mov	r3, r5
 80077bc:	461d      	mov	r5, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077c4:	2a39      	cmp	r2, #57	; 0x39
 80077c6:	d050      	beq.n	800786a <_dtoa_r+0xb72>
 80077c8:	3201      	adds	r2, #1
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e745      	b.n	800765a <_dtoa_r+0x962>
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	dd03      	ble.n	80077da <_dtoa_r+0xae2>
 80077d2:	2b39      	cmp	r3, #57	; 0x39
 80077d4:	d0ee      	beq.n	80077b4 <_dtoa_r+0xabc>
 80077d6:	3301      	adds	r3, #1
 80077d8:	e7c7      	b.n	800776a <_dtoa_r+0xa72>
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	9907      	ldr	r1, [sp, #28]
 80077de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077e2:	428a      	cmp	r2, r1
 80077e4:	d02a      	beq.n	800783c <_dtoa_r+0xb44>
 80077e6:	4659      	mov	r1, fp
 80077e8:	2300      	movs	r3, #0
 80077ea:	220a      	movs	r2, #10
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 f8eb 	bl	80079c8 <__multadd>
 80077f2:	45b8      	cmp	r8, r7
 80077f4:	4683      	mov	fp, r0
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	f04f 020a 	mov.w	r2, #10
 80077fe:	4641      	mov	r1, r8
 8007800:	4620      	mov	r0, r4
 8007802:	d107      	bne.n	8007814 <_dtoa_r+0xb1c>
 8007804:	f000 f8e0 	bl	80079c8 <__multadd>
 8007808:	4680      	mov	r8, r0
 800780a:	4607      	mov	r7, r0
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	3301      	adds	r3, #1
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	e775      	b.n	8007700 <_dtoa_r+0xa08>
 8007814:	f000 f8d8 	bl	80079c8 <__multadd>
 8007818:	4639      	mov	r1, r7
 800781a:	4680      	mov	r8, r0
 800781c:	2300      	movs	r3, #0
 800781e:	220a      	movs	r2, #10
 8007820:	4620      	mov	r0, r4
 8007822:	f000 f8d1 	bl	80079c8 <__multadd>
 8007826:	4607      	mov	r7, r0
 8007828:	e7f0      	b.n	800780c <_dtoa_r+0xb14>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	9a00      	ldr	r2, [sp, #0]
 8007830:	bfcc      	ite	gt
 8007832:	464d      	movgt	r5, r9
 8007834:	2501      	movle	r5, #1
 8007836:	4415      	add	r5, r2
 8007838:	f04f 0800 	mov.w	r8, #0
 800783c:	4659      	mov	r1, fp
 800783e:	2201      	movs	r2, #1
 8007840:	4620      	mov	r0, r4
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	f000 fa70 	bl	8007d28 <__lshift>
 8007848:	4631      	mov	r1, r6
 800784a:	4683      	mov	fp, r0
 800784c:	f000 fad8 	bl	8007e00 <__mcmp>
 8007850:	2800      	cmp	r0, #0
 8007852:	dcb2      	bgt.n	80077ba <_dtoa_r+0xac2>
 8007854:	d102      	bne.n	800785c <_dtoa_r+0xb64>
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	07db      	lsls	r3, r3, #31
 800785a:	d4ae      	bmi.n	80077ba <_dtoa_r+0xac2>
 800785c:	462b      	mov	r3, r5
 800785e:	461d      	mov	r5, r3
 8007860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007864:	2a30      	cmp	r2, #48	; 0x30
 8007866:	d0fa      	beq.n	800785e <_dtoa_r+0xb66>
 8007868:	e6f7      	b.n	800765a <_dtoa_r+0x962>
 800786a:	9a00      	ldr	r2, [sp, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d1a5      	bne.n	80077bc <_dtoa_r+0xac4>
 8007870:	f10a 0a01 	add.w	sl, sl, #1
 8007874:	2331      	movs	r3, #49	; 0x31
 8007876:	e779      	b.n	800776c <_dtoa_r+0xa74>
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <_dtoa_r+0xbd0>)
 800787a:	f7ff baaf 	b.w	8006ddc <_dtoa_r+0xe4>
 800787e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007880:	2b00      	cmp	r3, #0
 8007882:	f47f aa86 	bne.w	8006d92 <_dtoa_r+0x9a>
 8007886:	4b11      	ldr	r3, [pc, #68]	; (80078cc <_dtoa_r+0xbd4>)
 8007888:	f7ff baa8 	b.w	8006ddc <_dtoa_r+0xe4>
 800788c:	f1b9 0f00 	cmp.w	r9, #0
 8007890:	dc03      	bgt.n	800789a <_dtoa_r+0xba2>
 8007892:	9b05      	ldr	r3, [sp, #20]
 8007894:	2b02      	cmp	r3, #2
 8007896:	f73f aec9 	bgt.w	800762c <_dtoa_r+0x934>
 800789a:	9d00      	ldr	r5, [sp, #0]
 800789c:	4631      	mov	r1, r6
 800789e:	4658      	mov	r0, fp
 80078a0:	f7ff f99e 	bl	8006be0 <quorem>
 80078a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80078a8:	f805 3b01 	strb.w	r3, [r5], #1
 80078ac:	9a00      	ldr	r2, [sp, #0]
 80078ae:	1aaa      	subs	r2, r5, r2
 80078b0:	4591      	cmp	r9, r2
 80078b2:	ddba      	ble.n	800782a <_dtoa_r+0xb32>
 80078b4:	4659      	mov	r1, fp
 80078b6:	2300      	movs	r3, #0
 80078b8:	220a      	movs	r2, #10
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f884 	bl	80079c8 <__multadd>
 80078c0:	4683      	mov	fp, r0
 80078c2:	e7eb      	b.n	800789c <_dtoa_r+0xba4>
 80078c4:	08009163 	.word	0x08009163
 80078c8:	080090bc 	.word	0x080090bc
 80078cc:	080090e0 	.word	0x080090e0

080078d0 <_localeconv_r>:
 80078d0:	4800      	ldr	r0, [pc, #0]	; (80078d4 <_localeconv_r+0x4>)
 80078d2:	4770      	bx	lr
 80078d4:	20000160 	.word	0x20000160

080078d8 <malloc>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <malloc+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f000 bbef 	b.w	80080c0 <_malloc_r>
 80078e2:	bf00      	nop
 80078e4:	2000000c 	.word	0x2000000c

080078e8 <memcpy>:
 80078e8:	440a      	add	r2, r1
 80078ea:	4291      	cmp	r1, r2
 80078ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80078f0:	d100      	bne.n	80078f4 <memcpy+0xc>
 80078f2:	4770      	bx	lr
 80078f4:	b510      	push	{r4, lr}
 80078f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078fe:	4291      	cmp	r1, r2
 8007900:	d1f9      	bne.n	80078f6 <memcpy+0xe>
 8007902:	bd10      	pop	{r4, pc}

08007904 <_Balloc>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007908:	4604      	mov	r4, r0
 800790a:	460d      	mov	r5, r1
 800790c:	b976      	cbnz	r6, 800792c <_Balloc+0x28>
 800790e:	2010      	movs	r0, #16
 8007910:	f7ff ffe2 	bl	80078d8 <malloc>
 8007914:	4602      	mov	r2, r0
 8007916:	6260      	str	r0, [r4, #36]	; 0x24
 8007918:	b920      	cbnz	r0, 8007924 <_Balloc+0x20>
 800791a:	4b18      	ldr	r3, [pc, #96]	; (800797c <_Balloc+0x78>)
 800791c:	4818      	ldr	r0, [pc, #96]	; (8007980 <_Balloc+0x7c>)
 800791e:	2166      	movs	r1, #102	; 0x66
 8007920:	f000 fd94 	bl	800844c <__assert_func>
 8007924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007928:	6006      	str	r6, [r0, #0]
 800792a:	60c6      	str	r6, [r0, #12]
 800792c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800792e:	68f3      	ldr	r3, [r6, #12]
 8007930:	b183      	cbz	r3, 8007954 <_Balloc+0x50>
 8007932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800793a:	b9b8      	cbnz	r0, 800796c <_Balloc+0x68>
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f605 	lsl.w	r6, r1, r5
 8007942:	1d72      	adds	r2, r6, #5
 8007944:	0092      	lsls	r2, r2, #2
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fb5a 	bl	8008000 <_calloc_r>
 800794c:	b160      	cbz	r0, 8007968 <_Balloc+0x64>
 800794e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007952:	e00e      	b.n	8007972 <_Balloc+0x6e>
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	2104      	movs	r1, #4
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fb51 	bl	8008000 <_calloc_r>
 800795e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007960:	60f0      	str	r0, [r6, #12]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e4      	bne.n	8007932 <_Balloc+0x2e>
 8007968:	2000      	movs	r0, #0
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	6802      	ldr	r2, [r0, #0]
 800796e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007972:	2300      	movs	r3, #0
 8007974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007978:	e7f7      	b.n	800796a <_Balloc+0x66>
 800797a:	bf00      	nop
 800797c:	080090ed 	.word	0x080090ed
 8007980:	08009174 	.word	0x08009174

08007984 <_Bfree>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007988:	4605      	mov	r5, r0
 800798a:	460c      	mov	r4, r1
 800798c:	b976      	cbnz	r6, 80079ac <_Bfree+0x28>
 800798e:	2010      	movs	r0, #16
 8007990:	f7ff ffa2 	bl	80078d8 <malloc>
 8007994:	4602      	mov	r2, r0
 8007996:	6268      	str	r0, [r5, #36]	; 0x24
 8007998:	b920      	cbnz	r0, 80079a4 <_Bfree+0x20>
 800799a:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <_Bfree+0x3c>)
 800799c:	4809      	ldr	r0, [pc, #36]	; (80079c4 <_Bfree+0x40>)
 800799e:	218a      	movs	r1, #138	; 0x8a
 80079a0:	f000 fd54 	bl	800844c <__assert_func>
 80079a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a8:	6006      	str	r6, [r0, #0]
 80079aa:	60c6      	str	r6, [r0, #12]
 80079ac:	b13c      	cbz	r4, 80079be <_Bfree+0x3a>
 80079ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079b0:	6862      	ldr	r2, [r4, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079b8:	6021      	str	r1, [r4, #0]
 80079ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	080090ed 	.word	0x080090ed
 80079c4:	08009174 	.word	0x08009174

080079c8 <__multadd>:
 80079c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079cc:	690e      	ldr	r6, [r1, #16]
 80079ce:	4607      	mov	r7, r0
 80079d0:	4698      	mov	r8, r3
 80079d2:	460c      	mov	r4, r1
 80079d4:	f101 0014 	add.w	r0, r1, #20
 80079d8:	2300      	movs	r3, #0
 80079da:	6805      	ldr	r5, [r0, #0]
 80079dc:	b2a9      	uxth	r1, r5
 80079de:	fb02 8101 	mla	r1, r2, r1, r8
 80079e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80079e6:	0c2d      	lsrs	r5, r5, #16
 80079e8:	fb02 c505 	mla	r5, r2, r5, ip
 80079ec:	b289      	uxth	r1, r1
 80079ee:	3301      	adds	r3, #1
 80079f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80079f4:	429e      	cmp	r6, r3
 80079f6:	f840 1b04 	str.w	r1, [r0], #4
 80079fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80079fe:	dcec      	bgt.n	80079da <__multadd+0x12>
 8007a00:	f1b8 0f00 	cmp.w	r8, #0
 8007a04:	d022      	beq.n	8007a4c <__multadd+0x84>
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	42b3      	cmp	r3, r6
 8007a0a:	dc19      	bgt.n	8007a40 <__multadd+0x78>
 8007a0c:	6861      	ldr	r1, [r4, #4]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	3101      	adds	r1, #1
 8007a12:	f7ff ff77 	bl	8007904 <_Balloc>
 8007a16:	4605      	mov	r5, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__multadd+0x5e>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <__multadd+0x8c>)
 8007a1e:	480e      	ldr	r0, [pc, #56]	; (8007a58 <__multadd+0x90>)
 8007a20:	21b5      	movs	r1, #181	; 0xb5
 8007a22:	f000 fd13 	bl	800844c <__assert_func>
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	3202      	adds	r2, #2
 8007a2a:	f104 010c 	add.w	r1, r4, #12
 8007a2e:	0092      	lsls	r2, r2, #2
 8007a30:	300c      	adds	r0, #12
 8007a32:	f7ff ff59 	bl	80078e8 <memcpy>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ffa3 	bl	8007984 <_Bfree>
 8007a3e:	462c      	mov	r4, r5
 8007a40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a44:	3601      	adds	r6, #1
 8007a46:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a4a:	6126      	str	r6, [r4, #16]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a52:	bf00      	nop
 8007a54:	08009163 	.word	0x08009163
 8007a58:	08009174 	.word	0x08009174

08007a5c <__hi0bits>:
 8007a5c:	0c03      	lsrs	r3, r0, #16
 8007a5e:	041b      	lsls	r3, r3, #16
 8007a60:	b9d3      	cbnz	r3, 8007a98 <__hi0bits+0x3c>
 8007a62:	0400      	lsls	r0, r0, #16
 8007a64:	2310      	movs	r3, #16
 8007a66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a6a:	bf04      	itt	eq
 8007a6c:	0200      	lsleq	r0, r0, #8
 8007a6e:	3308      	addeq	r3, #8
 8007a70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a74:	bf04      	itt	eq
 8007a76:	0100      	lsleq	r0, r0, #4
 8007a78:	3304      	addeq	r3, #4
 8007a7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a7e:	bf04      	itt	eq
 8007a80:	0080      	lsleq	r0, r0, #2
 8007a82:	3302      	addeq	r3, #2
 8007a84:	2800      	cmp	r0, #0
 8007a86:	db05      	blt.n	8007a94 <__hi0bits+0x38>
 8007a88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a8c:	f103 0301 	add.w	r3, r3, #1
 8007a90:	bf08      	it	eq
 8007a92:	2320      	moveq	r3, #32
 8007a94:	4618      	mov	r0, r3
 8007a96:	4770      	bx	lr
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e7e4      	b.n	8007a66 <__hi0bits+0xa>

08007a9c <__lo0bits>:
 8007a9c:	6803      	ldr	r3, [r0, #0]
 8007a9e:	f013 0207 	ands.w	r2, r3, #7
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	d00b      	beq.n	8007abe <__lo0bits+0x22>
 8007aa6:	07da      	lsls	r2, r3, #31
 8007aa8:	d424      	bmi.n	8007af4 <__lo0bits+0x58>
 8007aaa:	0798      	lsls	r0, r3, #30
 8007aac:	bf49      	itett	mi
 8007aae:	085b      	lsrmi	r3, r3, #1
 8007ab0:	089b      	lsrpl	r3, r3, #2
 8007ab2:	2001      	movmi	r0, #1
 8007ab4:	600b      	strmi	r3, [r1, #0]
 8007ab6:	bf5c      	itt	pl
 8007ab8:	600b      	strpl	r3, [r1, #0]
 8007aba:	2002      	movpl	r0, #2
 8007abc:	4770      	bx	lr
 8007abe:	b298      	uxth	r0, r3
 8007ac0:	b9b0      	cbnz	r0, 8007af0 <__lo0bits+0x54>
 8007ac2:	0c1b      	lsrs	r3, r3, #16
 8007ac4:	2010      	movs	r0, #16
 8007ac6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007aca:	bf04      	itt	eq
 8007acc:	0a1b      	lsreq	r3, r3, #8
 8007ace:	3008      	addeq	r0, #8
 8007ad0:	071a      	lsls	r2, r3, #28
 8007ad2:	bf04      	itt	eq
 8007ad4:	091b      	lsreq	r3, r3, #4
 8007ad6:	3004      	addeq	r0, #4
 8007ad8:	079a      	lsls	r2, r3, #30
 8007ada:	bf04      	itt	eq
 8007adc:	089b      	lsreq	r3, r3, #2
 8007ade:	3002      	addeq	r0, #2
 8007ae0:	07da      	lsls	r2, r3, #31
 8007ae2:	d403      	bmi.n	8007aec <__lo0bits+0x50>
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	f100 0001 	add.w	r0, r0, #1
 8007aea:	d005      	beq.n	8007af8 <__lo0bits+0x5c>
 8007aec:	600b      	str	r3, [r1, #0]
 8007aee:	4770      	bx	lr
 8007af0:	4610      	mov	r0, r2
 8007af2:	e7e8      	b.n	8007ac6 <__lo0bits+0x2a>
 8007af4:	2000      	movs	r0, #0
 8007af6:	4770      	bx	lr
 8007af8:	2020      	movs	r0, #32
 8007afa:	4770      	bx	lr

08007afc <__i2b>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	460c      	mov	r4, r1
 8007b00:	2101      	movs	r1, #1
 8007b02:	f7ff feff 	bl	8007904 <_Balloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <__i2b+0x1a>
 8007b0a:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <__i2b+0x24>)
 8007b0c:	4805      	ldr	r0, [pc, #20]	; (8007b24 <__i2b+0x28>)
 8007b0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b12:	f000 fc9b 	bl	800844c <__assert_func>
 8007b16:	2301      	movs	r3, #1
 8007b18:	6144      	str	r4, [r0, #20]
 8007b1a:	6103      	str	r3, [r0, #16]
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	bf00      	nop
 8007b20:	08009163 	.word	0x08009163
 8007b24:	08009174 	.word	0x08009174

08007b28 <__multiply>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	690a      	ldr	r2, [r1, #16]
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	bfb8      	it	lt
 8007b36:	460b      	movlt	r3, r1
 8007b38:	460d      	mov	r5, r1
 8007b3a:	bfbc      	itt	lt
 8007b3c:	4625      	movlt	r5, r4
 8007b3e:	461c      	movlt	r4, r3
 8007b40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b48:	68ab      	ldr	r3, [r5, #8]
 8007b4a:	6869      	ldr	r1, [r5, #4]
 8007b4c:	eb0a 0709 	add.w	r7, sl, r9
 8007b50:	42bb      	cmp	r3, r7
 8007b52:	b085      	sub	sp, #20
 8007b54:	bfb8      	it	lt
 8007b56:	3101      	addlt	r1, #1
 8007b58:	f7ff fed4 	bl	8007904 <_Balloc>
 8007b5c:	b930      	cbnz	r0, 8007b6c <__multiply+0x44>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	4b42      	ldr	r3, [pc, #264]	; (8007c6c <__multiply+0x144>)
 8007b62:	4843      	ldr	r0, [pc, #268]	; (8007c70 <__multiply+0x148>)
 8007b64:	f240 115d 	movw	r1, #349	; 0x15d
 8007b68:	f000 fc70 	bl	800844c <__assert_func>
 8007b6c:	f100 0614 	add.w	r6, r0, #20
 8007b70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007b74:	4633      	mov	r3, r6
 8007b76:	2200      	movs	r2, #0
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	d31e      	bcc.n	8007bba <__multiply+0x92>
 8007b7c:	f105 0c14 	add.w	ip, r5, #20
 8007b80:	f104 0314 	add.w	r3, r4, #20
 8007b84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007b88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007b8c:	9202      	str	r2, [sp, #8]
 8007b8e:	ebac 0205 	sub.w	r2, ip, r5
 8007b92:	3a15      	subs	r2, #21
 8007b94:	f022 0203 	bic.w	r2, r2, #3
 8007b98:	3204      	adds	r2, #4
 8007b9a:	f105 0115 	add.w	r1, r5, #21
 8007b9e:	458c      	cmp	ip, r1
 8007ba0:	bf38      	it	cc
 8007ba2:	2204      	movcc	r2, #4
 8007ba4:	9201      	str	r2, [sp, #4]
 8007ba6:	9a02      	ldr	r2, [sp, #8]
 8007ba8:	9303      	str	r3, [sp, #12]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d808      	bhi.n	8007bc0 <__multiply+0x98>
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	dc55      	bgt.n	8007c5e <__multiply+0x136>
 8007bb2:	6107      	str	r7, [r0, #16]
 8007bb4:	b005      	add	sp, #20
 8007bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bba:	f843 2b04 	str.w	r2, [r3], #4
 8007bbe:	e7db      	b.n	8007b78 <__multiply+0x50>
 8007bc0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bc4:	f1ba 0f00 	cmp.w	sl, #0
 8007bc8:	d020      	beq.n	8007c0c <__multiply+0xe4>
 8007bca:	f105 0e14 	add.w	lr, r5, #20
 8007bce:	46b1      	mov	r9, r6
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007bd6:	f8d9 b000 	ldr.w	fp, [r9]
 8007bda:	b2a1      	uxth	r1, r4
 8007bdc:	fa1f fb8b 	uxth.w	fp, fp
 8007be0:	fb0a b101 	mla	r1, sl, r1, fp
 8007be4:	4411      	add	r1, r2
 8007be6:	f8d9 2000 	ldr.w	r2, [r9]
 8007bea:	0c24      	lsrs	r4, r4, #16
 8007bec:	0c12      	lsrs	r2, r2, #16
 8007bee:	fb0a 2404 	mla	r4, sl, r4, r2
 8007bf2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007bf6:	b289      	uxth	r1, r1
 8007bf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bfc:	45f4      	cmp	ip, lr
 8007bfe:	f849 1b04 	str.w	r1, [r9], #4
 8007c02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c06:	d8e4      	bhi.n	8007bd2 <__multiply+0xaa>
 8007c08:	9901      	ldr	r1, [sp, #4]
 8007c0a:	5072      	str	r2, [r6, r1]
 8007c0c:	9a03      	ldr	r2, [sp, #12]
 8007c0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c12:	3304      	adds	r3, #4
 8007c14:	f1b9 0f00 	cmp.w	r9, #0
 8007c18:	d01f      	beq.n	8007c5a <__multiply+0x132>
 8007c1a:	6834      	ldr	r4, [r6, #0]
 8007c1c:	f105 0114 	add.w	r1, r5, #20
 8007c20:	46b6      	mov	lr, r6
 8007c22:	f04f 0a00 	mov.w	sl, #0
 8007c26:	880a      	ldrh	r2, [r1, #0]
 8007c28:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c2c:	fb09 b202 	mla	r2, r9, r2, fp
 8007c30:	4492      	add	sl, r2
 8007c32:	b2a4      	uxth	r4, r4
 8007c34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c38:	f84e 4b04 	str.w	r4, [lr], #4
 8007c3c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c40:	f8be 2000 	ldrh.w	r2, [lr]
 8007c44:	0c24      	lsrs	r4, r4, #16
 8007c46:	fb09 2404 	mla	r4, r9, r4, r2
 8007c4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c4e:	458c      	cmp	ip, r1
 8007c50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c54:	d8e7      	bhi.n	8007c26 <__multiply+0xfe>
 8007c56:	9a01      	ldr	r2, [sp, #4]
 8007c58:	50b4      	str	r4, [r6, r2]
 8007c5a:	3604      	adds	r6, #4
 8007c5c:	e7a3      	b.n	8007ba6 <__multiply+0x7e>
 8007c5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1a5      	bne.n	8007bb2 <__multiply+0x8a>
 8007c66:	3f01      	subs	r7, #1
 8007c68:	e7a1      	b.n	8007bae <__multiply+0x86>
 8007c6a:	bf00      	nop
 8007c6c:	08009163 	.word	0x08009163
 8007c70:	08009174 	.word	0x08009174

08007c74 <__pow5mult>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	4615      	mov	r5, r2
 8007c7a:	f012 0203 	ands.w	r2, r2, #3
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	d007      	beq.n	8007c94 <__pow5mult+0x20>
 8007c84:	4c25      	ldr	r4, [pc, #148]	; (8007d1c <__pow5mult+0xa8>)
 8007c86:	3a01      	subs	r2, #1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c8e:	f7ff fe9b 	bl	80079c8 <__multadd>
 8007c92:	4607      	mov	r7, r0
 8007c94:	10ad      	asrs	r5, r5, #2
 8007c96:	d03d      	beq.n	8007d14 <__pow5mult+0xa0>
 8007c98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c9a:	b97c      	cbnz	r4, 8007cbc <__pow5mult+0x48>
 8007c9c:	2010      	movs	r0, #16
 8007c9e:	f7ff fe1b 	bl	80078d8 <malloc>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ca6:	b928      	cbnz	r0, 8007cb4 <__pow5mult+0x40>
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <__pow5mult+0xac>)
 8007caa:	481e      	ldr	r0, [pc, #120]	; (8007d24 <__pow5mult+0xb0>)
 8007cac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007cb0:	f000 fbcc 	bl	800844c <__assert_func>
 8007cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cb8:	6004      	str	r4, [r0, #0]
 8007cba:	60c4      	str	r4, [r0, #12]
 8007cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cc4:	b94c      	cbnz	r4, 8007cda <__pow5mult+0x66>
 8007cc6:	f240 2171 	movw	r1, #625	; 0x271
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff ff16 	bl	8007afc <__i2b>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	f04f 0900 	mov.w	r9, #0
 8007cde:	07eb      	lsls	r3, r5, #31
 8007ce0:	d50a      	bpl.n	8007cf8 <__pow5mult+0x84>
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ff1e 	bl	8007b28 <__multiply>
 8007cec:	4639      	mov	r1, r7
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7ff fe47 	bl	8007984 <_Bfree>
 8007cf6:	4647      	mov	r7, r8
 8007cf8:	106d      	asrs	r5, r5, #1
 8007cfa:	d00b      	beq.n	8007d14 <__pow5mult+0xa0>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	b938      	cbnz	r0, 8007d10 <__pow5mult+0x9c>
 8007d00:	4622      	mov	r2, r4
 8007d02:	4621      	mov	r1, r4
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff ff0f 	bl	8007b28 <__multiply>
 8007d0a:	6020      	str	r0, [r4, #0]
 8007d0c:	f8c0 9000 	str.w	r9, [r0]
 8007d10:	4604      	mov	r4, r0
 8007d12:	e7e4      	b.n	8007cde <__pow5mult+0x6a>
 8007d14:	4638      	mov	r0, r7
 8007d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	bf00      	nop
 8007d1c:	080092c8 	.word	0x080092c8
 8007d20:	080090ed 	.word	0x080090ed
 8007d24:	08009174 	.word	0x08009174

08007d28 <__lshift>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	6849      	ldr	r1, [r1, #4]
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	4607      	mov	r7, r0
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d40:	f108 0601 	add.w	r6, r8, #1
 8007d44:	42b3      	cmp	r3, r6
 8007d46:	db0b      	blt.n	8007d60 <__lshift+0x38>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff fddb 	bl	8007904 <_Balloc>
 8007d4e:	4605      	mov	r5, r0
 8007d50:	b948      	cbnz	r0, 8007d66 <__lshift+0x3e>
 8007d52:	4602      	mov	r2, r0
 8007d54:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <__lshift+0xd0>)
 8007d56:	4829      	ldr	r0, [pc, #164]	; (8007dfc <__lshift+0xd4>)
 8007d58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d5c:	f000 fb76 	bl	800844c <__assert_func>
 8007d60:	3101      	adds	r1, #1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	e7ee      	b.n	8007d44 <__lshift+0x1c>
 8007d66:	2300      	movs	r3, #0
 8007d68:	f100 0114 	add.w	r1, r0, #20
 8007d6c:	f100 0210 	add.w	r2, r0, #16
 8007d70:	4618      	mov	r0, r3
 8007d72:	4553      	cmp	r3, sl
 8007d74:	db33      	blt.n	8007dde <__lshift+0xb6>
 8007d76:	6920      	ldr	r0, [r4, #16]
 8007d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d7c:	f104 0314 	add.w	r3, r4, #20
 8007d80:	f019 091f 	ands.w	r9, r9, #31
 8007d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d8c:	d02b      	beq.n	8007de6 <__lshift+0xbe>
 8007d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d92:	468a      	mov	sl, r1
 8007d94:	2200      	movs	r2, #0
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	fa00 f009 	lsl.w	r0, r0, r9
 8007d9c:	4302      	orrs	r2, r0
 8007d9e:	f84a 2b04 	str.w	r2, [sl], #4
 8007da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da6:	459c      	cmp	ip, r3
 8007da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dac:	d8f3      	bhi.n	8007d96 <__lshift+0x6e>
 8007dae:	ebac 0304 	sub.w	r3, ip, r4
 8007db2:	3b15      	subs	r3, #21
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	3304      	adds	r3, #4
 8007dba:	f104 0015 	add.w	r0, r4, #21
 8007dbe:	4584      	cmp	ip, r0
 8007dc0:	bf38      	it	cc
 8007dc2:	2304      	movcc	r3, #4
 8007dc4:	50ca      	str	r2, [r1, r3]
 8007dc6:	b10a      	cbz	r2, 8007dcc <__lshift+0xa4>
 8007dc8:	f108 0602 	add.w	r6, r8, #2
 8007dcc:	3e01      	subs	r6, #1
 8007dce:	4638      	mov	r0, r7
 8007dd0:	612e      	str	r6, [r5, #16]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7ff fdd6 	bl	8007984 <_Bfree>
 8007dd8:	4628      	mov	r0, r5
 8007dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8007de2:	3301      	adds	r3, #1
 8007de4:	e7c5      	b.n	8007d72 <__lshift+0x4a>
 8007de6:	3904      	subs	r1, #4
 8007de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8007df0:	459c      	cmp	ip, r3
 8007df2:	d8f9      	bhi.n	8007de8 <__lshift+0xc0>
 8007df4:	e7ea      	b.n	8007dcc <__lshift+0xa4>
 8007df6:	bf00      	nop
 8007df8:	08009163 	.word	0x08009163
 8007dfc:	08009174 	.word	0x08009174

08007e00 <__mcmp>:
 8007e00:	b530      	push	{r4, r5, lr}
 8007e02:	6902      	ldr	r2, [r0, #16]
 8007e04:	690c      	ldr	r4, [r1, #16]
 8007e06:	1b12      	subs	r2, r2, r4
 8007e08:	d10e      	bne.n	8007e28 <__mcmp+0x28>
 8007e0a:	f100 0314 	add.w	r3, r0, #20
 8007e0e:	3114      	adds	r1, #20
 8007e10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e20:	42a5      	cmp	r5, r4
 8007e22:	d003      	beq.n	8007e2c <__mcmp+0x2c>
 8007e24:	d305      	bcc.n	8007e32 <__mcmp+0x32>
 8007e26:	2201      	movs	r2, #1
 8007e28:	4610      	mov	r0, r2
 8007e2a:	bd30      	pop	{r4, r5, pc}
 8007e2c:	4283      	cmp	r3, r0
 8007e2e:	d3f3      	bcc.n	8007e18 <__mcmp+0x18>
 8007e30:	e7fa      	b.n	8007e28 <__mcmp+0x28>
 8007e32:	f04f 32ff 	mov.w	r2, #4294967295
 8007e36:	e7f7      	b.n	8007e28 <__mcmp+0x28>

08007e38 <__mdiff>:
 8007e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	4606      	mov	r6, r0
 8007e40:	4611      	mov	r1, r2
 8007e42:	4620      	mov	r0, r4
 8007e44:	4617      	mov	r7, r2
 8007e46:	f7ff ffdb 	bl	8007e00 <__mcmp>
 8007e4a:	1e05      	subs	r5, r0, #0
 8007e4c:	d110      	bne.n	8007e70 <__mdiff+0x38>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff fd57 	bl	8007904 <_Balloc>
 8007e56:	b930      	cbnz	r0, 8007e66 <__mdiff+0x2e>
 8007e58:	4b39      	ldr	r3, [pc, #228]	; (8007f40 <__mdiff+0x108>)
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	f240 2132 	movw	r1, #562	; 0x232
 8007e60:	4838      	ldr	r0, [pc, #224]	; (8007f44 <__mdiff+0x10c>)
 8007e62:	f000 faf3 	bl	800844c <__assert_func>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	bfa4      	itt	ge
 8007e72:	463b      	movge	r3, r7
 8007e74:	4627      	movge	r7, r4
 8007e76:	4630      	mov	r0, r6
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	bfa6      	itte	ge
 8007e7c:	461c      	movge	r4, r3
 8007e7e:	2500      	movge	r5, #0
 8007e80:	2501      	movlt	r5, #1
 8007e82:	f7ff fd3f 	bl	8007904 <_Balloc>
 8007e86:	b920      	cbnz	r0, 8007e92 <__mdiff+0x5a>
 8007e88:	4b2d      	ldr	r3, [pc, #180]	; (8007f40 <__mdiff+0x108>)
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e90:	e7e6      	b.n	8007e60 <__mdiff+0x28>
 8007e92:	693e      	ldr	r6, [r7, #16]
 8007e94:	60c5      	str	r5, [r0, #12]
 8007e96:	6925      	ldr	r5, [r4, #16]
 8007e98:	f107 0114 	add.w	r1, r7, #20
 8007e9c:	f104 0914 	add.w	r9, r4, #20
 8007ea0:	f100 0e14 	add.w	lr, r0, #20
 8007ea4:	f107 0210 	add.w	r2, r7, #16
 8007ea8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007eac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007eb0:	46f2      	mov	sl, lr
 8007eb2:	2700      	movs	r7, #0
 8007eb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007eb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ebc:	fa1f f883 	uxth.w	r8, r3
 8007ec0:	fa17 f78b 	uxtah	r7, r7, fp
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	eba7 0808 	sub.w	r8, r7, r8
 8007eca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ece:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ed2:	fa1f f888 	uxth.w	r8, r8
 8007ed6:	141f      	asrs	r7, r3, #16
 8007ed8:	454d      	cmp	r5, r9
 8007eda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ede:	f84a 3b04 	str.w	r3, [sl], #4
 8007ee2:	d8e7      	bhi.n	8007eb4 <__mdiff+0x7c>
 8007ee4:	1b2b      	subs	r3, r5, r4
 8007ee6:	3b15      	subs	r3, #21
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	3304      	adds	r3, #4
 8007eee:	3415      	adds	r4, #21
 8007ef0:	42a5      	cmp	r5, r4
 8007ef2:	bf38      	it	cc
 8007ef4:	2304      	movcc	r3, #4
 8007ef6:	4419      	add	r1, r3
 8007ef8:	4473      	add	r3, lr
 8007efa:	469e      	mov	lr, r3
 8007efc:	460d      	mov	r5, r1
 8007efe:	4565      	cmp	r5, ip
 8007f00:	d30e      	bcc.n	8007f20 <__mdiff+0xe8>
 8007f02:	f10c 0203 	add.w	r2, ip, #3
 8007f06:	1a52      	subs	r2, r2, r1
 8007f08:	f022 0203 	bic.w	r2, r2, #3
 8007f0c:	3903      	subs	r1, #3
 8007f0e:	458c      	cmp	ip, r1
 8007f10:	bf38      	it	cc
 8007f12:	2200      	movcc	r2, #0
 8007f14:	441a      	add	r2, r3
 8007f16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f1a:	b17b      	cbz	r3, 8007f3c <__mdiff+0x104>
 8007f1c:	6106      	str	r6, [r0, #16]
 8007f1e:	e7a5      	b.n	8007e6c <__mdiff+0x34>
 8007f20:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f24:	fa17 f488 	uxtah	r4, r7, r8
 8007f28:	1422      	asrs	r2, r4, #16
 8007f2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007f2e:	b2a4      	uxth	r4, r4
 8007f30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f34:	f84e 4b04 	str.w	r4, [lr], #4
 8007f38:	1417      	asrs	r7, r2, #16
 8007f3a:	e7e0      	b.n	8007efe <__mdiff+0xc6>
 8007f3c:	3e01      	subs	r6, #1
 8007f3e:	e7ea      	b.n	8007f16 <__mdiff+0xde>
 8007f40:	08009163 	.word	0x08009163
 8007f44:	08009174 	.word	0x08009174

08007f48 <__d2b>:
 8007f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	4689      	mov	r9, r1
 8007f4e:	2101      	movs	r1, #1
 8007f50:	ec57 6b10 	vmov	r6, r7, d0
 8007f54:	4690      	mov	r8, r2
 8007f56:	f7ff fcd5 	bl	8007904 <_Balloc>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b930      	cbnz	r0, 8007f6c <__d2b+0x24>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <__d2b+0xb0>)
 8007f62:	4826      	ldr	r0, [pc, #152]	; (8007ffc <__d2b+0xb4>)
 8007f64:	f240 310a 	movw	r1, #778	; 0x30a
 8007f68:	f000 fa70 	bl	800844c <__assert_func>
 8007f6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f74:	bb35      	cbnz	r5, 8007fc4 <__d2b+0x7c>
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	d028      	beq.n	8007fce <__d2b+0x86>
 8007f7c:	4668      	mov	r0, sp
 8007f7e:	9600      	str	r6, [sp, #0]
 8007f80:	f7ff fd8c 	bl	8007a9c <__lo0bits>
 8007f84:	9900      	ldr	r1, [sp, #0]
 8007f86:	b300      	cbz	r0, 8007fca <__d2b+0x82>
 8007f88:	9a01      	ldr	r2, [sp, #4]
 8007f8a:	f1c0 0320 	rsb	r3, r0, #32
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	430b      	orrs	r3, r1
 8007f94:	40c2      	lsrs	r2, r0
 8007f96:	6163      	str	r3, [r4, #20]
 8007f98:	9201      	str	r2, [sp, #4]
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	61a3      	str	r3, [r4, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2202      	movne	r2, #2
 8007fa4:	2201      	moveq	r2, #1
 8007fa6:	6122      	str	r2, [r4, #16]
 8007fa8:	b1d5      	cbz	r5, 8007fe0 <__d2b+0x98>
 8007faa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fae:	4405      	add	r5, r0
 8007fb0:	f8c9 5000 	str.w	r5, [r9]
 8007fb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fb8:	f8c8 0000 	str.w	r0, [r8]
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	b003      	add	sp, #12
 8007fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc8:	e7d5      	b.n	8007f76 <__d2b+0x2e>
 8007fca:	6161      	str	r1, [r4, #20]
 8007fcc:	e7e5      	b.n	8007f9a <__d2b+0x52>
 8007fce:	a801      	add	r0, sp, #4
 8007fd0:	f7ff fd64 	bl	8007a9c <__lo0bits>
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	6163      	str	r3, [r4, #20]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	6122      	str	r2, [r4, #16]
 8007fdc:	3020      	adds	r0, #32
 8007fde:	e7e3      	b.n	8007fa8 <__d2b+0x60>
 8007fe0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fe8:	f8c9 0000 	str.w	r0, [r9]
 8007fec:	6918      	ldr	r0, [r3, #16]
 8007fee:	f7ff fd35 	bl	8007a5c <__hi0bits>
 8007ff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ff6:	e7df      	b.n	8007fb8 <__d2b+0x70>
 8007ff8:	08009163 	.word	0x08009163
 8007ffc:	08009174 	.word	0x08009174

08008000 <_calloc_r>:
 8008000:	b513      	push	{r0, r1, r4, lr}
 8008002:	434a      	muls	r2, r1
 8008004:	4611      	mov	r1, r2
 8008006:	9201      	str	r2, [sp, #4]
 8008008:	f000 f85a 	bl	80080c0 <_malloc_r>
 800800c:	4604      	mov	r4, r0
 800800e:	b118      	cbz	r0, 8008018 <_calloc_r+0x18>
 8008010:	9a01      	ldr	r2, [sp, #4]
 8008012:	2100      	movs	r1, #0
 8008014:	f7fe f952 	bl	80062bc <memset>
 8008018:	4620      	mov	r0, r4
 800801a:	b002      	add	sp, #8
 800801c:	bd10      	pop	{r4, pc}
	...

08008020 <_free_r>:
 8008020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008022:	2900      	cmp	r1, #0
 8008024:	d048      	beq.n	80080b8 <_free_r+0x98>
 8008026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f1a1 0404 	sub.w	r4, r1, #4
 8008032:	bfb8      	it	lt
 8008034:	18e4      	addlt	r4, r4, r3
 8008036:	f000 fa65 	bl	8008504 <__malloc_lock>
 800803a:	4a20      	ldr	r2, [pc, #128]	; (80080bc <_free_r+0x9c>)
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	4615      	mov	r5, r2
 8008042:	b933      	cbnz	r3, 8008052 <_free_r+0x32>
 8008044:	6063      	str	r3, [r4, #4]
 8008046:	6014      	str	r4, [r2, #0]
 8008048:	b003      	add	sp, #12
 800804a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800804e:	f000 ba5f 	b.w	8008510 <__malloc_unlock>
 8008052:	42a3      	cmp	r3, r4
 8008054:	d90b      	bls.n	800806e <_free_r+0x4e>
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	1862      	adds	r2, r4, r1
 800805a:	4293      	cmp	r3, r2
 800805c:	bf04      	itt	eq
 800805e:	681a      	ldreq	r2, [r3, #0]
 8008060:	685b      	ldreq	r3, [r3, #4]
 8008062:	6063      	str	r3, [r4, #4]
 8008064:	bf04      	itt	eq
 8008066:	1852      	addeq	r2, r2, r1
 8008068:	6022      	streq	r2, [r4, #0]
 800806a:	602c      	str	r4, [r5, #0]
 800806c:	e7ec      	b.n	8008048 <_free_r+0x28>
 800806e:	461a      	mov	r2, r3
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b10b      	cbz	r3, 8008078 <_free_r+0x58>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d9fa      	bls.n	800806e <_free_r+0x4e>
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	1855      	adds	r5, r2, r1
 800807c:	42a5      	cmp	r5, r4
 800807e:	d10b      	bne.n	8008098 <_free_r+0x78>
 8008080:	6824      	ldr	r4, [r4, #0]
 8008082:	4421      	add	r1, r4
 8008084:	1854      	adds	r4, r2, r1
 8008086:	42a3      	cmp	r3, r4
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	d1dd      	bne.n	8008048 <_free_r+0x28>
 800808c:	681c      	ldr	r4, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	6053      	str	r3, [r2, #4]
 8008092:	4421      	add	r1, r4
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	e7d7      	b.n	8008048 <_free_r+0x28>
 8008098:	d902      	bls.n	80080a0 <_free_r+0x80>
 800809a:	230c      	movs	r3, #12
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	e7d3      	b.n	8008048 <_free_r+0x28>
 80080a0:	6825      	ldr	r5, [r4, #0]
 80080a2:	1961      	adds	r1, r4, r5
 80080a4:	428b      	cmp	r3, r1
 80080a6:	bf04      	itt	eq
 80080a8:	6819      	ldreq	r1, [r3, #0]
 80080aa:	685b      	ldreq	r3, [r3, #4]
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	bf04      	itt	eq
 80080b0:	1949      	addeq	r1, r1, r5
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	6054      	str	r4, [r2, #4]
 80080b6:	e7c7      	b.n	8008048 <_free_r+0x28>
 80080b8:	b003      	add	sp, #12
 80080ba:	bd30      	pop	{r4, r5, pc}
 80080bc:	20000204 	.word	0x20000204

080080c0 <_malloc_r>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	1ccd      	adds	r5, r1, #3
 80080c4:	f025 0503 	bic.w	r5, r5, #3
 80080c8:	3508      	adds	r5, #8
 80080ca:	2d0c      	cmp	r5, #12
 80080cc:	bf38      	it	cc
 80080ce:	250c      	movcc	r5, #12
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	4606      	mov	r6, r0
 80080d4:	db01      	blt.n	80080da <_malloc_r+0x1a>
 80080d6:	42a9      	cmp	r1, r5
 80080d8:	d903      	bls.n	80080e2 <_malloc_r+0x22>
 80080da:	230c      	movs	r3, #12
 80080dc:	6033      	str	r3, [r6, #0]
 80080de:	2000      	movs	r0, #0
 80080e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e2:	f000 fa0f 	bl	8008504 <__malloc_lock>
 80080e6:	4921      	ldr	r1, [pc, #132]	; (800816c <_malloc_r+0xac>)
 80080e8:	680a      	ldr	r2, [r1, #0]
 80080ea:	4614      	mov	r4, r2
 80080ec:	b99c      	cbnz	r4, 8008116 <_malloc_r+0x56>
 80080ee:	4f20      	ldr	r7, [pc, #128]	; (8008170 <_malloc_r+0xb0>)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	b923      	cbnz	r3, 80080fe <_malloc_r+0x3e>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 f998 	bl	800842c <_sbrk_r>
 80080fc:	6038      	str	r0, [r7, #0]
 80080fe:	4629      	mov	r1, r5
 8008100:	4630      	mov	r0, r6
 8008102:	f000 f993 	bl	800842c <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d123      	bne.n	8008152 <_malloc_r+0x92>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	4630      	mov	r0, r6
 8008110:	f000 f9fe 	bl	8008510 <__malloc_unlock>
 8008114:	e7e3      	b.n	80080de <_malloc_r+0x1e>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	1b5b      	subs	r3, r3, r5
 800811a:	d417      	bmi.n	800814c <_malloc_r+0x8c>
 800811c:	2b0b      	cmp	r3, #11
 800811e:	d903      	bls.n	8008128 <_malloc_r+0x68>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	441c      	add	r4, r3
 8008124:	6025      	str	r5, [r4, #0]
 8008126:	e004      	b.n	8008132 <_malloc_r+0x72>
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	42a2      	cmp	r2, r4
 800812c:	bf0c      	ite	eq
 800812e:	600b      	streq	r3, [r1, #0]
 8008130:	6053      	strne	r3, [r2, #4]
 8008132:	4630      	mov	r0, r6
 8008134:	f000 f9ec 	bl	8008510 <__malloc_unlock>
 8008138:	f104 000b 	add.w	r0, r4, #11
 800813c:	1d23      	adds	r3, r4, #4
 800813e:	f020 0007 	bic.w	r0, r0, #7
 8008142:	1ac2      	subs	r2, r0, r3
 8008144:	d0cc      	beq.n	80080e0 <_malloc_r+0x20>
 8008146:	1a1b      	subs	r3, r3, r0
 8008148:	50a3      	str	r3, [r4, r2]
 800814a:	e7c9      	b.n	80080e0 <_malloc_r+0x20>
 800814c:	4622      	mov	r2, r4
 800814e:	6864      	ldr	r4, [r4, #4]
 8008150:	e7cc      	b.n	80080ec <_malloc_r+0x2c>
 8008152:	1cc4      	adds	r4, r0, #3
 8008154:	f024 0403 	bic.w	r4, r4, #3
 8008158:	42a0      	cmp	r0, r4
 800815a:	d0e3      	beq.n	8008124 <_malloc_r+0x64>
 800815c:	1a21      	subs	r1, r4, r0
 800815e:	4630      	mov	r0, r6
 8008160:	f000 f964 	bl	800842c <_sbrk_r>
 8008164:	3001      	adds	r0, #1
 8008166:	d1dd      	bne.n	8008124 <_malloc_r+0x64>
 8008168:	e7cf      	b.n	800810a <_malloc_r+0x4a>
 800816a:	bf00      	nop
 800816c:	20000204 	.word	0x20000204
 8008170:	20000208 	.word	0x20000208

08008174 <__ssputs_r>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	688e      	ldr	r6, [r1, #8]
 800817a:	429e      	cmp	r6, r3
 800817c:	4682      	mov	sl, r0
 800817e:	460c      	mov	r4, r1
 8008180:	4690      	mov	r8, r2
 8008182:	461f      	mov	r7, r3
 8008184:	d838      	bhi.n	80081f8 <__ssputs_r+0x84>
 8008186:	898a      	ldrh	r2, [r1, #12]
 8008188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800818c:	d032      	beq.n	80081f4 <__ssputs_r+0x80>
 800818e:	6825      	ldr	r5, [r4, #0]
 8008190:	6909      	ldr	r1, [r1, #16]
 8008192:	eba5 0901 	sub.w	r9, r5, r1
 8008196:	6965      	ldr	r5, [r4, #20]
 8008198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800819c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081a0:	3301      	adds	r3, #1
 80081a2:	444b      	add	r3, r9
 80081a4:	106d      	asrs	r5, r5, #1
 80081a6:	429d      	cmp	r5, r3
 80081a8:	bf38      	it	cc
 80081aa:	461d      	movcc	r5, r3
 80081ac:	0553      	lsls	r3, r2, #21
 80081ae:	d531      	bpl.n	8008214 <__ssputs_r+0xa0>
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7ff ff85 	bl	80080c0 <_malloc_r>
 80081b6:	4606      	mov	r6, r0
 80081b8:	b950      	cbnz	r0, 80081d0 <__ssputs_r+0x5c>
 80081ba:	230c      	movs	r3, #12
 80081bc:	f8ca 3000 	str.w	r3, [sl]
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c6:	81a3      	strh	r3, [r4, #12]
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d0:	6921      	ldr	r1, [r4, #16]
 80081d2:	464a      	mov	r2, r9
 80081d4:	f7ff fb88 	bl	80078e8 <memcpy>
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	6126      	str	r6, [r4, #16]
 80081e6:	6165      	str	r5, [r4, #20]
 80081e8:	444e      	add	r6, r9
 80081ea:	eba5 0509 	sub.w	r5, r5, r9
 80081ee:	6026      	str	r6, [r4, #0]
 80081f0:	60a5      	str	r5, [r4, #8]
 80081f2:	463e      	mov	r6, r7
 80081f4:	42be      	cmp	r6, r7
 80081f6:	d900      	bls.n	80081fa <__ssputs_r+0x86>
 80081f8:	463e      	mov	r6, r7
 80081fa:	4632      	mov	r2, r6
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	4641      	mov	r1, r8
 8008200:	f000 f966 	bl	80084d0 <memmove>
 8008204:	68a3      	ldr	r3, [r4, #8]
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	4432      	add	r2, r6
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	6022      	str	r2, [r4, #0]
 8008210:	2000      	movs	r0, #0
 8008212:	e7db      	b.n	80081cc <__ssputs_r+0x58>
 8008214:	462a      	mov	r2, r5
 8008216:	f000 f981 	bl	800851c <_realloc_r>
 800821a:	4606      	mov	r6, r0
 800821c:	2800      	cmp	r0, #0
 800821e:	d1e1      	bne.n	80081e4 <__ssputs_r+0x70>
 8008220:	6921      	ldr	r1, [r4, #16]
 8008222:	4650      	mov	r0, sl
 8008224:	f7ff fefc 	bl	8008020 <_free_r>
 8008228:	e7c7      	b.n	80081ba <__ssputs_r+0x46>
	...

0800822c <_svfiprintf_r>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4698      	mov	r8, r3
 8008232:	898b      	ldrh	r3, [r1, #12]
 8008234:	061b      	lsls	r3, r3, #24
 8008236:	b09d      	sub	sp, #116	; 0x74
 8008238:	4607      	mov	r7, r0
 800823a:	460d      	mov	r5, r1
 800823c:	4614      	mov	r4, r2
 800823e:	d50e      	bpl.n	800825e <_svfiprintf_r+0x32>
 8008240:	690b      	ldr	r3, [r1, #16]
 8008242:	b963      	cbnz	r3, 800825e <_svfiprintf_r+0x32>
 8008244:	2140      	movs	r1, #64	; 0x40
 8008246:	f7ff ff3b 	bl	80080c0 <_malloc_r>
 800824a:	6028      	str	r0, [r5, #0]
 800824c:	6128      	str	r0, [r5, #16]
 800824e:	b920      	cbnz	r0, 800825a <_svfiprintf_r+0x2e>
 8008250:	230c      	movs	r3, #12
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e0d1      	b.n	80083fe <_svfiprintf_r+0x1d2>
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	616b      	str	r3, [r5, #20]
 800825e:	2300      	movs	r3, #0
 8008260:	9309      	str	r3, [sp, #36]	; 0x24
 8008262:	2320      	movs	r3, #32
 8008264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008268:	f8cd 800c 	str.w	r8, [sp, #12]
 800826c:	2330      	movs	r3, #48	; 0x30
 800826e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008418 <_svfiprintf_r+0x1ec>
 8008272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008276:	f04f 0901 	mov.w	r9, #1
 800827a:	4623      	mov	r3, r4
 800827c:	469a      	mov	sl, r3
 800827e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008282:	b10a      	cbz	r2, 8008288 <_svfiprintf_r+0x5c>
 8008284:	2a25      	cmp	r2, #37	; 0x25
 8008286:	d1f9      	bne.n	800827c <_svfiprintf_r+0x50>
 8008288:	ebba 0b04 	subs.w	fp, sl, r4
 800828c:	d00b      	beq.n	80082a6 <_svfiprintf_r+0x7a>
 800828e:	465b      	mov	r3, fp
 8008290:	4622      	mov	r2, r4
 8008292:	4629      	mov	r1, r5
 8008294:	4638      	mov	r0, r7
 8008296:	f7ff ff6d 	bl	8008174 <__ssputs_r>
 800829a:	3001      	adds	r0, #1
 800829c:	f000 80aa 	beq.w	80083f4 <_svfiprintf_r+0x1c8>
 80082a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a2:	445a      	add	r2, fp
 80082a4:	9209      	str	r2, [sp, #36]	; 0x24
 80082a6:	f89a 3000 	ldrb.w	r3, [sl]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80a2 	beq.w	80083f4 <_svfiprintf_r+0x1c8>
 80082b0:	2300      	movs	r3, #0
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ba:	f10a 0a01 	add.w	sl, sl, #1
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	9307      	str	r3, [sp, #28]
 80082c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c6:	931a      	str	r3, [sp, #104]	; 0x68
 80082c8:	4654      	mov	r4, sl
 80082ca:	2205      	movs	r2, #5
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	4851      	ldr	r0, [pc, #324]	; (8008418 <_svfiprintf_r+0x1ec>)
 80082d2:	f7f7 ff85 	bl	80001e0 <memchr>
 80082d6:	9a04      	ldr	r2, [sp, #16]
 80082d8:	b9d8      	cbnz	r0, 8008312 <_svfiprintf_r+0xe6>
 80082da:	06d0      	lsls	r0, r2, #27
 80082dc:	bf44      	itt	mi
 80082de:	2320      	movmi	r3, #32
 80082e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e4:	0711      	lsls	r1, r2, #28
 80082e6:	bf44      	itt	mi
 80082e8:	232b      	movmi	r3, #43	; 0x2b
 80082ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ee:	f89a 3000 	ldrb.w	r3, [sl]
 80082f2:	2b2a      	cmp	r3, #42	; 0x2a
 80082f4:	d015      	beq.n	8008322 <_svfiprintf_r+0xf6>
 80082f6:	9a07      	ldr	r2, [sp, #28]
 80082f8:	4654      	mov	r4, sl
 80082fa:	2000      	movs	r0, #0
 80082fc:	f04f 0c0a 	mov.w	ip, #10
 8008300:	4621      	mov	r1, r4
 8008302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008306:	3b30      	subs	r3, #48	; 0x30
 8008308:	2b09      	cmp	r3, #9
 800830a:	d94e      	bls.n	80083aa <_svfiprintf_r+0x17e>
 800830c:	b1b0      	cbz	r0, 800833c <_svfiprintf_r+0x110>
 800830e:	9207      	str	r2, [sp, #28]
 8008310:	e014      	b.n	800833c <_svfiprintf_r+0x110>
 8008312:	eba0 0308 	sub.w	r3, r0, r8
 8008316:	fa09 f303 	lsl.w	r3, r9, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	46a2      	mov	sl, r4
 8008320:	e7d2      	b.n	80082c8 <_svfiprintf_r+0x9c>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	1d19      	adds	r1, r3, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	9103      	str	r1, [sp, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfbb      	ittet	lt
 800832e:	425b      	neglt	r3, r3
 8008330:	f042 0202 	orrlt.w	r2, r2, #2
 8008334:	9307      	strge	r3, [sp, #28]
 8008336:	9307      	strlt	r3, [sp, #28]
 8008338:	bfb8      	it	lt
 800833a:	9204      	strlt	r2, [sp, #16]
 800833c:	7823      	ldrb	r3, [r4, #0]
 800833e:	2b2e      	cmp	r3, #46	; 0x2e
 8008340:	d10c      	bne.n	800835c <_svfiprintf_r+0x130>
 8008342:	7863      	ldrb	r3, [r4, #1]
 8008344:	2b2a      	cmp	r3, #42	; 0x2a
 8008346:	d135      	bne.n	80083b4 <_svfiprintf_r+0x188>
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	9203      	str	r2, [sp, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	bfb8      	it	lt
 8008354:	f04f 33ff 	movlt.w	r3, #4294967295
 8008358:	3402      	adds	r4, #2
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008428 <_svfiprintf_r+0x1fc>
 8008360:	7821      	ldrb	r1, [r4, #0]
 8008362:	2203      	movs	r2, #3
 8008364:	4650      	mov	r0, sl
 8008366:	f7f7 ff3b 	bl	80001e0 <memchr>
 800836a:	b140      	cbz	r0, 800837e <_svfiprintf_r+0x152>
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	eba0 000a 	sub.w	r0, r0, sl
 8008372:	fa03 f000 	lsl.w	r0, r3, r0
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	4303      	orrs	r3, r0
 800837a:	3401      	adds	r4, #1
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008382:	4826      	ldr	r0, [pc, #152]	; (800841c <_svfiprintf_r+0x1f0>)
 8008384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008388:	2206      	movs	r2, #6
 800838a:	f7f7 ff29 	bl	80001e0 <memchr>
 800838e:	2800      	cmp	r0, #0
 8008390:	d038      	beq.n	8008404 <_svfiprintf_r+0x1d8>
 8008392:	4b23      	ldr	r3, [pc, #140]	; (8008420 <_svfiprintf_r+0x1f4>)
 8008394:	bb1b      	cbnz	r3, 80083de <_svfiprintf_r+0x1b2>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	3307      	adds	r3, #7
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	3308      	adds	r3, #8
 80083a0:	9303      	str	r3, [sp, #12]
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	4433      	add	r3, r6
 80083a6:	9309      	str	r3, [sp, #36]	; 0x24
 80083a8:	e767      	b.n	800827a <_svfiprintf_r+0x4e>
 80083aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ae:	460c      	mov	r4, r1
 80083b0:	2001      	movs	r0, #1
 80083b2:	e7a5      	b.n	8008300 <_svfiprintf_r+0xd4>
 80083b4:	2300      	movs	r3, #0
 80083b6:	3401      	adds	r4, #1
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	4619      	mov	r1, r3
 80083bc:	f04f 0c0a 	mov.w	ip, #10
 80083c0:	4620      	mov	r0, r4
 80083c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c6:	3a30      	subs	r2, #48	; 0x30
 80083c8:	2a09      	cmp	r2, #9
 80083ca:	d903      	bls.n	80083d4 <_svfiprintf_r+0x1a8>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0c5      	beq.n	800835c <_svfiprintf_r+0x130>
 80083d0:	9105      	str	r1, [sp, #20]
 80083d2:	e7c3      	b.n	800835c <_svfiprintf_r+0x130>
 80083d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d8:	4604      	mov	r4, r0
 80083da:	2301      	movs	r3, #1
 80083dc:	e7f0      	b.n	80083c0 <_svfiprintf_r+0x194>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <_svfiprintf_r+0x1f8>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7fe f80f 	bl	800640c <_printf_float>
 80083ee:	1c42      	adds	r2, r0, #1
 80083f0:	4606      	mov	r6, r0
 80083f2:	d1d6      	bne.n	80083a2 <_svfiprintf_r+0x176>
 80083f4:	89ab      	ldrh	r3, [r5, #12]
 80083f6:	065b      	lsls	r3, r3, #25
 80083f8:	f53f af2c 	bmi.w	8008254 <_svfiprintf_r+0x28>
 80083fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083fe:	b01d      	add	sp, #116	; 0x74
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	ab03      	add	r3, sp, #12
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	462a      	mov	r2, r5
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <_svfiprintf_r+0x1f8>)
 800840c:	a904      	add	r1, sp, #16
 800840e:	4638      	mov	r0, r7
 8008410:	f7fe faa0 	bl	8006954 <_printf_i>
 8008414:	e7eb      	b.n	80083ee <_svfiprintf_r+0x1c2>
 8008416:	bf00      	nop
 8008418:	080092d4 	.word	0x080092d4
 800841c:	080092de 	.word	0x080092de
 8008420:	0800640d 	.word	0x0800640d
 8008424:	08008175 	.word	0x08008175
 8008428:	080092da 	.word	0x080092da

0800842c <_sbrk_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_sbrk_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f9 fa52 	bl	80018e0 <_sbrk>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_sbrk_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_sbrk_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20000548 	.word	0x20000548

0800844c <__assert_func>:
 800844c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800844e:	4614      	mov	r4, r2
 8008450:	461a      	mov	r2, r3
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <__assert_func+0x2c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4605      	mov	r5, r0
 8008458:	68d8      	ldr	r0, [r3, #12]
 800845a:	b14c      	cbz	r4, 8008470 <__assert_func+0x24>
 800845c:	4b07      	ldr	r3, [pc, #28]	; (800847c <__assert_func+0x30>)
 800845e:	9100      	str	r1, [sp, #0]
 8008460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008464:	4906      	ldr	r1, [pc, #24]	; (8008480 <__assert_func+0x34>)
 8008466:	462b      	mov	r3, r5
 8008468:	f000 f80e 	bl	8008488 <fiprintf>
 800846c:	f000 faa4 	bl	80089b8 <abort>
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <__assert_func+0x38>)
 8008472:	461c      	mov	r4, r3
 8008474:	e7f3      	b.n	800845e <__assert_func+0x12>
 8008476:	bf00      	nop
 8008478:	2000000c 	.word	0x2000000c
 800847c:	080092e5 	.word	0x080092e5
 8008480:	080092f2 	.word	0x080092f2
 8008484:	08009320 	.word	0x08009320

08008488 <fiprintf>:
 8008488:	b40e      	push	{r1, r2, r3}
 800848a:	b503      	push	{r0, r1, lr}
 800848c:	4601      	mov	r1, r0
 800848e:	ab03      	add	r3, sp, #12
 8008490:	4805      	ldr	r0, [pc, #20]	; (80084a8 <fiprintf+0x20>)
 8008492:	f853 2b04 	ldr.w	r2, [r3], #4
 8008496:	6800      	ldr	r0, [r0, #0]
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	f000 f88f 	bl	80085bc <_vfiprintf_r>
 800849e:	b002      	add	sp, #8
 80084a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a4:	b003      	add	sp, #12
 80084a6:	4770      	bx	lr
 80084a8:	2000000c 	.word	0x2000000c

080084ac <__ascii_mbtowc>:
 80084ac:	b082      	sub	sp, #8
 80084ae:	b901      	cbnz	r1, 80084b2 <__ascii_mbtowc+0x6>
 80084b0:	a901      	add	r1, sp, #4
 80084b2:	b142      	cbz	r2, 80084c6 <__ascii_mbtowc+0x1a>
 80084b4:	b14b      	cbz	r3, 80084ca <__ascii_mbtowc+0x1e>
 80084b6:	7813      	ldrb	r3, [r2, #0]
 80084b8:	600b      	str	r3, [r1, #0]
 80084ba:	7812      	ldrb	r2, [r2, #0]
 80084bc:	1e10      	subs	r0, r2, #0
 80084be:	bf18      	it	ne
 80084c0:	2001      	movne	r0, #1
 80084c2:	b002      	add	sp, #8
 80084c4:	4770      	bx	lr
 80084c6:	4610      	mov	r0, r2
 80084c8:	e7fb      	b.n	80084c2 <__ascii_mbtowc+0x16>
 80084ca:	f06f 0001 	mvn.w	r0, #1
 80084ce:	e7f8      	b.n	80084c2 <__ascii_mbtowc+0x16>

080084d0 <memmove>:
 80084d0:	4288      	cmp	r0, r1
 80084d2:	b510      	push	{r4, lr}
 80084d4:	eb01 0402 	add.w	r4, r1, r2
 80084d8:	d902      	bls.n	80084e0 <memmove+0x10>
 80084da:	4284      	cmp	r4, r0
 80084dc:	4623      	mov	r3, r4
 80084de:	d807      	bhi.n	80084f0 <memmove+0x20>
 80084e0:	1e43      	subs	r3, r0, #1
 80084e2:	42a1      	cmp	r1, r4
 80084e4:	d008      	beq.n	80084f8 <memmove+0x28>
 80084e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ee:	e7f8      	b.n	80084e2 <memmove+0x12>
 80084f0:	4402      	add	r2, r0
 80084f2:	4601      	mov	r1, r0
 80084f4:	428a      	cmp	r2, r1
 80084f6:	d100      	bne.n	80084fa <memmove+0x2a>
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008502:	e7f7      	b.n	80084f4 <memmove+0x24>

08008504 <__malloc_lock>:
 8008504:	4801      	ldr	r0, [pc, #4]	; (800850c <__malloc_lock+0x8>)
 8008506:	f000 bc17 	b.w	8008d38 <__retarget_lock_acquire_recursive>
 800850a:	bf00      	nop
 800850c:	20000550 	.word	0x20000550

08008510 <__malloc_unlock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_unlock+0x8>)
 8008512:	f000 bc12 	b.w	8008d3a <__retarget_lock_release_recursive>
 8008516:	bf00      	nop
 8008518:	20000550 	.word	0x20000550

0800851c <_realloc_r>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	4607      	mov	r7, r0
 8008520:	4614      	mov	r4, r2
 8008522:	460e      	mov	r6, r1
 8008524:	b921      	cbnz	r1, 8008530 <_realloc_r+0x14>
 8008526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800852a:	4611      	mov	r1, r2
 800852c:	f7ff bdc8 	b.w	80080c0 <_malloc_r>
 8008530:	b922      	cbnz	r2, 800853c <_realloc_r+0x20>
 8008532:	f7ff fd75 	bl	8008020 <_free_r>
 8008536:	4625      	mov	r5, r4
 8008538:	4628      	mov	r0, r5
 800853a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800853c:	f000 fc62 	bl	8008e04 <_malloc_usable_size_r>
 8008540:	42a0      	cmp	r0, r4
 8008542:	d20f      	bcs.n	8008564 <_realloc_r+0x48>
 8008544:	4621      	mov	r1, r4
 8008546:	4638      	mov	r0, r7
 8008548:	f7ff fdba 	bl	80080c0 <_malloc_r>
 800854c:	4605      	mov	r5, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d0f2      	beq.n	8008538 <_realloc_r+0x1c>
 8008552:	4631      	mov	r1, r6
 8008554:	4622      	mov	r2, r4
 8008556:	f7ff f9c7 	bl	80078e8 <memcpy>
 800855a:	4631      	mov	r1, r6
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff fd5f 	bl	8008020 <_free_r>
 8008562:	e7e9      	b.n	8008538 <_realloc_r+0x1c>
 8008564:	4635      	mov	r5, r6
 8008566:	e7e7      	b.n	8008538 <_realloc_r+0x1c>

08008568 <__sfputc_r>:
 8008568:	6893      	ldr	r3, [r2, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	b410      	push	{r4}
 8008570:	6093      	str	r3, [r2, #8]
 8008572:	da08      	bge.n	8008586 <__sfputc_r+0x1e>
 8008574:	6994      	ldr	r4, [r2, #24]
 8008576:	42a3      	cmp	r3, r4
 8008578:	db01      	blt.n	800857e <__sfputc_r+0x16>
 800857a:	290a      	cmp	r1, #10
 800857c:	d103      	bne.n	8008586 <__sfputc_r+0x1e>
 800857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008582:	f000 b94b 	b.w	800881c <__swbuf_r>
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	1c58      	adds	r0, r3, #1
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	7019      	strb	r1, [r3, #0]
 800858e:	4608      	mov	r0, r1
 8008590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008594:	4770      	bx	lr

08008596 <__sfputs_r>:
 8008596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008598:	4606      	mov	r6, r0
 800859a:	460f      	mov	r7, r1
 800859c:	4614      	mov	r4, r2
 800859e:	18d5      	adds	r5, r2, r3
 80085a0:	42ac      	cmp	r4, r5
 80085a2:	d101      	bne.n	80085a8 <__sfputs_r+0x12>
 80085a4:	2000      	movs	r0, #0
 80085a6:	e007      	b.n	80085b8 <__sfputs_r+0x22>
 80085a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ac:	463a      	mov	r2, r7
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7ff ffda 	bl	8008568 <__sfputc_r>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d1f3      	bne.n	80085a0 <__sfputs_r+0xa>
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085bc <_vfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	460d      	mov	r5, r1
 80085c2:	b09d      	sub	sp, #116	; 0x74
 80085c4:	4614      	mov	r4, r2
 80085c6:	4698      	mov	r8, r3
 80085c8:	4606      	mov	r6, r0
 80085ca:	b118      	cbz	r0, 80085d4 <_vfiprintf_r+0x18>
 80085cc:	6983      	ldr	r3, [r0, #24]
 80085ce:	b90b      	cbnz	r3, 80085d4 <_vfiprintf_r+0x18>
 80085d0:	f000 fb14 	bl	8008bfc <__sinit>
 80085d4:	4b89      	ldr	r3, [pc, #548]	; (80087fc <_vfiprintf_r+0x240>)
 80085d6:	429d      	cmp	r5, r3
 80085d8:	d11b      	bne.n	8008612 <_vfiprintf_r+0x56>
 80085da:	6875      	ldr	r5, [r6, #4]
 80085dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	d405      	bmi.n	80085ee <_vfiprintf_r+0x32>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	059a      	lsls	r2, r3, #22
 80085e6:	d402      	bmi.n	80085ee <_vfiprintf_r+0x32>
 80085e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ea:	f000 fba5 	bl	8008d38 <__retarget_lock_acquire_recursive>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	071b      	lsls	r3, r3, #28
 80085f2:	d501      	bpl.n	80085f8 <_vfiprintf_r+0x3c>
 80085f4:	692b      	ldr	r3, [r5, #16]
 80085f6:	b9eb      	cbnz	r3, 8008634 <_vfiprintf_r+0x78>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f000 f96e 	bl	80088dc <__swsetup_r>
 8008600:	b1c0      	cbz	r0, 8008634 <_vfiprintf_r+0x78>
 8008602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008604:	07dc      	lsls	r4, r3, #31
 8008606:	d50e      	bpl.n	8008626 <_vfiprintf_r+0x6a>
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	b01d      	add	sp, #116	; 0x74
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	4b7b      	ldr	r3, [pc, #492]	; (8008800 <_vfiprintf_r+0x244>)
 8008614:	429d      	cmp	r5, r3
 8008616:	d101      	bne.n	800861c <_vfiprintf_r+0x60>
 8008618:	68b5      	ldr	r5, [r6, #8]
 800861a:	e7df      	b.n	80085dc <_vfiprintf_r+0x20>
 800861c:	4b79      	ldr	r3, [pc, #484]	; (8008804 <_vfiprintf_r+0x248>)
 800861e:	429d      	cmp	r5, r3
 8008620:	bf08      	it	eq
 8008622:	68f5      	ldreq	r5, [r6, #12]
 8008624:	e7da      	b.n	80085dc <_vfiprintf_r+0x20>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	0598      	lsls	r0, r3, #22
 800862a:	d4ed      	bmi.n	8008608 <_vfiprintf_r+0x4c>
 800862c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862e:	f000 fb84 	bl	8008d3a <__retarget_lock_release_recursive>
 8008632:	e7e9      	b.n	8008608 <_vfiprintf_r+0x4c>
 8008634:	2300      	movs	r3, #0
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	2320      	movs	r3, #32
 800863a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800863e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008642:	2330      	movs	r3, #48	; 0x30
 8008644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008808 <_vfiprintf_r+0x24c>
 8008648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800864c:	f04f 0901 	mov.w	r9, #1
 8008650:	4623      	mov	r3, r4
 8008652:	469a      	mov	sl, r3
 8008654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008658:	b10a      	cbz	r2, 800865e <_vfiprintf_r+0xa2>
 800865a:	2a25      	cmp	r2, #37	; 0x25
 800865c:	d1f9      	bne.n	8008652 <_vfiprintf_r+0x96>
 800865e:	ebba 0b04 	subs.w	fp, sl, r4
 8008662:	d00b      	beq.n	800867c <_vfiprintf_r+0xc0>
 8008664:	465b      	mov	r3, fp
 8008666:	4622      	mov	r2, r4
 8008668:	4629      	mov	r1, r5
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ff93 	bl	8008596 <__sfputs_r>
 8008670:	3001      	adds	r0, #1
 8008672:	f000 80aa 	beq.w	80087ca <_vfiprintf_r+0x20e>
 8008676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008678:	445a      	add	r2, fp
 800867a:	9209      	str	r2, [sp, #36]	; 0x24
 800867c:	f89a 3000 	ldrb.w	r3, [sl]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80a2 	beq.w	80087ca <_vfiprintf_r+0x20e>
 8008686:	2300      	movs	r3, #0
 8008688:	f04f 32ff 	mov.w	r2, #4294967295
 800868c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008690:	f10a 0a01 	add.w	sl, sl, #1
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800869c:	931a      	str	r3, [sp, #104]	; 0x68
 800869e:	4654      	mov	r4, sl
 80086a0:	2205      	movs	r2, #5
 80086a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a6:	4858      	ldr	r0, [pc, #352]	; (8008808 <_vfiprintf_r+0x24c>)
 80086a8:	f7f7 fd9a 	bl	80001e0 <memchr>
 80086ac:	9a04      	ldr	r2, [sp, #16]
 80086ae:	b9d8      	cbnz	r0, 80086e8 <_vfiprintf_r+0x12c>
 80086b0:	06d1      	lsls	r1, r2, #27
 80086b2:	bf44      	itt	mi
 80086b4:	2320      	movmi	r3, #32
 80086b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ba:	0713      	lsls	r3, r2, #28
 80086bc:	bf44      	itt	mi
 80086be:	232b      	movmi	r3, #43	; 0x2b
 80086c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086c4:	f89a 3000 	ldrb.w	r3, [sl]
 80086c8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ca:	d015      	beq.n	80086f8 <_vfiprintf_r+0x13c>
 80086cc:	9a07      	ldr	r2, [sp, #28]
 80086ce:	4654      	mov	r4, sl
 80086d0:	2000      	movs	r0, #0
 80086d2:	f04f 0c0a 	mov.w	ip, #10
 80086d6:	4621      	mov	r1, r4
 80086d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086dc:	3b30      	subs	r3, #48	; 0x30
 80086de:	2b09      	cmp	r3, #9
 80086e0:	d94e      	bls.n	8008780 <_vfiprintf_r+0x1c4>
 80086e2:	b1b0      	cbz	r0, 8008712 <_vfiprintf_r+0x156>
 80086e4:	9207      	str	r2, [sp, #28]
 80086e6:	e014      	b.n	8008712 <_vfiprintf_r+0x156>
 80086e8:	eba0 0308 	sub.w	r3, r0, r8
 80086ec:	fa09 f303 	lsl.w	r3, r9, r3
 80086f0:	4313      	orrs	r3, r2
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	46a2      	mov	sl, r4
 80086f6:	e7d2      	b.n	800869e <_vfiprintf_r+0xe2>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	1d19      	adds	r1, r3, #4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	9103      	str	r1, [sp, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bfbb      	ittet	lt
 8008704:	425b      	neglt	r3, r3
 8008706:	f042 0202 	orrlt.w	r2, r2, #2
 800870a:	9307      	strge	r3, [sp, #28]
 800870c:	9307      	strlt	r3, [sp, #28]
 800870e:	bfb8      	it	lt
 8008710:	9204      	strlt	r2, [sp, #16]
 8008712:	7823      	ldrb	r3, [r4, #0]
 8008714:	2b2e      	cmp	r3, #46	; 0x2e
 8008716:	d10c      	bne.n	8008732 <_vfiprintf_r+0x176>
 8008718:	7863      	ldrb	r3, [r4, #1]
 800871a:	2b2a      	cmp	r3, #42	; 0x2a
 800871c:	d135      	bne.n	800878a <_vfiprintf_r+0x1ce>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9203      	str	r2, [sp, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfb8      	it	lt
 800872a:	f04f 33ff 	movlt.w	r3, #4294967295
 800872e:	3402      	adds	r4, #2
 8008730:	9305      	str	r3, [sp, #20]
 8008732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008818 <_vfiprintf_r+0x25c>
 8008736:	7821      	ldrb	r1, [r4, #0]
 8008738:	2203      	movs	r2, #3
 800873a:	4650      	mov	r0, sl
 800873c:	f7f7 fd50 	bl	80001e0 <memchr>
 8008740:	b140      	cbz	r0, 8008754 <_vfiprintf_r+0x198>
 8008742:	2340      	movs	r3, #64	; 0x40
 8008744:	eba0 000a 	sub.w	r0, r0, sl
 8008748:	fa03 f000 	lsl.w	r0, r3, r0
 800874c:	9b04      	ldr	r3, [sp, #16]
 800874e:	4303      	orrs	r3, r0
 8008750:	3401      	adds	r4, #1
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008758:	482c      	ldr	r0, [pc, #176]	; (800880c <_vfiprintf_r+0x250>)
 800875a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800875e:	2206      	movs	r2, #6
 8008760:	f7f7 fd3e 	bl	80001e0 <memchr>
 8008764:	2800      	cmp	r0, #0
 8008766:	d03f      	beq.n	80087e8 <_vfiprintf_r+0x22c>
 8008768:	4b29      	ldr	r3, [pc, #164]	; (8008810 <_vfiprintf_r+0x254>)
 800876a:	bb1b      	cbnz	r3, 80087b4 <_vfiprintf_r+0x1f8>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	3307      	adds	r3, #7
 8008770:	f023 0307 	bic.w	r3, r3, #7
 8008774:	3308      	adds	r3, #8
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877a:	443b      	add	r3, r7
 800877c:	9309      	str	r3, [sp, #36]	; 0x24
 800877e:	e767      	b.n	8008650 <_vfiprintf_r+0x94>
 8008780:	fb0c 3202 	mla	r2, ip, r2, r3
 8008784:	460c      	mov	r4, r1
 8008786:	2001      	movs	r0, #1
 8008788:	e7a5      	b.n	80086d6 <_vfiprintf_r+0x11a>
 800878a:	2300      	movs	r3, #0
 800878c:	3401      	adds	r4, #1
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	4619      	mov	r1, r3
 8008792:	f04f 0c0a 	mov.w	ip, #10
 8008796:	4620      	mov	r0, r4
 8008798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800879c:	3a30      	subs	r2, #48	; 0x30
 800879e:	2a09      	cmp	r2, #9
 80087a0:	d903      	bls.n	80087aa <_vfiprintf_r+0x1ee>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0c5      	beq.n	8008732 <_vfiprintf_r+0x176>
 80087a6:	9105      	str	r1, [sp, #20]
 80087a8:	e7c3      	b.n	8008732 <_vfiprintf_r+0x176>
 80087aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ae:	4604      	mov	r4, r0
 80087b0:	2301      	movs	r3, #1
 80087b2:	e7f0      	b.n	8008796 <_vfiprintf_r+0x1da>
 80087b4:	ab03      	add	r3, sp, #12
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	462a      	mov	r2, r5
 80087ba:	4b16      	ldr	r3, [pc, #88]	; (8008814 <_vfiprintf_r+0x258>)
 80087bc:	a904      	add	r1, sp, #16
 80087be:	4630      	mov	r0, r6
 80087c0:	f7fd fe24 	bl	800640c <_printf_float>
 80087c4:	4607      	mov	r7, r0
 80087c6:	1c78      	adds	r0, r7, #1
 80087c8:	d1d6      	bne.n	8008778 <_vfiprintf_r+0x1bc>
 80087ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087cc:	07d9      	lsls	r1, r3, #31
 80087ce:	d405      	bmi.n	80087dc <_vfiprintf_r+0x220>
 80087d0:	89ab      	ldrh	r3, [r5, #12]
 80087d2:	059a      	lsls	r2, r3, #22
 80087d4:	d402      	bmi.n	80087dc <_vfiprintf_r+0x220>
 80087d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d8:	f000 faaf 	bl	8008d3a <__retarget_lock_release_recursive>
 80087dc:	89ab      	ldrh	r3, [r5, #12]
 80087de:	065b      	lsls	r3, r3, #25
 80087e0:	f53f af12 	bmi.w	8008608 <_vfiprintf_r+0x4c>
 80087e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087e6:	e711      	b.n	800860c <_vfiprintf_r+0x50>
 80087e8:	ab03      	add	r3, sp, #12
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	462a      	mov	r2, r5
 80087ee:	4b09      	ldr	r3, [pc, #36]	; (8008814 <_vfiprintf_r+0x258>)
 80087f0:	a904      	add	r1, sp, #16
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7fe f8ae 	bl	8006954 <_printf_i>
 80087f8:	e7e4      	b.n	80087c4 <_vfiprintf_r+0x208>
 80087fa:	bf00      	nop
 80087fc:	0800944c 	.word	0x0800944c
 8008800:	0800946c 	.word	0x0800946c
 8008804:	0800942c 	.word	0x0800942c
 8008808:	080092d4 	.word	0x080092d4
 800880c:	080092de 	.word	0x080092de
 8008810:	0800640d 	.word	0x0800640d
 8008814:	08008597 	.word	0x08008597
 8008818:	080092da 	.word	0x080092da

0800881c <__swbuf_r>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	460e      	mov	r6, r1
 8008820:	4614      	mov	r4, r2
 8008822:	4605      	mov	r5, r0
 8008824:	b118      	cbz	r0, 800882e <__swbuf_r+0x12>
 8008826:	6983      	ldr	r3, [r0, #24]
 8008828:	b90b      	cbnz	r3, 800882e <__swbuf_r+0x12>
 800882a:	f000 f9e7 	bl	8008bfc <__sinit>
 800882e:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <__swbuf_r+0x98>)
 8008830:	429c      	cmp	r4, r3
 8008832:	d12b      	bne.n	800888c <__swbuf_r+0x70>
 8008834:	686c      	ldr	r4, [r5, #4]
 8008836:	69a3      	ldr	r3, [r4, #24]
 8008838:	60a3      	str	r3, [r4, #8]
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	071a      	lsls	r2, r3, #28
 800883e:	d52f      	bpl.n	80088a0 <__swbuf_r+0x84>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	b36b      	cbz	r3, 80088a0 <__swbuf_r+0x84>
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	6820      	ldr	r0, [r4, #0]
 8008848:	1ac0      	subs	r0, r0, r3
 800884a:	6963      	ldr	r3, [r4, #20]
 800884c:	b2f6      	uxtb	r6, r6
 800884e:	4283      	cmp	r3, r0
 8008850:	4637      	mov	r7, r6
 8008852:	dc04      	bgt.n	800885e <__swbuf_r+0x42>
 8008854:	4621      	mov	r1, r4
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f93c 	bl	8008ad4 <_fflush_r>
 800885c:	bb30      	cbnz	r0, 80088ac <__swbuf_r+0x90>
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	3b01      	subs	r3, #1
 8008862:	60a3      	str	r3, [r4, #8]
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	6022      	str	r2, [r4, #0]
 800886a:	701e      	strb	r6, [r3, #0]
 800886c:	6963      	ldr	r3, [r4, #20]
 800886e:	3001      	adds	r0, #1
 8008870:	4283      	cmp	r3, r0
 8008872:	d004      	beq.n	800887e <__swbuf_r+0x62>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	07db      	lsls	r3, r3, #31
 8008878:	d506      	bpl.n	8008888 <__swbuf_r+0x6c>
 800887a:	2e0a      	cmp	r6, #10
 800887c:	d104      	bne.n	8008888 <__swbuf_r+0x6c>
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 f927 	bl	8008ad4 <_fflush_r>
 8008886:	b988      	cbnz	r0, 80088ac <__swbuf_r+0x90>
 8008888:	4638      	mov	r0, r7
 800888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888c:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <__swbuf_r+0x9c>)
 800888e:	429c      	cmp	r4, r3
 8008890:	d101      	bne.n	8008896 <__swbuf_r+0x7a>
 8008892:	68ac      	ldr	r4, [r5, #8]
 8008894:	e7cf      	b.n	8008836 <__swbuf_r+0x1a>
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <__swbuf_r+0xa0>)
 8008898:	429c      	cmp	r4, r3
 800889a:	bf08      	it	eq
 800889c:	68ec      	ldreq	r4, [r5, #12]
 800889e:	e7ca      	b.n	8008836 <__swbuf_r+0x1a>
 80088a0:	4621      	mov	r1, r4
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 f81a 	bl	80088dc <__swsetup_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d0cb      	beq.n	8008844 <__swbuf_r+0x28>
 80088ac:	f04f 37ff 	mov.w	r7, #4294967295
 80088b0:	e7ea      	b.n	8008888 <__swbuf_r+0x6c>
 80088b2:	bf00      	nop
 80088b4:	0800944c 	.word	0x0800944c
 80088b8:	0800946c 	.word	0x0800946c
 80088bc:	0800942c 	.word	0x0800942c

080088c0 <__ascii_wctomb>:
 80088c0:	b149      	cbz	r1, 80088d6 <__ascii_wctomb+0x16>
 80088c2:	2aff      	cmp	r2, #255	; 0xff
 80088c4:	bf85      	ittet	hi
 80088c6:	238a      	movhi	r3, #138	; 0x8a
 80088c8:	6003      	strhi	r3, [r0, #0]
 80088ca:	700a      	strbls	r2, [r1, #0]
 80088cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80088d0:	bf98      	it	ls
 80088d2:	2001      	movls	r0, #1
 80088d4:	4770      	bx	lr
 80088d6:	4608      	mov	r0, r1
 80088d8:	4770      	bx	lr
	...

080088dc <__swsetup_r>:
 80088dc:	4b32      	ldr	r3, [pc, #200]	; (80089a8 <__swsetup_r+0xcc>)
 80088de:	b570      	push	{r4, r5, r6, lr}
 80088e0:	681d      	ldr	r5, [r3, #0]
 80088e2:	4606      	mov	r6, r0
 80088e4:	460c      	mov	r4, r1
 80088e6:	b125      	cbz	r5, 80088f2 <__swsetup_r+0x16>
 80088e8:	69ab      	ldr	r3, [r5, #24]
 80088ea:	b913      	cbnz	r3, 80088f2 <__swsetup_r+0x16>
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 f985 	bl	8008bfc <__sinit>
 80088f2:	4b2e      	ldr	r3, [pc, #184]	; (80089ac <__swsetup_r+0xd0>)
 80088f4:	429c      	cmp	r4, r3
 80088f6:	d10f      	bne.n	8008918 <__swsetup_r+0x3c>
 80088f8:	686c      	ldr	r4, [r5, #4]
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008900:	0719      	lsls	r1, r3, #28
 8008902:	d42c      	bmi.n	800895e <__swsetup_r+0x82>
 8008904:	06dd      	lsls	r5, r3, #27
 8008906:	d411      	bmi.n	800892c <__swsetup_r+0x50>
 8008908:	2309      	movs	r3, #9
 800890a:	6033      	str	r3, [r6, #0]
 800890c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	e03e      	b.n	8008996 <__swsetup_r+0xba>
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <__swsetup_r+0xd4>)
 800891a:	429c      	cmp	r4, r3
 800891c:	d101      	bne.n	8008922 <__swsetup_r+0x46>
 800891e:	68ac      	ldr	r4, [r5, #8]
 8008920:	e7eb      	b.n	80088fa <__swsetup_r+0x1e>
 8008922:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <__swsetup_r+0xd8>)
 8008924:	429c      	cmp	r4, r3
 8008926:	bf08      	it	eq
 8008928:	68ec      	ldreq	r4, [r5, #12]
 800892a:	e7e6      	b.n	80088fa <__swsetup_r+0x1e>
 800892c:	0758      	lsls	r0, r3, #29
 800892e:	d512      	bpl.n	8008956 <__swsetup_r+0x7a>
 8008930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008932:	b141      	cbz	r1, 8008946 <__swsetup_r+0x6a>
 8008934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008938:	4299      	cmp	r1, r3
 800893a:	d002      	beq.n	8008942 <__swsetup_r+0x66>
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff fb6f 	bl	8008020 <_free_r>
 8008942:	2300      	movs	r3, #0
 8008944:	6363      	str	r3, [r4, #52]	; 0x34
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	2300      	movs	r3, #0
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f043 0308 	orr.w	r3, r3, #8
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	b94b      	cbnz	r3, 8008976 <__swsetup_r+0x9a>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800896c:	d003      	beq.n	8008976 <__swsetup_r+0x9a>
 800896e:	4621      	mov	r1, r4
 8008970:	4630      	mov	r0, r6
 8008972:	f000 fa07 	bl	8008d84 <__smakebuf_r>
 8008976:	89a0      	ldrh	r0, [r4, #12]
 8008978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800897c:	f010 0301 	ands.w	r3, r0, #1
 8008980:	d00a      	beq.n	8008998 <__swsetup_r+0xbc>
 8008982:	2300      	movs	r3, #0
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	6963      	ldr	r3, [r4, #20]
 8008988:	425b      	negs	r3, r3
 800898a:	61a3      	str	r3, [r4, #24]
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	b943      	cbnz	r3, 80089a2 <__swsetup_r+0xc6>
 8008990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008994:	d1ba      	bne.n	800890c <__swsetup_r+0x30>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	0781      	lsls	r1, r0, #30
 800899a:	bf58      	it	pl
 800899c:	6963      	ldrpl	r3, [r4, #20]
 800899e:	60a3      	str	r3, [r4, #8]
 80089a0:	e7f4      	b.n	800898c <__swsetup_r+0xb0>
 80089a2:	2000      	movs	r0, #0
 80089a4:	e7f7      	b.n	8008996 <__swsetup_r+0xba>
 80089a6:	bf00      	nop
 80089a8:	2000000c 	.word	0x2000000c
 80089ac:	0800944c 	.word	0x0800944c
 80089b0:	0800946c 	.word	0x0800946c
 80089b4:	0800942c 	.word	0x0800942c

080089b8 <abort>:
 80089b8:	b508      	push	{r3, lr}
 80089ba:	2006      	movs	r0, #6
 80089bc:	f000 fa52 	bl	8008e64 <raise>
 80089c0:	2001      	movs	r0, #1
 80089c2:	f7f8 ff15 	bl	80017f0 <_exit>
	...

080089c8 <__sflush_r>:
 80089c8:	898a      	ldrh	r2, [r1, #12]
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	4605      	mov	r5, r0
 80089d0:	0710      	lsls	r0, r2, #28
 80089d2:	460c      	mov	r4, r1
 80089d4:	d458      	bmi.n	8008a88 <__sflush_r+0xc0>
 80089d6:	684b      	ldr	r3, [r1, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc05      	bgt.n	80089e8 <__sflush_r+0x20>
 80089dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	dc02      	bgt.n	80089e8 <__sflush_r+0x20>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ea:	2e00      	cmp	r6, #0
 80089ec:	d0f9      	beq.n	80089e2 <__sflush_r+0x1a>
 80089ee:	2300      	movs	r3, #0
 80089f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089f4:	682f      	ldr	r7, [r5, #0]
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	d032      	beq.n	8008a60 <__sflush_r+0x98>
 80089fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	075a      	lsls	r2, r3, #29
 8008a00:	d505      	bpl.n	8008a0e <__sflush_r+0x46>
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	1ac0      	subs	r0, r0, r3
 8008a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a08:	b10b      	cbz	r3, 8008a0e <__sflush_r+0x46>
 8008a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a0c:	1ac0      	subs	r0, r0, r3
 8008a0e:	2300      	movs	r3, #0
 8008a10:	4602      	mov	r2, r0
 8008a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a14:	6a21      	ldr	r1, [r4, #32]
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	d106      	bne.n	8008a2e <__sflush_r+0x66>
 8008a20:	6829      	ldr	r1, [r5, #0]
 8008a22:	291d      	cmp	r1, #29
 8008a24:	d82c      	bhi.n	8008a80 <__sflush_r+0xb8>
 8008a26:	4a2a      	ldr	r2, [pc, #168]	; (8008ad0 <__sflush_r+0x108>)
 8008a28:	40ca      	lsrs	r2, r1
 8008a2a:	07d6      	lsls	r6, r2, #31
 8008a2c:	d528      	bpl.n	8008a80 <__sflush_r+0xb8>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	6062      	str	r2, [r4, #4]
 8008a32:	04d9      	lsls	r1, r3, #19
 8008a34:	6922      	ldr	r2, [r4, #16]
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	d504      	bpl.n	8008a44 <__sflush_r+0x7c>
 8008a3a:	1c42      	adds	r2, r0, #1
 8008a3c:	d101      	bne.n	8008a42 <__sflush_r+0x7a>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b903      	cbnz	r3, 8008a44 <__sflush_r+0x7c>
 8008a42:	6560      	str	r0, [r4, #84]	; 0x54
 8008a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a46:	602f      	str	r7, [r5, #0]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d0ca      	beq.n	80089e2 <__sflush_r+0x1a>
 8008a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a50:	4299      	cmp	r1, r3
 8008a52:	d002      	beq.n	8008a5a <__sflush_r+0x92>
 8008a54:	4628      	mov	r0, r5
 8008a56:	f7ff fae3 	bl	8008020 <_free_r>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a5e:	e7c1      	b.n	80089e4 <__sflush_r+0x1c>
 8008a60:	6a21      	ldr	r1, [r4, #32]
 8008a62:	2301      	movs	r3, #1
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b0      	blx	r6
 8008a68:	1c41      	adds	r1, r0, #1
 8008a6a:	d1c7      	bne.n	80089fc <__sflush_r+0x34>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0c4      	beq.n	80089fc <__sflush_r+0x34>
 8008a72:	2b1d      	cmp	r3, #29
 8008a74:	d001      	beq.n	8008a7a <__sflush_r+0xb2>
 8008a76:	2b16      	cmp	r3, #22
 8008a78:	d101      	bne.n	8008a7e <__sflush_r+0xb6>
 8008a7a:	602f      	str	r7, [r5, #0]
 8008a7c:	e7b1      	b.n	80089e2 <__sflush_r+0x1a>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	e7ad      	b.n	80089e4 <__sflush_r+0x1c>
 8008a88:	690f      	ldr	r7, [r1, #16]
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	d0a9      	beq.n	80089e2 <__sflush_r+0x1a>
 8008a8e:	0793      	lsls	r3, r2, #30
 8008a90:	680e      	ldr	r6, [r1, #0]
 8008a92:	bf08      	it	eq
 8008a94:	694b      	ldreq	r3, [r1, #20]
 8008a96:	600f      	str	r7, [r1, #0]
 8008a98:	bf18      	it	ne
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	eba6 0807 	sub.w	r8, r6, r7
 8008aa0:	608b      	str	r3, [r1, #8]
 8008aa2:	f1b8 0f00 	cmp.w	r8, #0
 8008aa6:	dd9c      	ble.n	80089e2 <__sflush_r+0x1a>
 8008aa8:	6a21      	ldr	r1, [r4, #32]
 8008aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008aac:	4643      	mov	r3, r8
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b0      	blx	r6
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	dc06      	bgt.n	8008ac6 <__sflush_r+0xfe>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e78e      	b.n	80089e4 <__sflush_r+0x1c>
 8008ac6:	4407      	add	r7, r0
 8008ac8:	eba8 0800 	sub.w	r8, r8, r0
 8008acc:	e7e9      	b.n	8008aa2 <__sflush_r+0xda>
 8008ace:	bf00      	nop
 8008ad0:	20400001 	.word	0x20400001

08008ad4 <_fflush_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	690b      	ldr	r3, [r1, #16]
 8008ad8:	4605      	mov	r5, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	b913      	cbnz	r3, 8008ae4 <_fflush_r+0x10>
 8008ade:	2500      	movs	r5, #0
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	b118      	cbz	r0, 8008aee <_fflush_r+0x1a>
 8008ae6:	6983      	ldr	r3, [r0, #24]
 8008ae8:	b90b      	cbnz	r3, 8008aee <_fflush_r+0x1a>
 8008aea:	f000 f887 	bl	8008bfc <__sinit>
 8008aee:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <_fflush_r+0x6c>)
 8008af0:	429c      	cmp	r4, r3
 8008af2:	d11b      	bne.n	8008b2c <_fflush_r+0x58>
 8008af4:	686c      	ldr	r4, [r5, #4]
 8008af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0ef      	beq.n	8008ade <_fflush_r+0xa>
 8008afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b00:	07d0      	lsls	r0, r2, #31
 8008b02:	d404      	bmi.n	8008b0e <_fflush_r+0x3a>
 8008b04:	0599      	lsls	r1, r3, #22
 8008b06:	d402      	bmi.n	8008b0e <_fflush_r+0x3a>
 8008b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0a:	f000 f915 	bl	8008d38 <__retarget_lock_acquire_recursive>
 8008b0e:	4628      	mov	r0, r5
 8008b10:	4621      	mov	r1, r4
 8008b12:	f7ff ff59 	bl	80089c8 <__sflush_r>
 8008b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b18:	07da      	lsls	r2, r3, #31
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	d4e0      	bmi.n	8008ae0 <_fflush_r+0xc>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	059b      	lsls	r3, r3, #22
 8008b22:	d4dd      	bmi.n	8008ae0 <_fflush_r+0xc>
 8008b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b26:	f000 f908 	bl	8008d3a <__retarget_lock_release_recursive>
 8008b2a:	e7d9      	b.n	8008ae0 <_fflush_r+0xc>
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <_fflush_r+0x70>)
 8008b2e:	429c      	cmp	r4, r3
 8008b30:	d101      	bne.n	8008b36 <_fflush_r+0x62>
 8008b32:	68ac      	ldr	r4, [r5, #8]
 8008b34:	e7df      	b.n	8008af6 <_fflush_r+0x22>
 8008b36:	4b04      	ldr	r3, [pc, #16]	; (8008b48 <_fflush_r+0x74>)
 8008b38:	429c      	cmp	r4, r3
 8008b3a:	bf08      	it	eq
 8008b3c:	68ec      	ldreq	r4, [r5, #12]
 8008b3e:	e7da      	b.n	8008af6 <_fflush_r+0x22>
 8008b40:	0800944c 	.word	0x0800944c
 8008b44:	0800946c 	.word	0x0800946c
 8008b48:	0800942c 	.word	0x0800942c

08008b4c <std>:
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	4604      	mov	r4, r0
 8008b52:	e9c0 3300 	strd	r3, r3, [r0]
 8008b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b5a:	6083      	str	r3, [r0, #8]
 8008b5c:	8181      	strh	r1, [r0, #12]
 8008b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b60:	81c2      	strh	r2, [r0, #14]
 8008b62:	6183      	str	r3, [r0, #24]
 8008b64:	4619      	mov	r1, r3
 8008b66:	2208      	movs	r2, #8
 8008b68:	305c      	adds	r0, #92	; 0x5c
 8008b6a:	f7fd fba7 	bl	80062bc <memset>
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <std+0x38>)
 8008b70:	6263      	str	r3, [r4, #36]	; 0x24
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <std+0x3c>)
 8008b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b76:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <std+0x40>)
 8008b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <std+0x44>)
 8008b7c:	6224      	str	r4, [r4, #32]
 8008b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	bf00      	nop
 8008b84:	08008e9d 	.word	0x08008e9d
 8008b88:	08008ebf 	.word	0x08008ebf
 8008b8c:	08008ef7 	.word	0x08008ef7
 8008b90:	08008f1b 	.word	0x08008f1b

08008b94 <_cleanup_r>:
 8008b94:	4901      	ldr	r1, [pc, #4]	; (8008b9c <_cleanup_r+0x8>)
 8008b96:	f000 b8af 	b.w	8008cf8 <_fwalk_reent>
 8008b9a:	bf00      	nop
 8008b9c:	08008ad5 	.word	0x08008ad5

08008ba0 <__sfmoreglue>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	1e4a      	subs	r2, r1, #1
 8008ba4:	2568      	movs	r5, #104	; 0x68
 8008ba6:	4355      	muls	r5, r2
 8008ba8:	460e      	mov	r6, r1
 8008baa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bae:	f7ff fa87 	bl	80080c0 <_malloc_r>
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	b140      	cbz	r0, 8008bc8 <__sfmoreglue+0x28>
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	e9c0 1600 	strd	r1, r6, [r0]
 8008bbc:	300c      	adds	r0, #12
 8008bbe:	60a0      	str	r0, [r4, #8]
 8008bc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bc4:	f7fd fb7a 	bl	80062bc <memset>
 8008bc8:	4620      	mov	r0, r4
 8008bca:	bd70      	pop	{r4, r5, r6, pc}

08008bcc <__sfp_lock_acquire>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	; (8008bd4 <__sfp_lock_acquire+0x8>)
 8008bce:	f000 b8b3 	b.w	8008d38 <__retarget_lock_acquire_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	20000554 	.word	0x20000554

08008bd8 <__sfp_lock_release>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__sfp_lock_release+0x8>)
 8008bda:	f000 b8ae 	b.w	8008d3a <__retarget_lock_release_recursive>
 8008bde:	bf00      	nop
 8008be0:	20000554 	.word	0x20000554

08008be4 <__sinit_lock_acquire>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__sinit_lock_acquire+0x8>)
 8008be6:	f000 b8a7 	b.w	8008d38 <__retarget_lock_acquire_recursive>
 8008bea:	bf00      	nop
 8008bec:	2000054f 	.word	0x2000054f

08008bf0 <__sinit_lock_release>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sinit_lock_release+0x8>)
 8008bf2:	f000 b8a2 	b.w	8008d3a <__retarget_lock_release_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	2000054f 	.word	0x2000054f

08008bfc <__sinit>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	4604      	mov	r4, r0
 8008c00:	f7ff fff0 	bl	8008be4 <__sinit_lock_acquire>
 8008c04:	69a3      	ldr	r3, [r4, #24]
 8008c06:	b11b      	cbz	r3, 8008c10 <__sinit+0x14>
 8008c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c0c:	f7ff bff0 	b.w	8008bf0 <__sinit_lock_release>
 8008c10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c14:	6523      	str	r3, [r4, #80]	; 0x50
 8008c16:	4b13      	ldr	r3, [pc, #76]	; (8008c64 <__sinit+0x68>)
 8008c18:	4a13      	ldr	r2, [pc, #76]	; (8008c68 <__sinit+0x6c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	bf04      	itt	eq
 8008c22:	2301      	moveq	r3, #1
 8008c24:	61a3      	streq	r3, [r4, #24]
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 f820 	bl	8008c6c <__sfp>
 8008c2c:	6060      	str	r0, [r4, #4]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f81c 	bl	8008c6c <__sfp>
 8008c34:	60a0      	str	r0, [r4, #8]
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 f818 	bl	8008c6c <__sfp>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	60e0      	str	r0, [r4, #12]
 8008c40:	2104      	movs	r1, #4
 8008c42:	6860      	ldr	r0, [r4, #4]
 8008c44:	f7ff ff82 	bl	8008b4c <std>
 8008c48:	68a0      	ldr	r0, [r4, #8]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	2109      	movs	r1, #9
 8008c4e:	f7ff ff7d 	bl	8008b4c <std>
 8008c52:	68e0      	ldr	r0, [r4, #12]
 8008c54:	2202      	movs	r2, #2
 8008c56:	2112      	movs	r1, #18
 8008c58:	f7ff ff78 	bl	8008b4c <std>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	61a3      	str	r3, [r4, #24]
 8008c60:	e7d2      	b.n	8008c08 <__sinit+0xc>
 8008c62:	bf00      	nop
 8008c64:	080090a8 	.word	0x080090a8
 8008c68:	08008b95 	.word	0x08008b95

08008c6c <__sfp>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	4607      	mov	r7, r0
 8008c70:	f7ff ffac 	bl	8008bcc <__sfp_lock_acquire>
 8008c74:	4b1e      	ldr	r3, [pc, #120]	; (8008cf0 <__sfp+0x84>)
 8008c76:	681e      	ldr	r6, [r3, #0]
 8008c78:	69b3      	ldr	r3, [r6, #24]
 8008c7a:	b913      	cbnz	r3, 8008c82 <__sfp+0x16>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff ffbd 	bl	8008bfc <__sinit>
 8008c82:	3648      	adds	r6, #72	; 0x48
 8008c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	d503      	bpl.n	8008c94 <__sfp+0x28>
 8008c8c:	6833      	ldr	r3, [r6, #0]
 8008c8e:	b30b      	cbz	r3, 8008cd4 <__sfp+0x68>
 8008c90:	6836      	ldr	r6, [r6, #0]
 8008c92:	e7f7      	b.n	8008c84 <__sfp+0x18>
 8008c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c98:	b9d5      	cbnz	r5, 8008cd0 <__sfp+0x64>
 8008c9a:	4b16      	ldr	r3, [pc, #88]	; (8008cf4 <__sfp+0x88>)
 8008c9c:	60e3      	str	r3, [r4, #12]
 8008c9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ca2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ca4:	f000 f847 	bl	8008d36 <__retarget_lock_init_recursive>
 8008ca8:	f7ff ff96 	bl	8008bd8 <__sfp_lock_release>
 8008cac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cb4:	6025      	str	r5, [r4, #0]
 8008cb6:	61a5      	str	r5, [r4, #24]
 8008cb8:	2208      	movs	r2, #8
 8008cba:	4629      	mov	r1, r5
 8008cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cc0:	f7fd fafc 	bl	80062bc <memset>
 8008cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ccc:	4620      	mov	r0, r4
 8008cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd0:	3468      	adds	r4, #104	; 0x68
 8008cd2:	e7d9      	b.n	8008c88 <__sfp+0x1c>
 8008cd4:	2104      	movs	r1, #4
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f7ff ff62 	bl	8008ba0 <__sfmoreglue>
 8008cdc:	4604      	mov	r4, r0
 8008cde:	6030      	str	r0, [r6, #0]
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d1d5      	bne.n	8008c90 <__sfp+0x24>
 8008ce4:	f7ff ff78 	bl	8008bd8 <__sfp_lock_release>
 8008ce8:	230c      	movs	r3, #12
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	e7ee      	b.n	8008ccc <__sfp+0x60>
 8008cee:	bf00      	nop
 8008cf0:	080090a8 	.word	0x080090a8
 8008cf4:	ffff0001 	.word	0xffff0001

08008cf8 <_fwalk_reent>:
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	4688      	mov	r8, r1
 8008d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d04:	2700      	movs	r7, #0
 8008d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d0e:	d505      	bpl.n	8008d1c <_fwalk_reent+0x24>
 8008d10:	6824      	ldr	r4, [r4, #0]
 8008d12:	2c00      	cmp	r4, #0
 8008d14:	d1f7      	bne.n	8008d06 <_fwalk_reent+0xe>
 8008d16:	4638      	mov	r0, r7
 8008d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d907      	bls.n	8008d32 <_fwalk_reent+0x3a>
 8008d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d26:	3301      	adds	r3, #1
 8008d28:	d003      	beq.n	8008d32 <_fwalk_reent+0x3a>
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	47c0      	blx	r8
 8008d30:	4307      	orrs	r7, r0
 8008d32:	3568      	adds	r5, #104	; 0x68
 8008d34:	e7e9      	b.n	8008d0a <_fwalk_reent+0x12>

08008d36 <__retarget_lock_init_recursive>:
 8008d36:	4770      	bx	lr

08008d38 <__retarget_lock_acquire_recursive>:
 8008d38:	4770      	bx	lr

08008d3a <__retarget_lock_release_recursive>:
 8008d3a:	4770      	bx	lr

08008d3c <__swhatbuf_r>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	460e      	mov	r6, r1
 8008d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d44:	2900      	cmp	r1, #0
 8008d46:	b096      	sub	sp, #88	; 0x58
 8008d48:	4614      	mov	r4, r2
 8008d4a:	461d      	mov	r5, r3
 8008d4c:	da07      	bge.n	8008d5e <__swhatbuf_r+0x22>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	89b3      	ldrh	r3, [r6, #12]
 8008d54:	061a      	lsls	r2, r3, #24
 8008d56:	d410      	bmi.n	8008d7a <__swhatbuf_r+0x3e>
 8008d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d5c:	e00e      	b.n	8008d7c <__swhatbuf_r+0x40>
 8008d5e:	466a      	mov	r2, sp
 8008d60:	f000 f902 	bl	8008f68 <_fstat_r>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	dbf2      	blt.n	8008d4e <__swhatbuf_r+0x12>
 8008d68:	9a01      	ldr	r2, [sp, #4]
 8008d6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d72:	425a      	negs	r2, r3
 8008d74:	415a      	adcs	r2, r3
 8008d76:	602a      	str	r2, [r5, #0]
 8008d78:	e7ee      	b.n	8008d58 <__swhatbuf_r+0x1c>
 8008d7a:	2340      	movs	r3, #64	; 0x40
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	b016      	add	sp, #88	; 0x58
 8008d82:	bd70      	pop	{r4, r5, r6, pc}

08008d84 <__smakebuf_r>:
 8008d84:	898b      	ldrh	r3, [r1, #12]
 8008d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d88:	079d      	lsls	r5, r3, #30
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	d507      	bpl.n	8008da0 <__smakebuf_r+0x1c>
 8008d90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	6163      	str	r3, [r4, #20]
 8008d9c:	b002      	add	sp, #8
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	ab01      	add	r3, sp, #4
 8008da2:	466a      	mov	r2, sp
 8008da4:	f7ff ffca 	bl	8008d3c <__swhatbuf_r>
 8008da8:	9900      	ldr	r1, [sp, #0]
 8008daa:	4605      	mov	r5, r0
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff f987 	bl	80080c0 <_malloc_r>
 8008db2:	b948      	cbnz	r0, 8008dc8 <__smakebuf_r+0x44>
 8008db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db8:	059a      	lsls	r2, r3, #22
 8008dba:	d4ef      	bmi.n	8008d9c <__smakebuf_r+0x18>
 8008dbc:	f023 0303 	bic.w	r3, r3, #3
 8008dc0:	f043 0302 	orr.w	r3, r3, #2
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7e3      	b.n	8008d90 <__smakebuf_r+0xc>
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <__smakebuf_r+0x7c>)
 8008dca:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	6020      	str	r0, [r4, #0]
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	9b00      	ldr	r3, [sp, #0]
 8008dd8:	6163      	str	r3, [r4, #20]
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	6120      	str	r0, [r4, #16]
 8008dde:	b15b      	cbz	r3, 8008df8 <__smakebuf_r+0x74>
 8008de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 f8d1 	bl	8008f8c <_isatty_r>
 8008dea:	b128      	cbz	r0, 8008df8 <__smakebuf_r+0x74>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f023 0303 	bic.w	r3, r3, #3
 8008df2:	f043 0301 	orr.w	r3, r3, #1
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	89a0      	ldrh	r0, [r4, #12]
 8008dfa:	4305      	orrs	r5, r0
 8008dfc:	81a5      	strh	r5, [r4, #12]
 8008dfe:	e7cd      	b.n	8008d9c <__smakebuf_r+0x18>
 8008e00:	08008b95 	.word	0x08008b95

08008e04 <_malloc_usable_size_r>:
 8008e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e08:	1f18      	subs	r0, r3, #4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bfbc      	itt	lt
 8008e0e:	580b      	ldrlt	r3, [r1, r0]
 8008e10:	18c0      	addlt	r0, r0, r3
 8008e12:	4770      	bx	lr

08008e14 <_raise_r>:
 8008e14:	291f      	cmp	r1, #31
 8008e16:	b538      	push	{r3, r4, r5, lr}
 8008e18:	4604      	mov	r4, r0
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	d904      	bls.n	8008e28 <_raise_r+0x14>
 8008e1e:	2316      	movs	r3, #22
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e2a:	b112      	cbz	r2, 8008e32 <_raise_r+0x1e>
 8008e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e30:	b94b      	cbnz	r3, 8008e46 <_raise_r+0x32>
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 f830 	bl	8008e98 <_getpid_r>
 8008e38:	462a      	mov	r2, r5
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e42:	f000 b817 	b.w	8008e74 <_kill_r>
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d00a      	beq.n	8008e60 <_raise_r+0x4c>
 8008e4a:	1c59      	adds	r1, r3, #1
 8008e4c:	d103      	bne.n	8008e56 <_raise_r+0x42>
 8008e4e:	2316      	movs	r3, #22
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	2001      	movs	r0, #1
 8008e54:	e7e7      	b.n	8008e26 <_raise_r+0x12>
 8008e56:	2400      	movs	r4, #0
 8008e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	4798      	blx	r3
 8008e60:	2000      	movs	r0, #0
 8008e62:	e7e0      	b.n	8008e26 <_raise_r+0x12>

08008e64 <raise>:
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <raise+0xc>)
 8008e66:	4601      	mov	r1, r0
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f7ff bfd3 	b.w	8008e14 <_raise_r>
 8008e6e:	bf00      	nop
 8008e70:	2000000c 	.word	0x2000000c

08008e74 <_kill_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d07      	ldr	r5, [pc, #28]	; (8008e94 <_kill_r+0x20>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	4611      	mov	r1, r2
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	f7f8 fca5 	bl	80017d0 <_kill>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d102      	bne.n	8008e90 <_kill_r+0x1c>
 8008e8a:	682b      	ldr	r3, [r5, #0]
 8008e8c:	b103      	cbz	r3, 8008e90 <_kill_r+0x1c>
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
 8008e92:	bf00      	nop
 8008e94:	20000548 	.word	0x20000548

08008e98 <_getpid_r>:
 8008e98:	f7f8 bc92 	b.w	80017c0 <_getpid>

08008e9c <__sread>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea4:	f000 f894 	bl	8008fd0 <_read_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	bfab      	itete	ge
 8008eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eae:	89a3      	ldrhlt	r3, [r4, #12]
 8008eb0:	181b      	addge	r3, r3, r0
 8008eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eb6:	bfac      	ite	ge
 8008eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eba:	81a3      	strhlt	r3, [r4, #12]
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <__swrite>:
 8008ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	898b      	ldrh	r3, [r1, #12]
 8008ec6:	05db      	lsls	r3, r3, #23
 8008ec8:	4605      	mov	r5, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4616      	mov	r6, r2
 8008ece:	d505      	bpl.n	8008edc <__swrite+0x1e>
 8008ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f000 f868 	bl	8008fac <_lseek_r>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	463b      	mov	r3, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	f000 b817 	b.w	8008f24 <_write_r>

08008ef6 <__sseek>:
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008efe:	f000 f855 	bl	8008fac <_lseek_r>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	bf15      	itete	ne
 8008f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f12:	81a3      	strheq	r3, [r4, #12]
 8008f14:	bf18      	it	ne
 8008f16:	81a3      	strhne	r3, [r4, #12]
 8008f18:	bd10      	pop	{r4, pc}

08008f1a <__sclose>:
 8008f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1e:	f000 b813 	b.w	8008f48 <_close_r>
	...

08008f24 <_write_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d07      	ldr	r5, [pc, #28]	; (8008f44 <_write_r+0x20>)
 8008f28:	4604      	mov	r4, r0
 8008f2a:	4608      	mov	r0, r1
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	602a      	str	r2, [r5, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	f7f8 fc83 	bl	800183e <_write>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_write_r+0x1e>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_write_r+0x1e>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20000548 	.word	0x20000548

08008f48 <_close_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d06      	ldr	r5, [pc, #24]	; (8008f64 <_close_r+0x1c>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7f8 fc8f 	bl	8001876 <_close>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_close_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_close_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20000548 	.word	0x20000548

08008f68 <_fstat_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d07      	ldr	r5, [pc, #28]	; (8008f88 <_fstat_r+0x20>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	4611      	mov	r1, r2
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	f7f8 fc8a 	bl	800188e <_fstat>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d102      	bne.n	8008f84 <_fstat_r+0x1c>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b103      	cbz	r3, 8008f84 <_fstat_r+0x1c>
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	bd38      	pop	{r3, r4, r5, pc}
 8008f86:	bf00      	nop
 8008f88:	20000548 	.word	0x20000548

08008f8c <_isatty_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_isatty_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7f8 fc89 	bl	80018ae <_isatty>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_isatty_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_isatty_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20000548 	.word	0x20000548

08008fac <_lseek_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_lseek_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f8 fc82 	bl	80018c4 <_lseek>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_lseek_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_lseek_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20000548 	.word	0x20000548

08008fd0 <_read_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	; (8008ff0 <_read_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f8 fc10 	bl	8001804 <_read>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_read_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_read_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20000548 	.word	0x20000548

08008ff4 <_init>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr

08009000 <_fini>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr
