
Optical_power_managment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a8  080058a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b0  080058b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000070  08005928  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005928  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015821  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028eb  00000000  00000000  000358c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  000381b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00039438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ada  00000000  00000000  0003a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147d1  00000000  00000000  00063082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010533c  00000000  00000000  00077853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017cb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005240  00000000  00000000  0017cbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005804 	.word	0x08005804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005804 	.word	0x08005804

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
 8000588:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_ADC1_Init+0xe4>)
 800058c:	4a30      	ldr	r2, [pc, #192]	; (8000650 <MX_ADC1_Init+0xe8>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_ADC1_Init+0xe4>)
 8000592:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <MX_ADC1_Init+0xe4>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_ADC1_Init+0xe4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <MX_ADC1_Init+0xe4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <MX_ADC1_Init+0xe4>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_ADC1_Init+0xe4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <MX_ADC1_Init+0xe4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_ADC1_Init+0xe4>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_ADC1_Init+0xe4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_ADC1_Init+0xe4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_ADC1_Init+0xe4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0xe4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_ADC1_Init+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0xe4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <MX_ADC1_Init+0xe4>)
 80005ee:	f000 ff3b 	bl	8001468 <HAL_ADC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80005f8:	f000 facc 	bl	8000b94 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <MX_ADC1_Init+0xe4>)
 8000608:	f001 fdb6 	bl	8002178 <HAL_ADCEx_MultiModeConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000612:	f000 fabf 	bl	8000b94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_ADC1_Init+0xec>)
 8000618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061a:	2306      	movs	r3, #6
 800061c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000622:	237f      	movs	r3, #127	; 0x7f
 8000624:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000626:	2304      	movs	r3, #4
 8000628:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_ADC1_Init+0xe4>)
 8000634:	f001 f928 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800063e:	f000 faa9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	; 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000100 	.word	0x20000100
 8000650:	50040000 	.word	0x50040000
 8000654:	c7520000 	.word	0xc7520000

08000658 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_ADC2_Init+0xbc>)
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <MX_ADC2_Init+0xc0>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_ADC2_Init+0xbc>)
 8000676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800067a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_ADC2_Init+0xbc>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_ADC2_Init+0xbc>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_ADC2_Init+0xbc>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_ADC2_Init+0xbc>)
 8000690:	2204      	movs	r2, #4
 8000692:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_ADC2_Init+0xbc>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_ADC2_Init+0xbc>)
 800069c:	2200      	movs	r2, #0
 800069e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006d2:	f000 fec9 	bl	8001468 <HAL_ADC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80006dc:	f000 fa5a 	bl	8000b94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_ADC2_Init+0xc4>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e4:	2306      	movs	r3, #6
 80006e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ec:	237f      	movs	r3, #127	; 0x7f
 80006ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f0:	2304      	movs	r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_ADC2_Init+0xbc>)
 80006fe:	f001 f8c3 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000708:	f000 fa44 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000009c 	.word	0x2000009c
 8000718:	50040100 	.word	0x50040100
 800071c:	04300002 	.word	0x04300002

08000720 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a27      	ldr	r2, [pc, #156]	; (80007dc <HAL_ADC_MspInit+0xbc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d115      	bne.n	800076e <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 800074a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d13e      	bne.n	80007d2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 800075a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800076c:	e031      	b.n	80007d2 <HAL_ADC_MspInit+0xb2>
  else if(adcHandle->Instance==ADC2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_ADC_MspInit+0xc8>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d12c      	bne.n	80007d2 <HAL_ADC_MspInit+0xb2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 8000780:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d10b      	bne.n	80007a2 <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC_CLK_ENABLE();
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 8000790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007be:	230b      	movs	r3, #11
 80007c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <HAL_ADC_MspInit+0xcc>)
 80007ce:	f001 fe95 	bl	80024fc <HAL_GPIO_Init>
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	50040000 	.word	0x50040000
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40021000 	.word	0x40021000
 80007e8:	50040100 	.word	0x50040100
 80007ec:	48000800 	.word	0x48000800

080007f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b76      	ldr	r3, [pc, #472]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a75      	ldr	r2, [pc, #468]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b73      	ldr	r3, [pc, #460]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b70      	ldr	r3, [pc, #448]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a6f      	ldr	r2, [pc, #444]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b6d      	ldr	r3, [pc, #436]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b6a      	ldr	r3, [pc, #424]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a69      	ldr	r2, [pc, #420]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a63      	ldr	r2, [pc, #396]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b61      	ldr	r3, [pc, #388]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a5d      	ldr	r2, [pc, #372]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWITCH_GPIO_Port, SWITCH_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2102      	movs	r1, #2
 8000882:	4858      	ldr	r0, [pc, #352]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 8000884:	f001 ffe4 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2120      	movs	r1, #32
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f001 ffde 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_inv_Pin|DE_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f242 0120 	movw	r1, #8224	; 0x2020
 800089a:	4853      	ldr	r0, [pc, #332]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 800089c:	f001 ffd8 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	4b51      	ldr	r3, [pc, #324]	; (80009ec <MX_GPIO_Init+0x1fc>)
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	484b      	ldr	r0, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 80008b6:	f001 fe21 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80008ba:	2302      	movs	r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4844      	ldr	r0, [pc, #272]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 80008d2:	f001 fe13 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008d6:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 80008da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008dc:	2303      	movs	r3, #3
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	483e      	ldr	r0, [pc, #248]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 80008ec:	f001 fe06 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 PA7 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80008f0:	f649 13c2 	movw	r3, #39362	; 0x99c2
 80008f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f6:	2303      	movs	r3, #3
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f001 fdf8 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3109_PGOOD_Pin;
 800090c:	2310      	movs	r3, #16
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3109_PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f001 fdeb 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f001 fddc 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000944:	f649 73d7 	movw	r3, #40919	; 0x9fd7
 8000948:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 800095a:	f001 fdcf 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RE_inv_Pin|DE_Pin;
 800095e:	f242 0320 	movw	r3, #8224	; 0x2020
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 8000978:	f001 fdc0 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3128_PGOOD_Pin;
 800097c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3128_PGOOD_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4815      	ldr	r0, [pc, #84]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 8000992:	f001 fdb3 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3105_PGOOD_Pin;
 8000996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3105_PGOOD_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 80009ac:	f001 fda6 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b0:	2304      	movs	r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x200>)
 80009c4:	f001 fd9a 	bl	80024fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2028      	movs	r0, #40	; 0x28
 80009ce:	f001 fd5e 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d2:	2028      	movs	r0, #40	; 0x28
 80009d4:	f001 fd77 	bl	80024c6 <HAL_NVIC_EnableIRQ>

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000800 	.word	0x48000800
 80009e8:	48000400 	.word	0x48000400
 80009ec:	10210000 	.word	0x10210000
 80009f0:	48000c00 	.word	0x48000c00

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 faf8 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f818 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f7ff fef6 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a04:	f000 fa24 	bl	8000e50 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a08:	f7ff fdae 	bl	8000568 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a0c:	f000 f9f0 	bl	8000df0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000a10:	f7ff fe22 	bl	8000658 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000a14:	f000 f990 	bl	8000d38 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // ADC measure
  HAL_ADC_Start(&hadc1);
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <main+0x34>)
 8000a1a:	f000 fe7b 	bl	8001714 <HAL_ADC_Start>

  // Timer
  HAL_TIM_Base_Start_IT(&htim6);
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <main+0x38>)
 8000a20:	f003 fac4 	bl	8003fac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x30>
 8000a26:	bf00      	nop
 8000a28:	20000100 	.word	0x20000100
 8000a2c:	20000164 	.word	0x20000164

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0b8      	sub	sp, #224	; 0xe0
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a3a:	2244      	movs	r2, #68	; 0x44
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 faaa 	bl	8004f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2288      	movs	r2, #136	; 0x88
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fa9c 	bl	8004f98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a86:	2308      	movs	r3, #8
 8000a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 ff82 	bl	80029ac <HAL_RCC_OscConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aae:	f000 f871 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fb4e 	bl	8003178 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ae2:	f000 f857 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000ae6:	f244 0303 	movw	r3, #16387	; 0x4003
 8000aea:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000af4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000af8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fd41 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000b08:	f000 f844 	bl	8000b94 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b10:	f001 fef6 	bl	8002900 <HAL_PWREx_ControlVoltageScaling>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b1a:	f000 f83b 	bl	8000b94 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	37e0      	adds	r7, #224	; 0xe0
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  /* Prevent unused argument(s) compilation warning */
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
#if defined(TEST_UART)
  if (GPIO_Pin == B1_Pin)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b38:	d110      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x34>
  {
	  uint8_t data[13];
	  uint16_t size = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	82fb      	strh	r3, [r7, #22]

	  size = sprintf(data, "TEST_MESSAGE");
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 fa2f 	bl	8004fa8 <siprintf>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	82fb      	strh	r3, [r7, #22]
	  HAL_UART_Transmit(&huart1, &data, size, 100);
 8000b4e:	8afa      	ldrh	r2, [r7, #22]
 8000b50:	f107 0108 	add.w	r1, r7, #8
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b58:	f003 fd6e 	bl	8004638 <HAL_UART_Transmit>
  }
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	0800581c 	.word	0x0800581c
 8000b68:	200001b0 	.word	0x200001b0

08000b6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d104      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b7e:	2120      	movs	r1, #32
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f001 fe7c 	bl	8002880 <HAL_GPIO_TogglePin>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 fa36 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c44:	f001 fe36 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f003 fa1b 	bl	800408c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000164 	.word	0x20000164

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f004 f958 	bl	8004f44 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20018000 	.word	0x20018000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	20000090 	.word	0x20000090
 8000cc8:	200002d0 	.word	0x200002d0

08000ccc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <SystemInit+0x64>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <SystemInit+0x64>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <SystemInit+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <SystemInit+0x68>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <SystemInit+0x68>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <SystemInit+0x68>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <SystemInit+0x68>)
 8000cf8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cfc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <SystemInit+0x68>)
 8000d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <SystemInit+0x68>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <SystemInit+0x68>)
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <SystemInit+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SystemInit+0x64>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	609a      	str	r2, [r3, #8]
#endif
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d50:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d5e:	22f9      	movs	r2, #249	; 0xf9
 8000d60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d6a:	f003 f8c7 	bl	8003efc <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d74:	f7ff ff0e 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d86:	f003 fb63 	bl	8004450 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f7ff ff00 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000164 	.word	0x20000164
 8000da0:	40001000 	.word	0x40001000

08000da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d113      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2036      	movs	r0, #54	; 0x36
 8000dd4:	f001 fb5b 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd8:	2036      	movs	r0, #54	; 0x36
 8000dda:	f001 fb74 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40001000 	.word	0x40001000
 8000dec:	40021000 	.word	0x40021000

08000df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000df6:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <MX_USART1_UART_Init+0x5c>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000dfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_USART1_UART_Init+0x58>)
 8000e34:	f003 fbb2 	bl	800459c <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e3e:	f7ff fea9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001b0 	.word	0x200001b0
 8000e4c:	40013800 	.word	0x40013800

08000e50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_USART2_UART_Init+0x5c>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e94:	f003 fb82 	bl	800459c <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e9e:	f7ff fe79 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000234 	.word	0x20000234
 8000eac:	40004400 	.word	0x40004400

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <HAL_UART_MspInit+0xdc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12a      	bne.n	8000f28 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a2e      	ldr	r2, [pc, #184]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Trans_Pin|UART_RX_Trans_Pin;
 8000f02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f14:	2307      	movs	r3, #7
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f001 faeb 	bl	80024fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f26:	e02d      	b.n	8000f84 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_UART_MspInit+0xe4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d128      	bne.n	8000f84 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0xe0>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f62:	230c      	movs	r3, #12
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f72:	2307      	movs	r3, #7
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f001 fabc 	bl	80024fc <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	; 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40004400 	.word	0x40004400

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff fe96 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f003 ffc3 	bl	8004f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f7ff fd13 	bl	80009f4 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fd4:	080058b8 	.word	0x080058b8
	ldr	r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fdc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000fe0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000fe4:	200002cc 	.word	0x200002cc

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_Init+0x3c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x3c>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f001 fa38 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f80f 	bl	800102c <HAL_InitTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	e001      	b.n	800101e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101a:	f7ff fdc1 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_InitTick+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d023      	beq.n	8001088 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_InitTick+0x70>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa43 	bl	80024e2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d809      	bhi.n	800107c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f001 fa0d 	bl	800248e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_InitTick+0x74>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e007      	b.n	800108c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e004      	b.n	800108c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e001      	b.n	800108c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000004 	.word	0x20000004

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	200002b8 	.word	0x200002b8

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200002b8 	.word	0x200002b8

080010e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3360      	adds	r3, #96	; 0x60
 800115e:	461a      	mov	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LL_ADC_SetOffset+0x44>)
 800116e:	4013      	ands	r3, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	4313      	orrs	r3, r2
 800117c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001184:	bf00      	nop
 8001186:	371c      	adds	r7, #28
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	03fff000 	.word	0x03fff000

08001194 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3360      	adds	r3, #96	; 0x60
 80011a2:	461a      	mov	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3360      	adds	r3, #96	; 0x60
 80011d0:	461a      	mov	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b087      	sub	sp, #28
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3330      	adds	r3, #48	; 0x30
 8001206:	461a      	mov	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	4413      	add	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	211f      	movs	r1, #31
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	0e9b      	lsrs	r3, r3, #26
 800122e:	f003 011f 	and.w	r1, r3, #31
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001242:	bf00      	nop
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800124e:	b480      	push	{r7}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3314      	adds	r3, #20
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	0e5b      	lsrs	r3, r3, #25
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	0d1b      	lsrs	r3, r3, #20
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2107      	movs	r1, #7
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	0d1b      	lsrs	r3, r3, #20
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	431a      	orrs	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0318 	and.w	r3, r3, #24
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012c8:	40d9      	lsrs	r1, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	400b      	ands	r3, r1
 80012ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d2:	431a      	orrs	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	0007ffff 	.word	0x0007ffff

080012ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 031f 	and.w	r3, r3, #31
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6093      	str	r3, [r2, #8]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800133c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001340:	d101      	bne.n	8001346 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001368:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001390:	d101      	bne.n	8001396 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <LL_ADC_IsEnabled+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_ADC_IsEnabled+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001402:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001406:	f043 0204 	orr.w	r2, r3, #4
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b04      	cmp	r3, #4
 800142c:	d101      	bne.n	8001432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b08      	cmp	r3, #8
 8001452:	d101      	bne.n	8001458 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e136      	b.n	80016f0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff f945 	bl	8000720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff3f 	bl	800132c <LL_ADC_IsDeepPowerDownEnabled>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff25 	bl	8001308 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff5a 	bl	800137c <LL_ADC_IsInternalRegulatorEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff3e 	bl	8001354 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d8:	4b87      	ldr	r3, [pc, #540]	; (80016f8 <HAL_ADC_Init+0x290>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	4a87      	ldr	r2, [pc, #540]	; (80016fc <HAL_ADC_Init+0x294>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff3c 	bl	800137c <LL_ADC_IsInternalRegulatorEnabled>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff75 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001530:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 80cf 	bne.w	80016de <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80cb 	bne.w	80016de <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff35 	bl	80013cc <LL_ADC_IsEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d115      	bne.n	8001594 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001568:	4865      	ldr	r0, [pc, #404]	; (8001700 <HAL_ADC_Init+0x298>)
 800156a:	f7ff ff2f 	bl	80013cc <LL_ADC_IsEnabled>
 800156e:	4604      	mov	r4, r0
 8001570:	4864      	ldr	r0, [pc, #400]	; (8001704 <HAL_ADC_Init+0x29c>)
 8001572:	f7ff ff2b 	bl	80013cc <LL_ADC_IsEnabled>
 8001576:	4603      	mov	r3, r0
 8001578:	431c      	orrs	r4, r3
 800157a:	4863      	ldr	r0, [pc, #396]	; (8001708 <HAL_ADC_Init+0x2a0>)
 800157c:	f7ff ff26 	bl	80013cc <LL_ADC_IsEnabled>
 8001580:	4603      	mov	r3, r0
 8001582:	4323      	orrs	r3, r4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4619      	mov	r1, r3
 800158e:	485f      	ldr	r0, [pc, #380]	; (800170c <HAL_ADC_Init+0x2a4>)
 8001590:	f7ff fda8 	bl	80010e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e5b      	ldrb	r3, [r3, #25]
 8001598:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800159e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	3b01      	subs	r3, #1
 80015c8:	045b      	lsls	r3, r3, #17
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_ADC_Init+0x2a8>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	69b9      	ldr	r1, [r7, #24]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff08 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 800160a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff15 	bl	8001440 <LL_ADC_INJ_IsConversionOngoing>
 8001616:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d13d      	bne.n	800169a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d13a      	bne.n	800169a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001628:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001630:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001640:	f023 0302 	bic.w	r3, r3, #2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	69b9      	ldr	r1, [r7, #24]
 800164a:	430b      	orrs	r3, r1
 800164c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001654:	2b01      	cmp	r3, #1
 8001656:	d118      	bne.n	800168a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800166e:	4311      	orrs	r1, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001674:	4311      	orrs	r1, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800167a:	430a      	orrs	r2, r1
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	e007      	b.n	800169a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10c      	bne.n	80016bc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f023 010f 	bic.w	r1, r3, #15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ba:	e007      	b.n	80016cc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 020f 	bic.w	r2, r2, #15
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	f023 0303 	bic.w	r3, r3, #3
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
 80016dc:	e007      	b.n	80016ee <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3724      	adds	r7, #36	; 0x24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	053e2d63 	.word	0x053e2d63
 8001700:	50040000 	.word	0x50040000
 8001704:	50040100 	.word	0x50040100
 8001708:	50040200 	.word	0x50040200
 800170c:	50040300 	.word	0x50040300
 8001710:	fff0c007 	.word	0xfff0c007

08001714 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800171c:	4857      	ldr	r0, [pc, #348]	; (800187c <HAL_ADC_Start+0x168>)
 800171e:	f7ff fde5 	bl	80012ec <LL_ADC_GetMultimode>
 8001722:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe76 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 809c 	bne.w	800186e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_Start+0x30>
 8001740:	2302      	movs	r3, #2
 8001742:	e097      	b.n	8001874 <HAL_ADC_Start+0x160>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fc8b 	bl	8002068 <ADC_Enable>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 8083 	bne.w	8001864 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a42      	ldr	r2, [pc, #264]	; (8001880 <HAL_ADC_Start+0x16c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d002      	beq.n	8001782 <HAL_ADC_Start+0x6e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e000      	b.n	8001784 <HAL_ADC_Start+0x70>
 8001782:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_ADC_Start+0x170>)
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4293      	cmp	r3, r2
 800178a:	d002      	beq.n	8001792 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017aa:	d106      	bne.n	80017ba <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	f023 0206 	bic.w	r2, r3, #6
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	221c      	movs	r2, #28
 80017c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_ADC_Start+0x16c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d002      	beq.n	80017e0 <HAL_ADC_Start+0xcc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e000      	b.n	80017e2 <HAL_ADC_Start+0xce>
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_ADC_Start+0x170>)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d008      	beq.n	80017fc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d002      	beq.n	80017fc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	d114      	bne.n	8001826 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001812:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fde7 	bl	80013f2 <LL_ADC_REG_StartConversion>
 8001824:	e025      	b.n	8001872 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_ADC_Start+0x16c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d002      	beq.n	8001842 <HAL_ADC_Start+0x12e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e000      	b.n	8001844 <HAL_ADC_Start+0x130>
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_ADC_Start+0x170>)
 8001844:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00f      	beq.n	8001872 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
 8001862:	e006      	b.n	8001872 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800186c:	e001      	b.n	8001872 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	50040300 	.word	0x50040300
 8001880:	50040100 	.word	0x50040100
 8001884:	50040000 	.word	0x50040000

08001888 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0b6      	sub	sp, #216	; 0xd8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x22>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e3c7      	b.n	800203a <HAL_ADC_ConfigChannel+0x7b2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fdaf 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 83a8 	bne.w	8002014 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d824      	bhi.n	8001916 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	3b02      	subs	r3, #2
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d81b      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x86>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <HAL_ADC_ConfigChannel+0x54>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001905 	.word	0x08001905
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	220c      	movs	r2, #12
 80018f0:	605a      	str	r2, [r3, #4]
          break;
 80018f2:	e011      	b.n	8001918 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2212      	movs	r2, #18
 80018f8:	605a      	str	r2, [r3, #4]
          break;
 80018fa:	e00d      	b.n	8001918 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2218      	movs	r2, #24
 8001900:	605a      	str	r2, [r3, #4]
          break;
 8001902:	e009      	b.n	8001918 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190a:	605a      	str	r2, [r3, #4]
          break;
 800190c:	e004      	b.n	8001918 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2206      	movs	r2, #6
 8001912:	605a      	str	r2, [r3, #4]
          break;
 8001914:	e000      	b.n	8001918 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001916:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	f7ff fc66 	bl	80011f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd73 	bl	800141a <LL_ADC_REG_IsConversionOngoing>
 8001934:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fd7f 	bl	8001440 <LL_ADC_INJ_IsConversionOngoing>
 8001942:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001946:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 81a6 	bne.w	8001c9c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 81a1 	bne.w	8001c9c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	461a      	mov	r2, r3
 8001968:	f7ff fc71 	bl	800124e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d00a      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6919      	ldr	r1, [r3, #16]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800199e:	f7ff fbd5 	bl	800114c <LL_ADC_SetOffset>
 80019a2:	e17b      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fbf2 	bl	8001194 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x148>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbe7 	bl	8001194 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0e9b      	lsrs	r3, r3, #26
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	e01e      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x186>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbdc 	bl	8001194 <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x19e>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	e018      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x1d0>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fbab 	bl	80011c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fb8f 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x20e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fb84 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	e01e      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x24c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb79 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x264>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	e018      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x296>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b10:	2320      	movs	r3, #32
 8001b12:	e004      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d106      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fb48 	bl	80011c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2102      	movs	r1, #2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fb2c 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x2d4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb21 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	0e9b      	lsrs	r3, r3, #26
 8001b56:	f003 021f 	and.w	r2, r3, #31
 8001b5a:	e01e      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x312>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2102      	movs	r1, #2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb16 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e004      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x32a>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	e016      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x358>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	e004      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2102      	movs	r1, #2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fae7 	bl	80011c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff facb 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x396>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2103      	movs	r1, #3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fac0 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	e017      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x3c6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2103      	movs	r1, #3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fab5 	bl	8001194 <LL_ADC_GetOffsetChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e003      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x3de>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	e011      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x402>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e003      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	2103      	movs	r1, #3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fa92 	bl	80011c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fb93 	bl	80013cc <LL_ADC_IsEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 813f 	bne.w	8001f2c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6819      	ldr	r1, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f7ff faf2 	bl	80012a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a8e      	ldr	r2, [pc, #568]	; (8001f00 <HAL_ADC_ConfigChannel+0x678>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f040 8130 	bne.w	8001f2c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10b      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x46c>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0e9b      	lsrs	r3, r3, #26
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	bf94      	ite	ls
 8001cec:	2301      	movls	r3, #1
 8001cee:	2300      	movhi	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e019      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x4a0>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	e003      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	bf94      	ite	ls
 8001d22:	2301      	movls	r3, #1
 8001d24:	2300      	movhi	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d079      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x4c0>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	069b      	lsls	r3, r3, #26
 8001d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d46:	e015      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x4ec>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x50c>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	3301      	adds	r3, #1
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	e017      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x53c>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	ea42 0103 	orr.w	r1, r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10a      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x562>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	051b      	lsls	r3, r3, #20
 8001de8:	e018      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x594>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e003      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	e080      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x5b4>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	069b      	lsls	r3, r3, #26
 8001e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3a:	e015      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x5e0>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	069b      	lsls	r3, r3, #26
 8001e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x600>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	e017      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x630>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	61fb      	str	r3, [r7, #28]
  return result;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e003      	b.n	8001eac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	ea42 0103 	orr.w	r1, r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x65c>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b1e      	subs	r3, #30
 8001edc:	051b      	lsls	r3, r3, #20
 8001ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	e01d      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x698>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	613b      	str	r3, [r7, #16]
  return result;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d103      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e005      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x684>
 8001f00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 021f 	and.w	r2, r3, #31
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f20:	430b      	orrs	r3, r1
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	6892      	ldr	r2, [r2, #8]
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7ff f991 	bl	800124e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d07a      	beq.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f38:	4843      	ldr	r0, [pc, #268]	; (8002048 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f3a:	f7ff f8f9 	bl	8001130 <LL_ADC_GetCommonPathInternalCh>
 8001f3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a41      	ldr	r2, [pc, #260]	; (800204c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d12c      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d126      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_ADC_ConfigChannel+0x6e4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d15d      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f74:	4619      	mov	r1, r3
 8001f76:	4834      	ldr	r0, [pc, #208]	; (8002048 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f78:	f7ff f8c7 	bl	800110a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	4a36      	ldr	r2, [pc, #216]	; (800205c <HAL_ADC_ConfigChannel+0x7d4>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f96:	e002      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f9      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fa4:	e040      	b.n	8002028 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d118      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x75a>
 8001fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d112      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x748>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d12d      	bne.n	800202c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481b      	ldr	r0, [pc, #108]	; (8002048 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fdc:	f7ff f895 	bl	800110a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe0:	e024      	b.n	800202c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d120      	bne.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11a      	bne.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d115      	bne.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800200a:	4619      	mov	r1, r3
 800200c:	480e      	ldr	r0, [pc, #56]	; (8002048 <HAL_ADC_ConfigChannel+0x7c0>)
 800200e:	f7ff f87c 	bl	800110a <LL_ADC_SetCommonPathInternalCh>
 8002012:	e00c      	b.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002026:	e002      	b.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002028:	bf00      	nop
 800202a:	e000      	b.n	800202e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800202c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002036:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800203a:	4618      	mov	r0, r3
 800203c:	37d8      	adds	r7, #216	; 0xd8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	80080000 	.word	0x80080000
 8002048:	50040300 	.word	0x50040300
 800204c:	c7520000 	.word	0xc7520000
 8002050:	50040000 	.word	0x50040000
 8002054:	50040200 	.word	0x50040200
 8002058:	20000000 	.word	0x20000000
 800205c:	053e2d63 	.word	0x053e2d63
 8002060:	cb840000 	.word	0xcb840000
 8002064:	80000001 	.word	0x80000001

08002068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f9a9 	bl	80013cc <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d14d      	bne.n	800211c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <ADC_Enable+0xc0>)
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00d      	beq.n	80020aa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e039      	b.n	800211e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f978 	bl	80013a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020b4:	f7ff f80a 	bl	80010cc <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ba:	e028      	b.n	800210e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f983 	bl	80013cc <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f967 	bl	80013a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020d6:	f7fe fff9 	bl	80010cc <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d914      	bls.n	800210e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d00d      	beq.n	800210e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e007      	b.n	800211e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d1cf      	bne.n	80020bc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	8000003f 	.word	0x8000003f

0800212c <LL_ADC_IsEnabled>:
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <LL_ADC_IsEnabled+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_ADC_IsEnabled+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_ADC_REG_IsConversionOngoing>:
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d101      	bne.n	800216a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b09f      	sub	sp, #124	; 0x7c
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002192:	2302      	movs	r3, #2
 8002194:	e093      	b.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800219e:	2300      	movs	r3, #0
 80021a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80021a2:	2300      	movs	r3, #0
 80021a4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d102      	bne.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	e001      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e072      	b.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ffb9 	bl	8002152 <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ffb3 	bl	8002152 <LL_ADC_REG_IsConversionOngoing>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d154      	bne.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80021f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d151      	bne.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80021fa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d02c      	beq.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002216:	035b      	lsls	r3, r3, #13
 8002218:	430b      	orrs	r3, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002220:	4829      	ldr	r0, [pc, #164]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002222:	f7ff ff83 	bl	800212c <LL_ADC_IsEnabled>
 8002226:	4604      	mov	r4, r0
 8002228:	4828      	ldr	r0, [pc, #160]	; (80022cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800222a:	f7ff ff7f 	bl	800212c <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	431c      	orrs	r4, r3
 8002232:	4828      	ldr	r0, [pc, #160]	; (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002234:	f7ff ff7a 	bl	800212c <LL_ADC_IsEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	4323      	orrs	r3, r4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d137      	bne.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002248:	f023 030f 	bic.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	6811      	ldr	r1, [r2, #0]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	6892      	ldr	r2, [r2, #8]
 8002254:	430a      	orrs	r2, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800225c:	e028      	b.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800225e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800226a:	4817      	ldr	r0, [pc, #92]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800226c:	f7ff ff5e 	bl	800212c <LL_ADC_IsEnabled>
 8002270:	4604      	mov	r4, r0
 8002272:	4816      	ldr	r0, [pc, #88]	; (80022cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002274:	f7ff ff5a 	bl	800212c <LL_ADC_IsEnabled>
 8002278:	4603      	mov	r3, r0
 800227a:	431c      	orrs	r4, r3
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800227e:	f7ff ff55 	bl	800212c <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	4323      	orrs	r3, r4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d112      	bne.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800228a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002292:	f023 030f 	bic.w	r3, r3, #15
 8002296:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002298:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800229a:	e009      	b.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022ae:	e000      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80022be:	4618      	mov	r0, r3
 80022c0:	377c      	adds	r7, #124	; 0x7c
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	50040000 	.word	0x50040000
 80022cc:	50040100 	.word	0x50040100
 80022d0:	50040300 	.word	0x50040300
 80022d4:	50040200 	.word	0x50040200

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff29 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff3e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff31 	bl	800233c <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e17f      	b.n	800280c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8171 	beq.w	8002806 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d00b      	beq.n	8002544 <HAL_GPIO_Init+0x48>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002538:	2b11      	cmp	r3, #17
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0201 	and.w	r2, r3, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d118      	bne.n	80025e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x128>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	6939      	ldr	r1, [r7, #16]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80ac 	beq.w	8002806 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_GPIO_Init+0x330>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b2:	4a5e      	ldr	r2, [pc, #376]	; (800282c <HAL_GPIO_Init+0x330>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6613      	str	r3, [r2, #96]	; 0x60
 80026ba:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_GPIO_Init+0x330>)
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c6:	4a5a      	ldr	r2, [pc, #360]	; (8002830 <HAL_GPIO_Init+0x334>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x242>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4f      	ldr	r2, [pc, #316]	; (8002834 <HAL_GPIO_Init+0x338>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x23e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <HAL_GPIO_Init+0x33c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x23a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4d      	ldr	r2, [pc, #308]	; (800283c <HAL_GPIO_Init+0x340>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x236>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_GPIO_Init+0x344>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x232>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_GPIO_Init+0x348>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x22e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <HAL_GPIO_Init+0x34c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x22a>
 8002722:	2306      	movs	r3, #6
 8002724:	e00c      	b.n	8002740 <HAL_GPIO_Init+0x244>
 8002726:	2307      	movs	r3, #7
 8002728:	e00a      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800272a:	2305      	movs	r3, #5
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800272e:	2304      	movs	r3, #4
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x244>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x244>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800273e:	2300      	movs	r3, #0
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002750:	4937      	ldr	r1, [pc, #220]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_GPIO_Init+0x350>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002782:	4a32      	ldr	r2, [pc, #200]	; (800284c <HAL_GPIO_Init+0x350>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_GPIO_Init+0x350>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <HAL_GPIO_Init+0x350>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_GPIO_Init+0x350>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_GPIO_Init+0x350>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_GPIO_Init+0x350>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_GPIO_Init+0x350>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f47f ae78 	bne.w	800250c <HAL_GPIO_Init+0x10>
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40010000 	.word	0x40010000
 8002834:	48000400 	.word	0x48000400
 8002838:	48000800 	.word	0x48000800
 800283c:	48000c00 	.word	0x48000c00
 8002840:	48001000 	.word	0x48001000
 8002844:	48001400 	.word	0x48001400
 8002848:	48001800 	.word	0x48001800
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800286c:	e002      	b.n	8002874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43d9      	mvns	r1, r3
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	400b      	ands	r3, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f928 	bl	8000b28 <HAL_GPIO_EXTI_Callback>
  }
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290e:	d130      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800291c:	d038      	beq.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002926:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2232      	movs	r2, #50	; 0x32
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	3301      	adds	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	e002      	b.n	800294c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b01      	subs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	d102      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f2      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d110      	bne.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d007      	beq.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002988:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40007000 	.word	0x40007000
 80029a4:	20000000 	.word	0x20000000
 80029a8:	431bde83 	.word	0x431bde83

080029ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e3d4      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029be:	4ba1      	ldr	r3, [pc, #644]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c8:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80e4 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_RCC_OscConfig+0x4a>
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	f040 808b 	bne.w	8002b04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 8087 	bne.w	8002b04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f6:	4b93      	ldr	r3, [pc, #588]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e3ac      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_RCC_OscConfig+0x7c>
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a26:	e005      	b.n	8002a34 <HAL_RCC_OscConfig+0x88>
 8002a28:	4b86      	ldr	r3, [pc, #536]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d223      	bcs.n	8002a80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fd41 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e38d      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4c:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a7c      	ldr	r2, [pc, #496]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a52:	f043 0308 	orr.w	r3, r3, #8
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4977      	ldr	r1, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	4972      	ldr	r1, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
 8002a7e:	e025      	b.n	8002acc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a80:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	496a      	ldr	r1, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a9e:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	4965      	ldr	r1, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fd01 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e34d      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002acc:	f000 fc36 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	495a      	ldr	r1, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x29c>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_RCC_OscConfig+0x2a0>)
 8002aea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aec:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_RCC_OscConfig+0x2a4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fa9b 	bl	800102c <HAL_InitTick>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d052      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	e331      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b0c:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fad8 	bl	80010cc <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b20:	f7fe fad4 	bl	80010cc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e31a      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a40      	ldr	r2, [pc, #256]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b44:	f043 0308 	orr.w	r3, r3, #8
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	493b      	ldr	r1, [pc, #236]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	4936      	ldr	r1, [pc, #216]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	e01a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a33      	ldr	r2, [pc, #204]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe faa5 	bl	80010cc <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b86:	f7fe faa1 	bl	80010cc <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e2e7      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1da>
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d074      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x21a>
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d10e      	bne.n	8002bde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d10b      	bne.n	8002bde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d064      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d160      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e2c4      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x24a>
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	e01d      	b.n	8002c32 <HAL_RCC_OscConfig+0x286>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x26e>
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x286>
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01c      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fa47 	bl	80010cc <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c40:	e011      	b.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	0800582c 	.word	0x0800582c
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe fa3a 	bl	80010cc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e280      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	4baf      	ldr	r3, [pc, #700]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2a8>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fa2a 	bl	80010cc <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fa26 	bl	80010cc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e26c      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	4ba5      	ldr	r3, [pc, #660]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d0>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d060      	beq.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_OscConfig+0x310>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d116      	bne.n	8002cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	4b99      	ldr	r3, [pc, #612]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x328>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e249      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b93      	ldr	r3, [pc, #588]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4990      	ldr	r1, [pc, #576]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	e040      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d023      	beq.n	8002d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf2:	4b8c      	ldr	r3, [pc, #560]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a8b      	ldr	r2, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe f9e5 	bl	80010cc <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fe f9e1 	bl	80010cc <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e227      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	497c      	ldr	r1, [pc, #496]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e018      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a79      	ldr	r2, [pc, #484]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe f9c1 	bl	80010cc <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe f9bd 	bl	80010cc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e203      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01c      	beq.n	8002dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d80:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	4a67      	ldr	r2, [pc, #412]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe f99c 	bl	80010cc <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe f998 	bl	80010cc <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1de      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002daa:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3ec>
 8002db8:	e01b      	b.n	8002df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dba:	4b5a      	ldr	r3, [pc, #360]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe f97f 	bl	80010cc <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe f97b 	bl	80010cc <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1c1      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de4:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ef      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a6 	beq.w	8002f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d118      	bne.n	8002e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e44:	f7fe f942 	bl	80010cc <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fe f93e 	bl	80010cc <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e184      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4d8>
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e82:	e024      	b.n	8002ece <HAL_RCC_OscConfig+0x522>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d110      	bne.n	8002eae <HAL_RCC_OscConfig+0x502>
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eac:	e00f      	b.n	8002ece <HAL_RCC_OscConfig+0x522>
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe f8f9 	bl	80010cc <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe f8f5 	bl	80010cc <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e139      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ed      	beq.n	8002ede <HAL_RCC_OscConfig+0x532>
 8002f02:	e01a      	b.n	8002f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe f8e2 	bl	80010cc <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe f8de 	bl	80010cc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d906      	bls.n	8002f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e122      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2c:	4b90      	ldr	r3, [pc, #576]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e8      	bne.n	8002f0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4b8b      	ldr	r3, [pc, #556]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8108 	beq.w	8003166 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	f040 80d0 	bne.w	8003100 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f60:	4b83      	ldr	r3, [pc, #524]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0203 	and.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d130      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d127      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d11f      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa0:	2a07      	cmp	r2, #7
 8002fa2:	bf14      	ite	ne
 8002fa4:	2201      	movne	r2, #1
 8002fa6:	2200      	moveq	r2, #0
 8002fa8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d113      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d06e      	beq.n	80030b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d069      	beq.n	80030b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fdc:	4b64      	ldr	r3, [pc, #400]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fe8:	4b61      	ldr	r3, [pc, #388]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b7      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003004:	f7fe f862 	bl	80010cc <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe f85e 	bl	80010cc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0a4      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCC_OscConfig+0x7c8>)
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800303a:	3a01      	subs	r2, #1
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003044:	0212      	lsls	r2, r2, #8
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800304c:	0852      	lsrs	r2, r2, #1
 800304e:	3a01      	subs	r2, #1
 8003050:	0552      	lsls	r2, r2, #21
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003058:	0852      	lsrs	r2, r2, #1
 800305a:	3a01      	subs	r2, #1
 800305c:	0652      	lsls	r2, r2, #25
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003064:	0912      	lsrs	r2, r2, #4
 8003066:	0452      	lsls	r2, r2, #17
 8003068:	430a      	orrs	r2, r1
 800306a:	4941      	ldr	r1, [pc, #260]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003070:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a3e      	ldr	r2, [pc, #248]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800307c:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a3b      	ldr	r2, [pc, #236]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003088:	f7fe f820 	bl	80010cc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe f81c 	bl	80010cc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e062      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ae:	e05a      	b.n	8003166 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e059      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b4:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d152      	bne.n	8003166 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030d8:	f7fd fff8 	bl	80010cc <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd fff4 	bl	80010cc <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e03a      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x734>
 80030fe:	e032      	b.n	8003166 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d02d      	beq.n	8003162 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 800310c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003110:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003124:	f023 0303 	bic.w	r3, r3, #3
 8003128:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003130:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003138:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fd ffc7 	bl	80010cc <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003142:	f7fd ffc3 	bl	80010cc <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e009      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_OscConfig+0x7c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x796>
 8003160:	e001      	b.n	8003166 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	f99d808c 	.word	0xf99d808c

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0c8      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4961      	ldr	r1, [pc, #388]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b5f      	ldr	r3, [pc, #380]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0b0      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d04c      	beq.n	8003262 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d0:	4b56      	ldr	r3, [pc, #344]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e09e      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e092      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003200:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e086      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e07e      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003220:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 0203 	bic.w	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	493f      	ldr	r1, [pc, #252]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003232:	f7fd ff4b 	bl	80010cc <HAL_GetTick>
 8003236:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003238:	e00a      	b.n	8003250 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fd ff47 	bl	80010cc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e066      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 020c 	and.w	r2, r3, #12
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	429a      	cmp	r2, r3
 8003260:	d1eb      	bne.n	800323a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	492c      	ldr	r1, [pc, #176]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d210      	bcs.n	80032b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b26      	ldr	r3, [pc, #152]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 0207 	bic.w	r2, r3, #7
 8003296:	4924      	ldr	r1, [pc, #144]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_ClockConfig+0x1b0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e036      	b.n	800331e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4918      	ldr	r1, [pc, #96]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4910      	ldr	r1, [pc, #64]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ee:	f000 f825 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	490c      	ldr	r1, [pc, #48]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	5ccb      	ldrb	r3, [r1, r3]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fe8a 	bl	800102c <HAL_InitTick>
 8003318:	4603      	mov	r3, r0
 800331a:	72fb      	strb	r3, [r7, #11]

  return status;
 800331c:	7afb      	ldrb	r3, [r7, #11]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40022000 	.word	0x40022000
 800332c:	40021000 	.word	0x40021000
 8003330:	0800582c 	.word	0x0800582c
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d121      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d11e      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_RCC_GetSysClockFreq+0x10c>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCC_GetSysClockFreq+0x110>)
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e004      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033c0:	4b23      	ldr	r3, [pc, #140]	; (8003450 <HAL_RCC_GetSysClockFreq+0x114>)
 80033c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d134      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d003      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xac>
 80033e0:	e005      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_RCC_GetSysClockFreq+0x110>)
 80033e4:	617b      	str	r3, [r7, #20]
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ea:	617b      	str	r3, [r7, #20]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	617b      	str	r3, [r7, #20]
      break;
 80033f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	3301      	adds	r3, #1
 8003400:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	fb02 f203 	mul.w	r2, r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	0e5b      	lsrs	r3, r3, #25
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	3301      	adds	r3, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003434:	69bb      	ldr	r3, [r7, #24]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	08005844 	.word	0x08005844
 800344c:	00f42400 	.word	0x00f42400
 8003450:	007a1200 	.word	0x007a1200

08003454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_GetHCLKFreq+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000000 	.word	0x20000000

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003470:	f7ff fff0 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4904      	ldr	r1, [pc, #16]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	0800583c 	.word	0x0800583c

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800349c:	f7ff ffda 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	0800583c 	.word	0x0800583c

080034c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034dc:	f7ff fa02 	bl	80028e4 <HAL_PWREx_GetVoltageRange>
 80034e0:	6178      	str	r0, [r7, #20]
 80034e2:	e014      	b.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b25      	ldr	r3, [pc, #148]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
 80034f0:	4b22      	ldr	r3, [pc, #136]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034fc:	f7ff f9f2 	bl	80028e4 <HAL_PWREx_GetVoltageRange>
 8003500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d10b      	bne.n	800352e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d919      	bls.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2ba0      	cmp	r3, #160	; 0xa0
 8003520:	d902      	bls.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003522:	2302      	movs	r3, #2
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e013      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003528:	2301      	movs	r3, #1
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	e010      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d902      	bls.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003534:	2303      	movs	r3, #3
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e00a      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d102      	bne.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003540:	2302      	movs	r3, #2
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	e004      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b70      	cmp	r3, #112	; 0x70
 800354a:	d101      	bne.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800354c:	2301      	movs	r3, #1
 800354e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 0207 	bic.w	r2, r3, #7
 8003558:	4909      	ldr	r1, [pc, #36]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	40022000 	.word	0x40022000

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003590:	2300      	movs	r3, #0
 8003592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359c:	2b00      	cmp	r3, #0
 800359e:	d041      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a8:	d02a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ae:	d824      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ba:	d81e      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d010      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035c6:	e018      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c8:	4b86      	ldr	r3, [pc, #536]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a85      	ldr	r2, [pc, #532]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d4:	e015      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fabb 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e6:	e00c      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3320      	adds	r3, #32
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fba6 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	74fb      	strb	r3, [r7, #19]
      break;
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003608:	4b76      	ldr	r3, [pc, #472]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	4973      	ldr	r1, [pc, #460]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d041      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003634:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800363a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003658:	4b62      	ldr	r3, [pc, #392]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a61      	ldr	r2, [pc, #388]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fa73 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3320      	adds	r3, #32
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fb5e 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003698:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a6:	494f      	ldr	r1, [pc, #316]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a0 	beq.w	8003802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a40      	ldr	r2, [pc, #256]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3a      	ldr	r2, [pc, #232]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003704:	f7fd fce2 	bl	80010cc <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800370a:	e009      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fd fcde 	bl	80010cc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	74fb      	strb	r3, [r7, #19]
        break;
 800371e:	e005      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d15c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003732:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	429a      	cmp	r2, r3
 800374e:	d019      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fd fc9d 	bl	80010cc <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003794:	e00b      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd fc99 	bl	80010cc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d902      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	74fb      	strb	r3, [r7, #19]
            break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ec      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	4904      	ldr	r1, [pc, #16]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037da:	e009      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f0:	7c7b      	ldrb	r3, [r7, #17]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b9e      	ldr	r3, [pc, #632]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a9d      	ldr	r2, [pc, #628]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380e:	4b98      	ldr	r3, [pc, #608]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4994      	ldr	r1, [pc, #592]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003830:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 020c 	bic.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	498c      	ldr	r1, [pc, #560]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003852:	4b87      	ldr	r3, [pc, #540]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	4983      	ldr	r1, [pc, #524]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003874:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	497b      	ldr	r1, [pc, #492]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003896:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	4972      	ldr	r1, [pc, #456]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b8:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	496a      	ldr	r1, [pc, #424]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038da:	4b65      	ldr	r3, [pc, #404]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	4961      	ldr	r1, [pc, #388]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038fc:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	4959      	ldr	r1, [pc, #356]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391e:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	4950      	ldr	r1, [pc, #320]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	4948      	ldr	r1, [pc, #288]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003962:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	493f      	ldr	r1, [pc, #252]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d028      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003984:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003992:	4937      	ldr	r1, [pc, #220]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ae:	60d3      	str	r3, [r2, #12]
 80039b0:	e011      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f8c8 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d028      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	491f      	ldr	r1, [pc, #124]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0c:	60d3      	str	r3, [r2, #12]
 8003a0e:	e011      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f899 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02b      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5e:	d109      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a02      	ldr	r2, [pc, #8]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
 8003a6c:	e014      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f867 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02f      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	4928      	ldr	r1, [pc, #160]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f844 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
 8003ade:	e011      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3320      	adds	r3, #32
 8003aee:	2102      	movs	r1, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 f925 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1e:	490d      	ldr	r1, [pc, #52]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b42:	4904      	ldr	r1, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000

08003b58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b66:	4b75      	ldr	r3, [pc, #468]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b72:	4b72      	ldr	r3, [pc, #456]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0203 	and.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10d      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
       ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b8a:	4b6c      	ldr	r3, [pc, #432]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
       ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d047      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e044      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d018      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0x86>
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d825      	bhi.n	8003bfc <RCCEx_PLLSAI1_Config+0xa4>
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d002      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x62>
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d009      	beq.n	8003bcc <RCCEx_PLLSAI1_Config+0x74>
 8003bb8:	e020      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bba:	4b60      	ldr	r3, [pc, #384]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11d      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bca:	e01a      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bcc:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d116      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bdc:	e013      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bea:	4b54      	ldr	r3, [pc, #336]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bfa:	e006      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e004      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	430b      	orrs	r3, r1
 8003c28:	4944      	ldr	r1, [pc, #272]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d17d      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c34:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd fa44 	bl	80010cc <HAL_GetTick>
 8003c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c46:	e009      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c48:	f7fd fa40 	bl	80010cc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5a:	e005      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c5c:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ef      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d160      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d111      	bne.n	8003c98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	0912      	lsrs	r2, r2, #4
 8003c8c:	0452      	lsls	r2, r2, #17
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	492a      	ldr	r1, [pc, #168]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]
 8003c96:	e027      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d112      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ca6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6892      	ldr	r2, [r2, #8]
 8003cae:	0211      	lsls	r1, r2, #8
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6912      	ldr	r2, [r2, #16]
 8003cb4:	0852      	lsrs	r2, r2, #1
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	0552      	lsls	r2, r2, #21
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	491f      	ldr	r1, [pc, #124]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]
 8003cc2:	e011      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ccc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6892      	ldr	r2, [r2, #8]
 8003cd4:	0211      	lsls	r1, r2, #8
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6952      	ldr	r2, [r2, #20]
 8003cda:	0852      	lsrs	r2, r2, #1
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0652      	lsls	r2, r2, #25
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4916      	ldr	r1, [pc, #88]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd f9ea 	bl	80010cc <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cfa:	e009      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfc:	f7fd f9e6 	bl	80010cc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d902      	bls.n	8003d10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d0e:	e005      	b.n	8003d1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	4904      	ldr	r1, [pc, #16]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000

08003d40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d5a:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d10d      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d72:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
       ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d047      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d018      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0x86>
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d825      	bhi.n	8003de4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <RCCEx_PLLSAI2_Config+0x62>
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d009      	beq.n	8003db4 <RCCEx_PLLSAI2_Config+0x74>
 8003da0:	e020      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da2:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db2:	e01a      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e013      	b.n	8003dee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc6:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de2:	e006      	b.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e004      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4939      	ldr	r1, [pc, #228]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d167      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd f950 	bl	80010cc <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e2e:	e009      	b.n	8003e44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e30:	f7fd f94c 	bl	80010cc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	73fb      	strb	r3, [r7, #15]
        break;
 8003e42:	e005      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ef      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d14a      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	0211      	lsls	r1, r2, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	0912      	lsrs	r2, r2, #4
 8003e74:	0452      	lsls	r2, r2, #17
 8003e76:	430a      	orrs	r2, r1
 8003e78:	491f      	ldr	r1, [pc, #124]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	614b      	str	r3, [r1, #20]
 8003e7e:	e011      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0652      	lsls	r2, r2, #25
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	4916      	ldr	r1, [pc, #88]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fd f90c 	bl	80010cc <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb8:	f7fd f908 	bl	80010cc <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ef      	beq.n	8003eb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e049      	b.n	8003fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc ff3e 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f000 f9ee 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04f      	b.n	8004064 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a23      	ldr	r2, [pc, #140]	; (8004070 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <HAL_TIM_Base_Start_IT+0x76>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d018      	beq.n	8004022 <HAL_TIM_Base_Start_IT+0x76>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_TIM_Base_Start_IT+0x76>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_TIM_Base_Start_IT+0xcc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIM_Base_Start_IT+0x76>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_TIM_Base_Start_IT+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIM_Base_Start_IT+0x76>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_TIM_Base_Start_IT+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIM_Base_Start_IT+0x76>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_TIM_Base_Start_IT+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d115      	bne.n	800404e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HAL_TIM_Base_Start_IT+0xdc>)
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b06      	cmp	r3, #6
 8004032:	d015      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0xb4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d011      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404c:	e008      	b.n	8004060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e000      	b.n	8004062 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40014000 	.word	0x40014000
 8004088:	00010007 	.word	0x00010007

0800408c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0202 	mvn.w	r2, #2
 80040b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f905 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8f7 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f908 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d122      	bne.n	800413c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d11b      	bne.n	800413c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0204 	mvn.w	r2, #4
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8db 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8cd 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8de 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d122      	bne.n	8004190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d11b      	bne.n	8004190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0208 	mvn.w	r2, #8
 8004160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2204      	movs	r2, #4
 8004166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f8b1 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8a3 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f8b4 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b10      	cmp	r3, #16
 800419c:	d122      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d11b      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0210 	mvn.w	r2, #16
 80041b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2208      	movs	r2, #8
 80041ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f887 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f879 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f88a 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d10e      	bne.n	8004210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0201 	mvn.w	r2, #1
 8004208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fc fcae 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d10e      	bne.n	800423c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b80      	cmp	r3, #128	; 0x80
 800422a:	d107      	bne.n	800423c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f99c 	bl	8004574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424a:	d10e      	bne.n	800426a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d107      	bne.n	800426a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f98f 	bl	8004588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d10e      	bne.n	8004296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d107      	bne.n	8004296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800428e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f838 	bl	8004306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d10e      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d107      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0220 	mvn.w	r2, #32
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f94f 	bl	8004560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a40      	ldr	r2, [pc, #256]	; (8004430 <TIM_Base_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3d      	ldr	r2, [pc, #244]	; (8004434 <TIM_Base_SetConfig+0x118>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <TIM_Base_SetConfig+0x120>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3a      	ldr	r2, [pc, #232]	; (8004440 <TIM_Base_SetConfig+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d108      	bne.n	800436e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <TIM_Base_SetConfig+0x114>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01f      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d01b      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <TIM_Base_SetConfig+0x118>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d017      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <TIM_Base_SetConfig+0x120>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <TIM_Base_SetConfig+0x124>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a28      	ldr	r2, [pc, #160]	; (8004444 <TIM_Base_SetConfig+0x128>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a27      	ldr	r2, [pc, #156]	; (8004448 <TIM_Base_SetConfig+0x12c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <TIM_Base_SetConfig+0x130>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a10      	ldr	r2, [pc, #64]	; (8004430 <TIM_Base_SetConfig+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00f      	beq.n	8004414 <TIM_Base_SetConfig+0xf8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <TIM_Base_SetConfig+0x124>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00b      	beq.n	8004414 <TIM_Base_SetConfig+0xf8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a11      	ldr	r2, [pc, #68]	; (8004444 <TIM_Base_SetConfig+0x128>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_Base_SetConfig+0xf8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a10      	ldr	r2, [pc, #64]	; (8004448 <TIM_Base_SetConfig+0x12c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_Base_SetConfig+0xf8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a0f      	ldr	r2, [pc, #60]	; (800444c <TIM_Base_SetConfig+0x130>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d103      	bne.n	800441c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	615a      	str	r2, [r3, #20]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800

08004450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004464:	2302      	movs	r3, #2
 8004466:	e068      	b.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2e      	ldr	r2, [pc, #184]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2d      	ldr	r2, [pc, #180]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d018      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a13      	ldr	r2, [pc, #76]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a14      	ldr	r2, [pc, #80]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10c      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40014000 	.word	0x40014000

08004560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e040      	b.n	8004630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fc76 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	; 0x24
 80045c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8c0 	bl	8004760 <UART_SetConfig>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e022      	b.n	8004630 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fb3e 	bl	8004c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fbc5 	bl	8004db8 <UART_CheckIdleState>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800464c:	2b20      	cmp	r3, #32
 800464e:	f040 8082 	bne.w	8004756 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Transmit+0x26>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07a      	b.n	8004758 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_UART_Transmit+0x38>
 800466c:	2302      	movs	r3, #2
 800466e:	e073      	b.n	8004758 <HAL_UART_Transmit+0x120>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2221      	movs	r2, #33	; 0x21
 8004684:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004686:	f7fc fd21 	bl	80010cc <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d108      	bne.n	80046b8 <HAL_UART_Transmit+0x80>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e003      	b.n	80046c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046c8:	e02d      	b.n	8004726 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fbb8 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e039      	b.n	8004758 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f6:	b292      	uxth	r2, r2
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	3302      	adds	r3, #2
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e008      	b.n	8004714 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	b292      	uxth	r2, r2
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1cb      	bne.n	80046ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	2140      	movs	r1, #64	; 0x40
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fb84 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e005      	b.n	8004758 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e000      	b.n	8004758 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
  }
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004760:	b5b0      	push	{r4, r5, r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4bad      	ldr	r3, [pc, #692]	; (8004a40 <UART_SetConfig+0x2e0>)
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	69f9      	ldr	r1, [r7, #28]
 8004794:	430b      	orrs	r3, r1
 8004796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4aa2      	ldr	r2, [pc, #648]	; (8004a44 <UART_SetConfig+0x2e4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	430a      	orrs	r2, r1
 80047da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a99      	ldr	r2, [pc, #612]	; (8004a48 <UART_SetConfig+0x2e8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d121      	bne.n	800482a <UART_SetConfig+0xca>
 80047e6:	4b99      	ldr	r3, [pc, #612]	; (8004a4c <UART_SetConfig+0x2ec>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d817      	bhi.n	8004824 <UART_SetConfig+0xc4>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x9c>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004819 	.word	0x08004819
 8004804:	08004813 	.word	0x08004813
 8004808:	0800481f 	.word	0x0800481f
 800480c:	2301      	movs	r3, #1
 800480e:	76fb      	strb	r3, [r7, #27]
 8004810:	e0e7      	b.n	80049e2 <UART_SetConfig+0x282>
 8004812:	2302      	movs	r3, #2
 8004814:	76fb      	strb	r3, [r7, #27]
 8004816:	e0e4      	b.n	80049e2 <UART_SetConfig+0x282>
 8004818:	2304      	movs	r3, #4
 800481a:	76fb      	strb	r3, [r7, #27]
 800481c:	e0e1      	b.n	80049e2 <UART_SetConfig+0x282>
 800481e:	2308      	movs	r3, #8
 8004820:	76fb      	strb	r3, [r7, #27]
 8004822:	e0de      	b.n	80049e2 <UART_SetConfig+0x282>
 8004824:	2310      	movs	r3, #16
 8004826:	76fb      	strb	r3, [r7, #27]
 8004828:	e0db      	b.n	80049e2 <UART_SetConfig+0x282>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a88      	ldr	r2, [pc, #544]	; (8004a50 <UART_SetConfig+0x2f0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d132      	bne.n	800489a <UART_SetConfig+0x13a>
 8004834:	4b85      	ldr	r3, [pc, #532]	; (8004a4c <UART_SetConfig+0x2ec>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d828      	bhi.n	8004894 <UART_SetConfig+0x134>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0xe8>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	0800487d 	.word	0x0800487d
 800484c:	08004895 	.word	0x08004895
 8004850:	08004895 	.word	0x08004895
 8004854:	08004895 	.word	0x08004895
 8004858:	08004889 	.word	0x08004889
 800485c:	08004895 	.word	0x08004895
 8004860:	08004895 	.word	0x08004895
 8004864:	08004895 	.word	0x08004895
 8004868:	08004883 	.word	0x08004883
 800486c:	08004895 	.word	0x08004895
 8004870:	08004895 	.word	0x08004895
 8004874:	08004895 	.word	0x08004895
 8004878:	0800488f 	.word	0x0800488f
 800487c:	2300      	movs	r3, #0
 800487e:	76fb      	strb	r3, [r7, #27]
 8004880:	e0af      	b.n	80049e2 <UART_SetConfig+0x282>
 8004882:	2302      	movs	r3, #2
 8004884:	76fb      	strb	r3, [r7, #27]
 8004886:	e0ac      	b.n	80049e2 <UART_SetConfig+0x282>
 8004888:	2304      	movs	r3, #4
 800488a:	76fb      	strb	r3, [r7, #27]
 800488c:	e0a9      	b.n	80049e2 <UART_SetConfig+0x282>
 800488e:	2308      	movs	r3, #8
 8004890:	76fb      	strb	r3, [r7, #27]
 8004892:	e0a6      	b.n	80049e2 <UART_SetConfig+0x282>
 8004894:	2310      	movs	r3, #16
 8004896:	76fb      	strb	r3, [r7, #27]
 8004898:	e0a3      	b.n	80049e2 <UART_SetConfig+0x282>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6d      	ldr	r2, [pc, #436]	; (8004a54 <UART_SetConfig+0x2f4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d120      	bne.n	80048e6 <UART_SetConfig+0x186>
 80048a4:	4b69      	ldr	r3, [pc, #420]	; (8004a4c <UART_SetConfig+0x2ec>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	d013      	beq.n	80048da <UART_SetConfig+0x17a>
 80048b2:	2b30      	cmp	r3, #48	; 0x30
 80048b4:	d814      	bhi.n	80048e0 <UART_SetConfig+0x180>
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d009      	beq.n	80048ce <UART_SetConfig+0x16e>
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d810      	bhi.n	80048e0 <UART_SetConfig+0x180>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <UART_SetConfig+0x168>
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d006      	beq.n	80048d4 <UART_SetConfig+0x174>
 80048c6:	e00b      	b.n	80048e0 <UART_SetConfig+0x180>
 80048c8:	2300      	movs	r3, #0
 80048ca:	76fb      	strb	r3, [r7, #27]
 80048cc:	e089      	b.n	80049e2 <UART_SetConfig+0x282>
 80048ce:	2302      	movs	r3, #2
 80048d0:	76fb      	strb	r3, [r7, #27]
 80048d2:	e086      	b.n	80049e2 <UART_SetConfig+0x282>
 80048d4:	2304      	movs	r3, #4
 80048d6:	76fb      	strb	r3, [r7, #27]
 80048d8:	e083      	b.n	80049e2 <UART_SetConfig+0x282>
 80048da:	2308      	movs	r3, #8
 80048dc:	76fb      	strb	r3, [r7, #27]
 80048de:	e080      	b.n	80049e2 <UART_SetConfig+0x282>
 80048e0:	2310      	movs	r3, #16
 80048e2:	76fb      	strb	r3, [r7, #27]
 80048e4:	e07d      	b.n	80049e2 <UART_SetConfig+0x282>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5b      	ldr	r2, [pc, #364]	; (8004a58 <UART_SetConfig+0x2f8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <UART_SetConfig+0x1d2>
 80048f0:	4b56      	ldr	r3, [pc, #344]	; (8004a4c <UART_SetConfig+0x2ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048fa:	2bc0      	cmp	r3, #192	; 0xc0
 80048fc:	d013      	beq.n	8004926 <UART_SetConfig+0x1c6>
 80048fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004900:	d814      	bhi.n	800492c <UART_SetConfig+0x1cc>
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x1ba>
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d810      	bhi.n	800492c <UART_SetConfig+0x1cc>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <UART_SetConfig+0x1b4>
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d006      	beq.n	8004920 <UART_SetConfig+0x1c0>
 8004912:	e00b      	b.n	800492c <UART_SetConfig+0x1cc>
 8004914:	2300      	movs	r3, #0
 8004916:	76fb      	strb	r3, [r7, #27]
 8004918:	e063      	b.n	80049e2 <UART_SetConfig+0x282>
 800491a:	2302      	movs	r3, #2
 800491c:	76fb      	strb	r3, [r7, #27]
 800491e:	e060      	b.n	80049e2 <UART_SetConfig+0x282>
 8004920:	2304      	movs	r3, #4
 8004922:	76fb      	strb	r3, [r7, #27]
 8004924:	e05d      	b.n	80049e2 <UART_SetConfig+0x282>
 8004926:	2308      	movs	r3, #8
 8004928:	76fb      	strb	r3, [r7, #27]
 800492a:	e05a      	b.n	80049e2 <UART_SetConfig+0x282>
 800492c:	2310      	movs	r3, #16
 800492e:	76fb      	strb	r3, [r7, #27]
 8004930:	e057      	b.n	80049e2 <UART_SetConfig+0x282>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a49      	ldr	r2, [pc, #292]	; (8004a5c <UART_SetConfig+0x2fc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d125      	bne.n	8004988 <UART_SetConfig+0x228>
 800493c:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <UART_SetConfig+0x2ec>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494a:	d017      	beq.n	800497c <UART_SetConfig+0x21c>
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d817      	bhi.n	8004982 <UART_SetConfig+0x222>
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d00b      	beq.n	8004970 <UART_SetConfig+0x210>
 8004958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495c:	d811      	bhi.n	8004982 <UART_SetConfig+0x222>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <UART_SetConfig+0x20a>
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d006      	beq.n	8004976 <UART_SetConfig+0x216>
 8004968:	e00b      	b.n	8004982 <UART_SetConfig+0x222>
 800496a:	2300      	movs	r3, #0
 800496c:	76fb      	strb	r3, [r7, #27]
 800496e:	e038      	b.n	80049e2 <UART_SetConfig+0x282>
 8004970:	2302      	movs	r3, #2
 8004972:	76fb      	strb	r3, [r7, #27]
 8004974:	e035      	b.n	80049e2 <UART_SetConfig+0x282>
 8004976:	2304      	movs	r3, #4
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e032      	b.n	80049e2 <UART_SetConfig+0x282>
 800497c:	2308      	movs	r3, #8
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e02f      	b.n	80049e2 <UART_SetConfig+0x282>
 8004982:	2310      	movs	r3, #16
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	e02c      	b.n	80049e2 <UART_SetConfig+0x282>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <UART_SetConfig+0x2e4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x27e>
 8004992:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <UART_SetConfig+0x2ec>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800499c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a0:	d017      	beq.n	80049d2 <UART_SetConfig+0x272>
 80049a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a6:	d817      	bhi.n	80049d8 <UART_SetConfig+0x278>
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ac:	d00b      	beq.n	80049c6 <UART_SetConfig+0x266>
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d811      	bhi.n	80049d8 <UART_SetConfig+0x278>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <UART_SetConfig+0x260>
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d006      	beq.n	80049cc <UART_SetConfig+0x26c>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x278>
 80049c0:	2300      	movs	r3, #0
 80049c2:	76fb      	strb	r3, [r7, #27]
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x282>
 80049c6:	2302      	movs	r3, #2
 80049c8:	76fb      	strb	r3, [r7, #27]
 80049ca:	e00a      	b.n	80049e2 <UART_SetConfig+0x282>
 80049cc:	2304      	movs	r3, #4
 80049ce:	76fb      	strb	r3, [r7, #27]
 80049d0:	e007      	b.n	80049e2 <UART_SetConfig+0x282>
 80049d2:	2308      	movs	r3, #8
 80049d4:	76fb      	strb	r3, [r7, #27]
 80049d6:	e004      	b.n	80049e2 <UART_SetConfig+0x282>
 80049d8:	2310      	movs	r3, #16
 80049da:	76fb      	strb	r3, [r7, #27]
 80049dc:	e001      	b.n	80049e2 <UART_SetConfig+0x282>
 80049de:	2310      	movs	r3, #16
 80049e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <UART_SetConfig+0x2e4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	f040 8087 	bne.w	8004afc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049ee:	7efb      	ldrb	r3, [r7, #27]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d837      	bhi.n	8004a64 <UART_SetConfig+0x304>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x29c>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a65 	.word	0x08004a65
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a65 	.word	0x08004a65
 8004a0c:	08004a2f 	.word	0x08004a2f
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004a65 	.word	0x08004a65
 8004a1c:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fd24 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8004a24:	6178      	str	r0, [r7, #20]
        break;
 8004a26:	e022      	b.n	8004a6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <UART_SetConfig+0x300>)
 8004a2a:	617b      	str	r3, [r7, #20]
        break;
 8004a2c:	e01f      	b.n	8004a6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe fc85 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8004a32:	6178      	str	r0, [r7, #20]
        break;
 8004a34:	e01b      	b.n	8004a6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	617b      	str	r3, [r7, #20]
        break;
 8004a3c:	e017      	b.n	8004a6e <UART_SetConfig+0x30e>
 8004a3e:	bf00      	nop
 8004a40:	efff69f3 	.word	0xefff69f3
 8004a44:	40008000 	.word	0x40008000
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40004400 	.word	0x40004400
 8004a54:	40004800 	.word	0x40004800
 8004a58:	40004c00 	.word	0x40004c00
 8004a5c:	40005000 	.word	0x40005000
 8004a60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	76bb      	strb	r3, [r7, #26]
        break;
 8004a6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80f1 	beq.w	8004c58 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4413      	add	r3, r2
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d305      	bcc.n	8004a92 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d902      	bls.n	8004a98 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	76bb      	strb	r3, [r7, #26]
 8004a96:	e0df      	b.n	8004c58 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f04f 0100 	mov.w	r1, #0
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	020b      	lsls	r3, r1, #8
 8004aaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004aae:	0202      	lsls	r2, r0, #8
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	6849      	ldr	r1, [r1, #4]
 8004ab4:	0849      	lsrs	r1, r1, #1
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	1814      	adds	r4, r2, r0
 8004abe:	eb43 0501 	adc.w	r5, r3, r1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb fbce 	bl	8000270 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae2:	d308      	bcc.n	8004af6 <UART_SetConfig+0x396>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d204      	bcs.n	8004af6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e0b0      	b.n	8004c58 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	76bb      	strb	r3, [r7, #26]
 8004afa:	e0ad      	b.n	8004c58 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b04:	d15c      	bne.n	8004bc0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004b06:	7efb      	ldrb	r3, [r7, #27]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d828      	bhi.n	8004b5e <UART_SetConfig+0x3fe>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x3b4>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe fc98 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8004b3c:	6178      	str	r0, [r7, #20]
        break;
 8004b3e:	e013      	b.n	8004b68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fcaa 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8004b44:	6178      	str	r0, [r7, #20]
        break;
 8004b46:	e00f      	b.n	8004b68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <UART_SetConfig+0x510>)
 8004b4a:	617b      	str	r3, [r7, #20]
        break;
 8004b4c:	e00c      	b.n	8004b68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe fbf5 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8004b52:	6178      	str	r0, [r7, #20]
        break;
 8004b54:	e008      	b.n	8004b68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	617b      	str	r3, [r7, #20]
        break;
 8004b5c:	e004      	b.n	8004b68 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	76bb      	strb	r3, [r7, #26]
        break;
 8004b66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d074      	beq.n	8004c58 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005a      	lsls	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d916      	bls.n	8004bba <UART_SetConfig+0x45a>
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b92:	d212      	bcs.n	8004bba <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f023 030f 	bic.w	r3, r3, #15
 8004b9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	89fb      	ldrh	r3, [r7, #14]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	89fa      	ldrh	r2, [r7, #14]
 8004bb6:	60da      	str	r2, [r3, #12]
 8004bb8:	e04e      	b.n	8004c58 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	76bb      	strb	r3, [r7, #26]
 8004bbe:	e04b      	b.n	8004c58 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bc0:	7efb      	ldrb	r3, [r7, #27]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d827      	bhi.n	8004c16 <UART_SetConfig+0x4b6>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x46c>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fc3c 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8004bf4:	6178      	str	r0, [r7, #20]
        break;
 8004bf6:	e013      	b.n	8004c20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe fc4e 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	6178      	str	r0, [r7, #20]
        break;
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <UART_SetConfig+0x510>)
 8004c02:	617b      	str	r3, [r7, #20]
        break;
 8004c04:	e00c      	b.n	8004c20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fb99 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8004c0a:	6178      	str	r0, [r7, #20]
        break;
 8004c0c:	e008      	b.n	8004c20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	617b      	str	r3, [r7, #20]
        break;
 8004c14:	e004      	b.n	8004c20 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	085a      	lsrs	r2, r3, #1
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	441a      	add	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d908      	bls.n	8004c54 <UART_SetConfig+0x4f4>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d204      	bcs.n	8004c54 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	e001      	b.n	8004c58 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c64:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00f42400 	.word	0x00f42400

08004c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d72:	d10a      	bne.n	8004d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
  }
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc8:	f7fc f980 	bl	80010cc <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d10e      	bne.n	8004dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f82d 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e023      	b.n	8004e42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d10e      	bne.n	8004e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f817 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e00d      	b.n	8004e42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	e05e      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d05a      	beq.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e64:	f7fc f932 	bl	80010cc <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11b      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e043      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02c      	beq.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ece:	d124      	bne.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ee8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e00f      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d091      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <__errno>:
 8004f44:	4b01      	ldr	r3, [pc, #4]	; (8004f4c <__errno+0x8>)
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <__libc_init_array>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4d0d      	ldr	r5, [pc, #52]	; (8004f88 <__libc_init_array+0x38>)
 8004f54:	4c0d      	ldr	r4, [pc, #52]	; (8004f8c <__libc_init_array+0x3c>)
 8004f56:	1b64      	subs	r4, r4, r5
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	42a6      	cmp	r6, r4
 8004f5e:	d109      	bne.n	8004f74 <__libc_init_array+0x24>
 8004f60:	4d0b      	ldr	r5, [pc, #44]	; (8004f90 <__libc_init_array+0x40>)
 8004f62:	4c0c      	ldr	r4, [pc, #48]	; (8004f94 <__libc_init_array+0x44>)
 8004f64:	f000 fc4e 	bl	8005804 <_init>
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	42a6      	cmp	r6, r4
 8004f70:	d105      	bne.n	8004f7e <__libc_init_array+0x2e>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f78:	4798      	blx	r3
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7ee      	b.n	8004f5c <__libc_init_array+0xc>
 8004f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f82:	4798      	blx	r3
 8004f84:	3601      	adds	r6, #1
 8004f86:	e7f2      	b.n	8004f6e <__libc_init_array+0x1e>
 8004f88:	080058b0 	.word	0x080058b0
 8004f8c:	080058b0 	.word	0x080058b0
 8004f90:	080058b0 	.word	0x080058b0
 8004f94:	080058b4 	.word	0x080058b4

08004f98 <memset>:
 8004f98:	4402      	add	r2, r0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d100      	bne.n	8004fa2 <memset+0xa>
 8004fa0:	4770      	bx	lr
 8004fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa6:	e7f9      	b.n	8004f9c <memset+0x4>

08004fa8 <siprintf>:
 8004fa8:	b40e      	push	{r1, r2, r3}
 8004faa:	b500      	push	{lr}
 8004fac:	b09c      	sub	sp, #112	; 0x70
 8004fae:	ab1d      	add	r3, sp, #116	; 0x74
 8004fb0:	9002      	str	r0, [sp, #8]
 8004fb2:	9006      	str	r0, [sp, #24]
 8004fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fb8:	4809      	ldr	r0, [pc, #36]	; (8004fe0 <siprintf+0x38>)
 8004fba:	9107      	str	r1, [sp, #28]
 8004fbc:	9104      	str	r1, [sp, #16]
 8004fbe:	4909      	ldr	r1, [pc, #36]	; (8004fe4 <siprintf+0x3c>)
 8004fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	6800      	ldr	r0, [r0, #0]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	a902      	add	r1, sp, #8
 8004fcc:	f000 f868 	bl	80050a0 <_svfiprintf_r>
 8004fd0:	9b02      	ldr	r3, [sp, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	b01c      	add	sp, #112	; 0x70
 8004fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fdc:	b003      	add	sp, #12
 8004fde:	4770      	bx	lr
 8004fe0:	2000000c 	.word	0x2000000c
 8004fe4:	ffff0208 	.word	0xffff0208

08004fe8 <__ssputs_r>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	688e      	ldr	r6, [r1, #8]
 8004fee:	429e      	cmp	r6, r3
 8004ff0:	4682      	mov	sl, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4690      	mov	r8, r2
 8004ff6:	461f      	mov	r7, r3
 8004ff8:	d838      	bhi.n	800506c <__ssputs_r+0x84>
 8004ffa:	898a      	ldrh	r2, [r1, #12]
 8004ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005000:	d032      	beq.n	8005068 <__ssputs_r+0x80>
 8005002:	6825      	ldr	r5, [r4, #0]
 8005004:	6909      	ldr	r1, [r1, #16]
 8005006:	eba5 0901 	sub.w	r9, r5, r1
 800500a:	6965      	ldr	r5, [r4, #20]
 800500c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005014:	3301      	adds	r3, #1
 8005016:	444b      	add	r3, r9
 8005018:	106d      	asrs	r5, r5, #1
 800501a:	429d      	cmp	r5, r3
 800501c:	bf38      	it	cc
 800501e:	461d      	movcc	r5, r3
 8005020:	0553      	lsls	r3, r2, #21
 8005022:	d531      	bpl.n	8005088 <__ssputs_r+0xa0>
 8005024:	4629      	mov	r1, r5
 8005026:	f000 fb47 	bl	80056b8 <_malloc_r>
 800502a:	4606      	mov	r6, r0
 800502c:	b950      	cbnz	r0, 8005044 <__ssputs_r+0x5c>
 800502e:	230c      	movs	r3, #12
 8005030:	f8ca 3000 	str.w	r3, [sl]
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005044:	6921      	ldr	r1, [r4, #16]
 8005046:	464a      	mov	r2, r9
 8005048:	f000 fabe 	bl	80055c8 <memcpy>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	6126      	str	r6, [r4, #16]
 800505a:	6165      	str	r5, [r4, #20]
 800505c:	444e      	add	r6, r9
 800505e:	eba5 0509 	sub.w	r5, r5, r9
 8005062:	6026      	str	r6, [r4, #0]
 8005064:	60a5      	str	r5, [r4, #8]
 8005066:	463e      	mov	r6, r7
 8005068:	42be      	cmp	r6, r7
 800506a:	d900      	bls.n	800506e <__ssputs_r+0x86>
 800506c:	463e      	mov	r6, r7
 800506e:	4632      	mov	r2, r6
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	4641      	mov	r1, r8
 8005074:	f000 fab6 	bl	80055e4 <memmove>
 8005078:	68a3      	ldr	r3, [r4, #8]
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	1b9b      	subs	r3, r3, r6
 800507e:	4432      	add	r2, r6
 8005080:	60a3      	str	r3, [r4, #8]
 8005082:	6022      	str	r2, [r4, #0]
 8005084:	2000      	movs	r0, #0
 8005086:	e7db      	b.n	8005040 <__ssputs_r+0x58>
 8005088:	462a      	mov	r2, r5
 800508a:	f000 fb6f 	bl	800576c <_realloc_r>
 800508e:	4606      	mov	r6, r0
 8005090:	2800      	cmp	r0, #0
 8005092:	d1e1      	bne.n	8005058 <__ssputs_r+0x70>
 8005094:	6921      	ldr	r1, [r4, #16]
 8005096:	4650      	mov	r0, sl
 8005098:	f000 fabe 	bl	8005618 <_free_r>
 800509c:	e7c7      	b.n	800502e <__ssputs_r+0x46>
	...

080050a0 <_svfiprintf_r>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	4698      	mov	r8, r3
 80050a6:	898b      	ldrh	r3, [r1, #12]
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	b09d      	sub	sp, #116	; 0x74
 80050ac:	4607      	mov	r7, r0
 80050ae:	460d      	mov	r5, r1
 80050b0:	4614      	mov	r4, r2
 80050b2:	d50e      	bpl.n	80050d2 <_svfiprintf_r+0x32>
 80050b4:	690b      	ldr	r3, [r1, #16]
 80050b6:	b963      	cbnz	r3, 80050d2 <_svfiprintf_r+0x32>
 80050b8:	2140      	movs	r1, #64	; 0x40
 80050ba:	f000 fafd 	bl	80056b8 <_malloc_r>
 80050be:	6028      	str	r0, [r5, #0]
 80050c0:	6128      	str	r0, [r5, #16]
 80050c2:	b920      	cbnz	r0, 80050ce <_svfiprintf_r+0x2e>
 80050c4:	230c      	movs	r3, #12
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	e0d1      	b.n	8005272 <_svfiprintf_r+0x1d2>
 80050ce:	2340      	movs	r3, #64	; 0x40
 80050d0:	616b      	str	r3, [r5, #20]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9309      	str	r3, [sp, #36]	; 0x24
 80050d6:	2320      	movs	r3, #32
 80050d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80050e0:	2330      	movs	r3, #48	; 0x30
 80050e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800528c <_svfiprintf_r+0x1ec>
 80050e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050ea:	f04f 0901 	mov.w	r9, #1
 80050ee:	4623      	mov	r3, r4
 80050f0:	469a      	mov	sl, r3
 80050f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050f6:	b10a      	cbz	r2, 80050fc <_svfiprintf_r+0x5c>
 80050f8:	2a25      	cmp	r2, #37	; 0x25
 80050fa:	d1f9      	bne.n	80050f0 <_svfiprintf_r+0x50>
 80050fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005100:	d00b      	beq.n	800511a <_svfiprintf_r+0x7a>
 8005102:	465b      	mov	r3, fp
 8005104:	4622      	mov	r2, r4
 8005106:	4629      	mov	r1, r5
 8005108:	4638      	mov	r0, r7
 800510a:	f7ff ff6d 	bl	8004fe8 <__ssputs_r>
 800510e:	3001      	adds	r0, #1
 8005110:	f000 80aa 	beq.w	8005268 <_svfiprintf_r+0x1c8>
 8005114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005116:	445a      	add	r2, fp
 8005118:	9209      	str	r2, [sp, #36]	; 0x24
 800511a:	f89a 3000 	ldrb.w	r3, [sl]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80a2 	beq.w	8005268 <_svfiprintf_r+0x1c8>
 8005124:	2300      	movs	r3, #0
 8005126:	f04f 32ff 	mov.w	r2, #4294967295
 800512a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800512e:	f10a 0a01 	add.w	sl, sl, #1
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	9307      	str	r3, [sp, #28]
 8005136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800513a:	931a      	str	r3, [sp, #104]	; 0x68
 800513c:	4654      	mov	r4, sl
 800513e:	2205      	movs	r2, #5
 8005140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005144:	4851      	ldr	r0, [pc, #324]	; (800528c <_svfiprintf_r+0x1ec>)
 8005146:	f7fb f843 	bl	80001d0 <memchr>
 800514a:	9a04      	ldr	r2, [sp, #16]
 800514c:	b9d8      	cbnz	r0, 8005186 <_svfiprintf_r+0xe6>
 800514e:	06d0      	lsls	r0, r2, #27
 8005150:	bf44      	itt	mi
 8005152:	2320      	movmi	r3, #32
 8005154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005158:	0711      	lsls	r1, r2, #28
 800515a:	bf44      	itt	mi
 800515c:	232b      	movmi	r3, #43	; 0x2b
 800515e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005162:	f89a 3000 	ldrb.w	r3, [sl]
 8005166:	2b2a      	cmp	r3, #42	; 0x2a
 8005168:	d015      	beq.n	8005196 <_svfiprintf_r+0xf6>
 800516a:	9a07      	ldr	r2, [sp, #28]
 800516c:	4654      	mov	r4, sl
 800516e:	2000      	movs	r0, #0
 8005170:	f04f 0c0a 	mov.w	ip, #10
 8005174:	4621      	mov	r1, r4
 8005176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800517a:	3b30      	subs	r3, #48	; 0x30
 800517c:	2b09      	cmp	r3, #9
 800517e:	d94e      	bls.n	800521e <_svfiprintf_r+0x17e>
 8005180:	b1b0      	cbz	r0, 80051b0 <_svfiprintf_r+0x110>
 8005182:	9207      	str	r2, [sp, #28]
 8005184:	e014      	b.n	80051b0 <_svfiprintf_r+0x110>
 8005186:	eba0 0308 	sub.w	r3, r0, r8
 800518a:	fa09 f303 	lsl.w	r3, r9, r3
 800518e:	4313      	orrs	r3, r2
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	46a2      	mov	sl, r4
 8005194:	e7d2      	b.n	800513c <_svfiprintf_r+0x9c>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	1d19      	adds	r1, r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	9103      	str	r1, [sp, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfbb      	ittet	lt
 80051a2:	425b      	neglt	r3, r3
 80051a4:	f042 0202 	orrlt.w	r2, r2, #2
 80051a8:	9307      	strge	r3, [sp, #28]
 80051aa:	9307      	strlt	r3, [sp, #28]
 80051ac:	bfb8      	it	lt
 80051ae:	9204      	strlt	r2, [sp, #16]
 80051b0:	7823      	ldrb	r3, [r4, #0]
 80051b2:	2b2e      	cmp	r3, #46	; 0x2e
 80051b4:	d10c      	bne.n	80051d0 <_svfiprintf_r+0x130>
 80051b6:	7863      	ldrb	r3, [r4, #1]
 80051b8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ba:	d135      	bne.n	8005228 <_svfiprintf_r+0x188>
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	9203      	str	r2, [sp, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bfb8      	it	lt
 80051c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80051cc:	3402      	adds	r4, #2
 80051ce:	9305      	str	r3, [sp, #20]
 80051d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800529c <_svfiprintf_r+0x1fc>
 80051d4:	7821      	ldrb	r1, [r4, #0]
 80051d6:	2203      	movs	r2, #3
 80051d8:	4650      	mov	r0, sl
 80051da:	f7fa fff9 	bl	80001d0 <memchr>
 80051de:	b140      	cbz	r0, 80051f2 <_svfiprintf_r+0x152>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	eba0 000a 	sub.w	r0, r0, sl
 80051e6:	fa03 f000 	lsl.w	r0, r3, r0
 80051ea:	9b04      	ldr	r3, [sp, #16]
 80051ec:	4303      	orrs	r3, r0
 80051ee:	3401      	adds	r4, #1
 80051f0:	9304      	str	r3, [sp, #16]
 80051f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f6:	4826      	ldr	r0, [pc, #152]	; (8005290 <_svfiprintf_r+0x1f0>)
 80051f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051fc:	2206      	movs	r2, #6
 80051fe:	f7fa ffe7 	bl	80001d0 <memchr>
 8005202:	2800      	cmp	r0, #0
 8005204:	d038      	beq.n	8005278 <_svfiprintf_r+0x1d8>
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <_svfiprintf_r+0x1f4>)
 8005208:	bb1b      	cbnz	r3, 8005252 <_svfiprintf_r+0x1b2>
 800520a:	9b03      	ldr	r3, [sp, #12]
 800520c:	3307      	adds	r3, #7
 800520e:	f023 0307 	bic.w	r3, r3, #7
 8005212:	3308      	adds	r3, #8
 8005214:	9303      	str	r3, [sp, #12]
 8005216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005218:	4433      	add	r3, r6
 800521a:	9309      	str	r3, [sp, #36]	; 0x24
 800521c:	e767      	b.n	80050ee <_svfiprintf_r+0x4e>
 800521e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005222:	460c      	mov	r4, r1
 8005224:	2001      	movs	r0, #1
 8005226:	e7a5      	b.n	8005174 <_svfiprintf_r+0xd4>
 8005228:	2300      	movs	r3, #0
 800522a:	3401      	adds	r4, #1
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	4619      	mov	r1, r3
 8005230:	f04f 0c0a 	mov.w	ip, #10
 8005234:	4620      	mov	r0, r4
 8005236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800523a:	3a30      	subs	r2, #48	; 0x30
 800523c:	2a09      	cmp	r2, #9
 800523e:	d903      	bls.n	8005248 <_svfiprintf_r+0x1a8>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0c5      	beq.n	80051d0 <_svfiprintf_r+0x130>
 8005244:	9105      	str	r1, [sp, #20]
 8005246:	e7c3      	b.n	80051d0 <_svfiprintf_r+0x130>
 8005248:	fb0c 2101 	mla	r1, ip, r1, r2
 800524c:	4604      	mov	r4, r0
 800524e:	2301      	movs	r3, #1
 8005250:	e7f0      	b.n	8005234 <_svfiprintf_r+0x194>
 8005252:	ab03      	add	r3, sp, #12
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	462a      	mov	r2, r5
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <_svfiprintf_r+0x1f8>)
 800525a:	a904      	add	r1, sp, #16
 800525c:	4638      	mov	r0, r7
 800525e:	f3af 8000 	nop.w
 8005262:	1c42      	adds	r2, r0, #1
 8005264:	4606      	mov	r6, r0
 8005266:	d1d6      	bne.n	8005216 <_svfiprintf_r+0x176>
 8005268:	89ab      	ldrh	r3, [r5, #12]
 800526a:	065b      	lsls	r3, r3, #25
 800526c:	f53f af2c 	bmi.w	80050c8 <_svfiprintf_r+0x28>
 8005270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005272:	b01d      	add	sp, #116	; 0x74
 8005274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005278:	ab03      	add	r3, sp, #12
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	462a      	mov	r2, r5
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <_svfiprintf_r+0x1f8>)
 8005280:	a904      	add	r1, sp, #16
 8005282:	4638      	mov	r0, r7
 8005284:	f000 f87a 	bl	800537c <_printf_i>
 8005288:	e7eb      	b.n	8005262 <_svfiprintf_r+0x1c2>
 800528a:	bf00      	nop
 800528c:	08005874 	.word	0x08005874
 8005290:	0800587e 	.word	0x0800587e
 8005294:	00000000 	.word	0x00000000
 8005298:	08004fe9 	.word	0x08004fe9
 800529c:	0800587a 	.word	0x0800587a

080052a0 <_printf_common>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	4616      	mov	r6, r2
 80052a6:	4699      	mov	r9, r3
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bfb8      	it	lt
 80052b4:	4613      	movlt	r3, r2
 80052b6:	6033      	str	r3, [r6, #0]
 80052b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052bc:	4607      	mov	r7, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	b10a      	cbz	r2, 80052c6 <_printf_common+0x26>
 80052c2:	3301      	adds	r3, #1
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	0699      	lsls	r1, r3, #26
 80052ca:	bf42      	ittt	mi
 80052cc:	6833      	ldrmi	r3, [r6, #0]
 80052ce:	3302      	addmi	r3, #2
 80052d0:	6033      	strmi	r3, [r6, #0]
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	f015 0506 	ands.w	r5, r5, #6
 80052d8:	d106      	bne.n	80052e8 <_printf_common+0x48>
 80052da:	f104 0a19 	add.w	sl, r4, #25
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	6832      	ldr	r2, [r6, #0]
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	dc26      	bgt.n	8005336 <_printf_common+0x96>
 80052e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052ec:	1e13      	subs	r3, r2, #0
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	bf18      	it	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	0692      	lsls	r2, r2, #26
 80052f6:	d42b      	bmi.n	8005350 <_printf_common+0xb0>
 80052f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052fc:	4649      	mov	r1, r9
 80052fe:	4638      	mov	r0, r7
 8005300:	47c0      	blx	r8
 8005302:	3001      	adds	r0, #1
 8005304:	d01e      	beq.n	8005344 <_printf_common+0xa4>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	68e5      	ldr	r5, [r4, #12]
 800530a:	6832      	ldr	r2, [r6, #0]
 800530c:	f003 0306 	and.w	r3, r3, #6
 8005310:	2b04      	cmp	r3, #4
 8005312:	bf08      	it	eq
 8005314:	1aad      	subeq	r5, r5, r2
 8005316:	68a3      	ldr	r3, [r4, #8]
 8005318:	6922      	ldr	r2, [r4, #16]
 800531a:	bf0c      	ite	eq
 800531c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005320:	2500      	movne	r5, #0
 8005322:	4293      	cmp	r3, r2
 8005324:	bfc4      	itt	gt
 8005326:	1a9b      	subgt	r3, r3, r2
 8005328:	18ed      	addgt	r5, r5, r3
 800532a:	2600      	movs	r6, #0
 800532c:	341a      	adds	r4, #26
 800532e:	42b5      	cmp	r5, r6
 8005330:	d11a      	bne.n	8005368 <_printf_common+0xc8>
 8005332:	2000      	movs	r0, #0
 8005334:	e008      	b.n	8005348 <_printf_common+0xa8>
 8005336:	2301      	movs	r3, #1
 8005338:	4652      	mov	r2, sl
 800533a:	4649      	mov	r1, r9
 800533c:	4638      	mov	r0, r7
 800533e:	47c0      	blx	r8
 8005340:	3001      	adds	r0, #1
 8005342:	d103      	bne.n	800534c <_printf_common+0xac>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534c:	3501      	adds	r5, #1
 800534e:	e7c6      	b.n	80052de <_printf_common+0x3e>
 8005350:	18e1      	adds	r1, r4, r3
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	2030      	movs	r0, #48	; 0x30
 8005356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800535a:	4422      	add	r2, r4
 800535c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005364:	3302      	adds	r3, #2
 8005366:	e7c7      	b.n	80052f8 <_printf_common+0x58>
 8005368:	2301      	movs	r3, #1
 800536a:	4622      	mov	r2, r4
 800536c:	4649      	mov	r1, r9
 800536e:	4638      	mov	r0, r7
 8005370:	47c0      	blx	r8
 8005372:	3001      	adds	r0, #1
 8005374:	d0e6      	beq.n	8005344 <_printf_common+0xa4>
 8005376:	3601      	adds	r6, #1
 8005378:	e7d9      	b.n	800532e <_printf_common+0x8e>
	...

0800537c <_printf_i>:
 800537c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	460c      	mov	r4, r1
 8005382:	4691      	mov	r9, r2
 8005384:	7e27      	ldrb	r7, [r4, #24]
 8005386:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005388:	2f78      	cmp	r7, #120	; 0x78
 800538a:	4680      	mov	r8, r0
 800538c:	469a      	mov	sl, r3
 800538e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005392:	d807      	bhi.n	80053a4 <_printf_i+0x28>
 8005394:	2f62      	cmp	r7, #98	; 0x62
 8005396:	d80a      	bhi.n	80053ae <_printf_i+0x32>
 8005398:	2f00      	cmp	r7, #0
 800539a:	f000 80d8 	beq.w	800554e <_printf_i+0x1d2>
 800539e:	2f58      	cmp	r7, #88	; 0x58
 80053a0:	f000 80a3 	beq.w	80054ea <_printf_i+0x16e>
 80053a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053ac:	e03a      	b.n	8005424 <_printf_i+0xa8>
 80053ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053b2:	2b15      	cmp	r3, #21
 80053b4:	d8f6      	bhi.n	80053a4 <_printf_i+0x28>
 80053b6:	a001      	add	r0, pc, #4	; (adr r0, 80053bc <_printf_i+0x40>)
 80053b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005429 	.word	0x08005429
 80053c4:	080053a5 	.word	0x080053a5
 80053c8:	080053a5 	.word	0x080053a5
 80053cc:	080053a5 	.word	0x080053a5
 80053d0:	080053a5 	.word	0x080053a5
 80053d4:	08005429 	.word	0x08005429
 80053d8:	080053a5 	.word	0x080053a5
 80053dc:	080053a5 	.word	0x080053a5
 80053e0:	080053a5 	.word	0x080053a5
 80053e4:	080053a5 	.word	0x080053a5
 80053e8:	08005535 	.word	0x08005535
 80053ec:	08005459 	.word	0x08005459
 80053f0:	08005517 	.word	0x08005517
 80053f4:	080053a5 	.word	0x080053a5
 80053f8:	080053a5 	.word	0x080053a5
 80053fc:	08005557 	.word	0x08005557
 8005400:	080053a5 	.word	0x080053a5
 8005404:	08005459 	.word	0x08005459
 8005408:	080053a5 	.word	0x080053a5
 800540c:	080053a5 	.word	0x080053a5
 8005410:	0800551f 	.word	0x0800551f
 8005414:	680b      	ldr	r3, [r1, #0]
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	600a      	str	r2, [r1, #0]
 800541c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005424:	2301      	movs	r3, #1
 8005426:	e0a3      	b.n	8005570 <_printf_i+0x1f4>
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	6808      	ldr	r0, [r1, #0]
 800542c:	062e      	lsls	r6, r5, #24
 800542e:	f100 0304 	add.w	r3, r0, #4
 8005432:	d50a      	bpl.n	800544a <_printf_i+0xce>
 8005434:	6805      	ldr	r5, [r0, #0]
 8005436:	600b      	str	r3, [r1, #0]
 8005438:	2d00      	cmp	r5, #0
 800543a:	da03      	bge.n	8005444 <_printf_i+0xc8>
 800543c:	232d      	movs	r3, #45	; 0x2d
 800543e:	426d      	negs	r5, r5
 8005440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005444:	485e      	ldr	r0, [pc, #376]	; (80055c0 <_printf_i+0x244>)
 8005446:	230a      	movs	r3, #10
 8005448:	e019      	b.n	800547e <_printf_i+0x102>
 800544a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800544e:	6805      	ldr	r5, [r0, #0]
 8005450:	600b      	str	r3, [r1, #0]
 8005452:	bf18      	it	ne
 8005454:	b22d      	sxthne	r5, r5
 8005456:	e7ef      	b.n	8005438 <_printf_i+0xbc>
 8005458:	680b      	ldr	r3, [r1, #0]
 800545a:	6825      	ldr	r5, [r4, #0]
 800545c:	1d18      	adds	r0, r3, #4
 800545e:	6008      	str	r0, [r1, #0]
 8005460:	0628      	lsls	r0, r5, #24
 8005462:	d501      	bpl.n	8005468 <_printf_i+0xec>
 8005464:	681d      	ldr	r5, [r3, #0]
 8005466:	e002      	b.n	800546e <_printf_i+0xf2>
 8005468:	0669      	lsls	r1, r5, #25
 800546a:	d5fb      	bpl.n	8005464 <_printf_i+0xe8>
 800546c:	881d      	ldrh	r5, [r3, #0]
 800546e:	4854      	ldr	r0, [pc, #336]	; (80055c0 <_printf_i+0x244>)
 8005470:	2f6f      	cmp	r7, #111	; 0x6f
 8005472:	bf0c      	ite	eq
 8005474:	2308      	moveq	r3, #8
 8005476:	230a      	movne	r3, #10
 8005478:	2100      	movs	r1, #0
 800547a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800547e:	6866      	ldr	r6, [r4, #4]
 8005480:	60a6      	str	r6, [r4, #8]
 8005482:	2e00      	cmp	r6, #0
 8005484:	bfa2      	ittt	ge
 8005486:	6821      	ldrge	r1, [r4, #0]
 8005488:	f021 0104 	bicge.w	r1, r1, #4
 800548c:	6021      	strge	r1, [r4, #0]
 800548e:	b90d      	cbnz	r5, 8005494 <_printf_i+0x118>
 8005490:	2e00      	cmp	r6, #0
 8005492:	d04d      	beq.n	8005530 <_printf_i+0x1b4>
 8005494:	4616      	mov	r6, r2
 8005496:	fbb5 f1f3 	udiv	r1, r5, r3
 800549a:	fb03 5711 	mls	r7, r3, r1, r5
 800549e:	5dc7      	ldrb	r7, [r0, r7]
 80054a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054a4:	462f      	mov	r7, r5
 80054a6:	42bb      	cmp	r3, r7
 80054a8:	460d      	mov	r5, r1
 80054aa:	d9f4      	bls.n	8005496 <_printf_i+0x11a>
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d10b      	bne.n	80054c8 <_printf_i+0x14c>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	07df      	lsls	r7, r3, #31
 80054b4:	d508      	bpl.n	80054c8 <_printf_i+0x14c>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	6861      	ldr	r1, [r4, #4]
 80054ba:	4299      	cmp	r1, r3
 80054bc:	bfde      	ittt	le
 80054be:	2330      	movle	r3, #48	; 0x30
 80054c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054c8:	1b92      	subs	r2, r2, r6
 80054ca:	6122      	str	r2, [r4, #16]
 80054cc:	f8cd a000 	str.w	sl, [sp]
 80054d0:	464b      	mov	r3, r9
 80054d2:	aa03      	add	r2, sp, #12
 80054d4:	4621      	mov	r1, r4
 80054d6:	4640      	mov	r0, r8
 80054d8:	f7ff fee2 	bl	80052a0 <_printf_common>
 80054dc:	3001      	adds	r0, #1
 80054de:	d14c      	bne.n	800557a <_printf_i+0x1fe>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	b004      	add	sp, #16
 80054e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ea:	4835      	ldr	r0, [pc, #212]	; (80055c0 <_printf_i+0x244>)
 80054ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	680e      	ldr	r6, [r1, #0]
 80054f4:	061f      	lsls	r7, r3, #24
 80054f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054fa:	600e      	str	r6, [r1, #0]
 80054fc:	d514      	bpl.n	8005528 <_printf_i+0x1ac>
 80054fe:	07d9      	lsls	r1, r3, #31
 8005500:	bf44      	itt	mi
 8005502:	f043 0320 	orrmi.w	r3, r3, #32
 8005506:	6023      	strmi	r3, [r4, #0]
 8005508:	b91d      	cbnz	r5, 8005512 <_printf_i+0x196>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f023 0320 	bic.w	r3, r3, #32
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	2310      	movs	r3, #16
 8005514:	e7b0      	b.n	8005478 <_printf_i+0xfc>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	f043 0320 	orr.w	r3, r3, #32
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	2378      	movs	r3, #120	; 0x78
 8005520:	4828      	ldr	r0, [pc, #160]	; (80055c4 <_printf_i+0x248>)
 8005522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005526:	e7e3      	b.n	80054f0 <_printf_i+0x174>
 8005528:	065e      	lsls	r6, r3, #25
 800552a:	bf48      	it	mi
 800552c:	b2ad      	uxthmi	r5, r5
 800552e:	e7e6      	b.n	80054fe <_printf_i+0x182>
 8005530:	4616      	mov	r6, r2
 8005532:	e7bb      	b.n	80054ac <_printf_i+0x130>
 8005534:	680b      	ldr	r3, [r1, #0]
 8005536:	6826      	ldr	r6, [r4, #0]
 8005538:	6960      	ldr	r0, [r4, #20]
 800553a:	1d1d      	adds	r5, r3, #4
 800553c:	600d      	str	r5, [r1, #0]
 800553e:	0635      	lsls	r5, r6, #24
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	d501      	bpl.n	8005548 <_printf_i+0x1cc>
 8005544:	6018      	str	r0, [r3, #0]
 8005546:	e002      	b.n	800554e <_printf_i+0x1d2>
 8005548:	0671      	lsls	r1, r6, #25
 800554a:	d5fb      	bpl.n	8005544 <_printf_i+0x1c8>
 800554c:	8018      	strh	r0, [r3, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	6123      	str	r3, [r4, #16]
 8005552:	4616      	mov	r6, r2
 8005554:	e7ba      	b.n	80054cc <_printf_i+0x150>
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	1d1a      	adds	r2, r3, #4
 800555a:	600a      	str	r2, [r1, #0]
 800555c:	681e      	ldr	r6, [r3, #0]
 800555e:	6862      	ldr	r2, [r4, #4]
 8005560:	2100      	movs	r1, #0
 8005562:	4630      	mov	r0, r6
 8005564:	f7fa fe34 	bl	80001d0 <memchr>
 8005568:	b108      	cbz	r0, 800556e <_printf_i+0x1f2>
 800556a:	1b80      	subs	r0, r0, r6
 800556c:	6060      	str	r0, [r4, #4]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	6123      	str	r3, [r4, #16]
 8005572:	2300      	movs	r3, #0
 8005574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005578:	e7a8      	b.n	80054cc <_printf_i+0x150>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	4632      	mov	r2, r6
 800557e:	4649      	mov	r1, r9
 8005580:	4640      	mov	r0, r8
 8005582:	47d0      	blx	sl
 8005584:	3001      	adds	r0, #1
 8005586:	d0ab      	beq.n	80054e0 <_printf_i+0x164>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	079b      	lsls	r3, r3, #30
 800558c:	d413      	bmi.n	80055b6 <_printf_i+0x23a>
 800558e:	68e0      	ldr	r0, [r4, #12]
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	4298      	cmp	r0, r3
 8005594:	bfb8      	it	lt
 8005596:	4618      	movlt	r0, r3
 8005598:	e7a4      	b.n	80054e4 <_printf_i+0x168>
 800559a:	2301      	movs	r3, #1
 800559c:	4632      	mov	r2, r6
 800559e:	4649      	mov	r1, r9
 80055a0:	4640      	mov	r0, r8
 80055a2:	47d0      	blx	sl
 80055a4:	3001      	adds	r0, #1
 80055a6:	d09b      	beq.n	80054e0 <_printf_i+0x164>
 80055a8:	3501      	adds	r5, #1
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	9903      	ldr	r1, [sp, #12]
 80055ae:	1a5b      	subs	r3, r3, r1
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dcf2      	bgt.n	800559a <_printf_i+0x21e>
 80055b4:	e7eb      	b.n	800558e <_printf_i+0x212>
 80055b6:	2500      	movs	r5, #0
 80055b8:	f104 0619 	add.w	r6, r4, #25
 80055bc:	e7f5      	b.n	80055aa <_printf_i+0x22e>
 80055be:	bf00      	nop
 80055c0:	08005885 	.word	0x08005885
 80055c4:	08005896 	.word	0x08005896

080055c8 <memcpy>:
 80055c8:	440a      	add	r2, r1
 80055ca:	4291      	cmp	r1, r2
 80055cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d0:	d100      	bne.n	80055d4 <memcpy+0xc>
 80055d2:	4770      	bx	lr
 80055d4:	b510      	push	{r4, lr}
 80055d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055de:	4291      	cmp	r1, r2
 80055e0:	d1f9      	bne.n	80055d6 <memcpy+0xe>
 80055e2:	bd10      	pop	{r4, pc}

080055e4 <memmove>:
 80055e4:	4288      	cmp	r0, r1
 80055e6:	b510      	push	{r4, lr}
 80055e8:	eb01 0402 	add.w	r4, r1, r2
 80055ec:	d902      	bls.n	80055f4 <memmove+0x10>
 80055ee:	4284      	cmp	r4, r0
 80055f0:	4623      	mov	r3, r4
 80055f2:	d807      	bhi.n	8005604 <memmove+0x20>
 80055f4:	1e43      	subs	r3, r0, #1
 80055f6:	42a1      	cmp	r1, r4
 80055f8:	d008      	beq.n	800560c <memmove+0x28>
 80055fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005602:	e7f8      	b.n	80055f6 <memmove+0x12>
 8005604:	4402      	add	r2, r0
 8005606:	4601      	mov	r1, r0
 8005608:	428a      	cmp	r2, r1
 800560a:	d100      	bne.n	800560e <memmove+0x2a>
 800560c:	bd10      	pop	{r4, pc}
 800560e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005616:	e7f7      	b.n	8005608 <memmove+0x24>

08005618 <_free_r>:
 8005618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800561a:	2900      	cmp	r1, #0
 800561c:	d048      	beq.n	80056b0 <_free_r+0x98>
 800561e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005622:	9001      	str	r0, [sp, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f1a1 0404 	sub.w	r4, r1, #4
 800562a:	bfb8      	it	lt
 800562c:	18e4      	addlt	r4, r4, r3
 800562e:	f000 f8d3 	bl	80057d8 <__malloc_lock>
 8005632:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <_free_r+0x9c>)
 8005634:	9801      	ldr	r0, [sp, #4]
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	4615      	mov	r5, r2
 800563a:	b933      	cbnz	r3, 800564a <_free_r+0x32>
 800563c:	6063      	str	r3, [r4, #4]
 800563e:	6014      	str	r4, [r2, #0]
 8005640:	b003      	add	sp, #12
 8005642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005646:	f000 b8cd 	b.w	80057e4 <__malloc_unlock>
 800564a:	42a3      	cmp	r3, r4
 800564c:	d90b      	bls.n	8005666 <_free_r+0x4e>
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	1862      	adds	r2, r4, r1
 8005652:	4293      	cmp	r3, r2
 8005654:	bf04      	itt	eq
 8005656:	681a      	ldreq	r2, [r3, #0]
 8005658:	685b      	ldreq	r3, [r3, #4]
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	bf04      	itt	eq
 800565e:	1852      	addeq	r2, r2, r1
 8005660:	6022      	streq	r2, [r4, #0]
 8005662:	602c      	str	r4, [r5, #0]
 8005664:	e7ec      	b.n	8005640 <_free_r+0x28>
 8005666:	461a      	mov	r2, r3
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	b10b      	cbz	r3, 8005670 <_free_r+0x58>
 800566c:	42a3      	cmp	r3, r4
 800566e:	d9fa      	bls.n	8005666 <_free_r+0x4e>
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	1855      	adds	r5, r2, r1
 8005674:	42a5      	cmp	r5, r4
 8005676:	d10b      	bne.n	8005690 <_free_r+0x78>
 8005678:	6824      	ldr	r4, [r4, #0]
 800567a:	4421      	add	r1, r4
 800567c:	1854      	adds	r4, r2, r1
 800567e:	42a3      	cmp	r3, r4
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	d1dd      	bne.n	8005640 <_free_r+0x28>
 8005684:	681c      	ldr	r4, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	6053      	str	r3, [r2, #4]
 800568a:	4421      	add	r1, r4
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	e7d7      	b.n	8005640 <_free_r+0x28>
 8005690:	d902      	bls.n	8005698 <_free_r+0x80>
 8005692:	230c      	movs	r3, #12
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	e7d3      	b.n	8005640 <_free_r+0x28>
 8005698:	6825      	ldr	r5, [r4, #0]
 800569a:	1961      	adds	r1, r4, r5
 800569c:	428b      	cmp	r3, r1
 800569e:	bf04      	itt	eq
 80056a0:	6819      	ldreq	r1, [r3, #0]
 80056a2:	685b      	ldreq	r3, [r3, #4]
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	bf04      	itt	eq
 80056a8:	1949      	addeq	r1, r1, r5
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	6054      	str	r4, [r2, #4]
 80056ae:	e7c7      	b.n	8005640 <_free_r+0x28>
 80056b0:	b003      	add	sp, #12
 80056b2:	bd30      	pop	{r4, r5, pc}
 80056b4:	20000094 	.word	0x20000094

080056b8 <_malloc_r>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	1ccd      	adds	r5, r1, #3
 80056bc:	f025 0503 	bic.w	r5, r5, #3
 80056c0:	3508      	adds	r5, #8
 80056c2:	2d0c      	cmp	r5, #12
 80056c4:	bf38      	it	cc
 80056c6:	250c      	movcc	r5, #12
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	db01      	blt.n	80056d2 <_malloc_r+0x1a>
 80056ce:	42a9      	cmp	r1, r5
 80056d0:	d903      	bls.n	80056da <_malloc_r+0x22>
 80056d2:	230c      	movs	r3, #12
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	2000      	movs	r0, #0
 80056d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056da:	f000 f87d 	bl	80057d8 <__malloc_lock>
 80056de:	4921      	ldr	r1, [pc, #132]	; (8005764 <_malloc_r+0xac>)
 80056e0:	680a      	ldr	r2, [r1, #0]
 80056e2:	4614      	mov	r4, r2
 80056e4:	b99c      	cbnz	r4, 800570e <_malloc_r+0x56>
 80056e6:	4f20      	ldr	r7, [pc, #128]	; (8005768 <_malloc_r+0xb0>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	b923      	cbnz	r3, 80056f6 <_malloc_r+0x3e>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4630      	mov	r0, r6
 80056f0:	f000 f862 	bl	80057b8 <_sbrk_r>
 80056f4:	6038      	str	r0, [r7, #0]
 80056f6:	4629      	mov	r1, r5
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 f85d 	bl	80057b8 <_sbrk_r>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	d123      	bne.n	800574a <_malloc_r+0x92>
 8005702:	230c      	movs	r3, #12
 8005704:	6033      	str	r3, [r6, #0]
 8005706:	4630      	mov	r0, r6
 8005708:	f000 f86c 	bl	80057e4 <__malloc_unlock>
 800570c:	e7e3      	b.n	80056d6 <_malloc_r+0x1e>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	1b5b      	subs	r3, r3, r5
 8005712:	d417      	bmi.n	8005744 <_malloc_r+0x8c>
 8005714:	2b0b      	cmp	r3, #11
 8005716:	d903      	bls.n	8005720 <_malloc_r+0x68>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	441c      	add	r4, r3
 800571c:	6025      	str	r5, [r4, #0]
 800571e:	e004      	b.n	800572a <_malloc_r+0x72>
 8005720:	6863      	ldr	r3, [r4, #4]
 8005722:	42a2      	cmp	r2, r4
 8005724:	bf0c      	ite	eq
 8005726:	600b      	streq	r3, [r1, #0]
 8005728:	6053      	strne	r3, [r2, #4]
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f85a 	bl	80057e4 <__malloc_unlock>
 8005730:	f104 000b 	add.w	r0, r4, #11
 8005734:	1d23      	adds	r3, r4, #4
 8005736:	f020 0007 	bic.w	r0, r0, #7
 800573a:	1ac2      	subs	r2, r0, r3
 800573c:	d0cc      	beq.n	80056d8 <_malloc_r+0x20>
 800573e:	1a1b      	subs	r3, r3, r0
 8005740:	50a3      	str	r3, [r4, r2]
 8005742:	e7c9      	b.n	80056d8 <_malloc_r+0x20>
 8005744:	4622      	mov	r2, r4
 8005746:	6864      	ldr	r4, [r4, #4]
 8005748:	e7cc      	b.n	80056e4 <_malloc_r+0x2c>
 800574a:	1cc4      	adds	r4, r0, #3
 800574c:	f024 0403 	bic.w	r4, r4, #3
 8005750:	42a0      	cmp	r0, r4
 8005752:	d0e3      	beq.n	800571c <_malloc_r+0x64>
 8005754:	1a21      	subs	r1, r4, r0
 8005756:	4630      	mov	r0, r6
 8005758:	f000 f82e 	bl	80057b8 <_sbrk_r>
 800575c:	3001      	adds	r0, #1
 800575e:	d1dd      	bne.n	800571c <_malloc_r+0x64>
 8005760:	e7cf      	b.n	8005702 <_malloc_r+0x4a>
 8005762:	bf00      	nop
 8005764:	20000094 	.word	0x20000094
 8005768:	20000098 	.word	0x20000098

0800576c <_realloc_r>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	4607      	mov	r7, r0
 8005770:	4614      	mov	r4, r2
 8005772:	460e      	mov	r6, r1
 8005774:	b921      	cbnz	r1, 8005780 <_realloc_r+0x14>
 8005776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800577a:	4611      	mov	r1, r2
 800577c:	f7ff bf9c 	b.w	80056b8 <_malloc_r>
 8005780:	b922      	cbnz	r2, 800578c <_realloc_r+0x20>
 8005782:	f7ff ff49 	bl	8005618 <_free_r>
 8005786:	4625      	mov	r5, r4
 8005788:	4628      	mov	r0, r5
 800578a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578c:	f000 f830 	bl	80057f0 <_malloc_usable_size_r>
 8005790:	42a0      	cmp	r0, r4
 8005792:	d20f      	bcs.n	80057b4 <_realloc_r+0x48>
 8005794:	4621      	mov	r1, r4
 8005796:	4638      	mov	r0, r7
 8005798:	f7ff ff8e 	bl	80056b8 <_malloc_r>
 800579c:	4605      	mov	r5, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0f2      	beq.n	8005788 <_realloc_r+0x1c>
 80057a2:	4631      	mov	r1, r6
 80057a4:	4622      	mov	r2, r4
 80057a6:	f7ff ff0f 	bl	80055c8 <memcpy>
 80057aa:	4631      	mov	r1, r6
 80057ac:	4638      	mov	r0, r7
 80057ae:	f7ff ff33 	bl	8005618 <_free_r>
 80057b2:	e7e9      	b.n	8005788 <_realloc_r+0x1c>
 80057b4:	4635      	mov	r5, r6
 80057b6:	e7e7      	b.n	8005788 <_realloc_r+0x1c>

080057b8 <_sbrk_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d06      	ldr	r5, [pc, #24]	; (80057d4 <_sbrk_r+0x1c>)
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	602b      	str	r3, [r5, #0]
 80057c4:	f7fb fa4c 	bl	8000c60 <_sbrk>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_sbrk_r+0x1a>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_sbrk_r+0x1a>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	200002bc 	.word	0x200002bc

080057d8 <__malloc_lock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_lock+0x8>)
 80057da:	f000 b811 	b.w	8005800 <__retarget_lock_acquire_recursive>
 80057de:	bf00      	nop
 80057e0:	200002c4 	.word	0x200002c4

080057e4 <__malloc_unlock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_unlock+0x8>)
 80057e6:	f000 b80c 	b.w	8005802 <__retarget_lock_release_recursive>
 80057ea:	bf00      	nop
 80057ec:	200002c4 	.word	0x200002c4

080057f0 <_malloc_usable_size_r>:
 80057f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f4:	1f18      	subs	r0, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfbc      	itt	lt
 80057fa:	580b      	ldrlt	r3, [r1, r0]
 80057fc:	18c0      	addlt	r0, r0, r3
 80057fe:	4770      	bx	lr

08005800 <__retarget_lock_acquire_recursive>:
 8005800:	4770      	bx	lr

08005802 <__retarget_lock_release_recursive>:
 8005802:	4770      	bx	lr

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
