
Optical_power_managment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d24  08004d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  08004d38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004d38  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d78  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270b  00000000  00000000  00034db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000374c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00038728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002879a  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014299  00000000  00000000  00062022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103123  00000000  00000000  000762bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001793de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  00179434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cbc 	.word	0x08004cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cbc 	.word	0x08004cbc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004e4:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <MX_ADC1_Init+0xe8>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000504:	2204      	movs	r2, #4
 8000506:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800050a:	2200      	movs	r2, #0
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000524:	2200      	movs	r2, #0
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800052a:	2200      	movs	r2, #0
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000538:	2200      	movs	r2, #0
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	4817      	ldr	r0, [pc, #92]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000546:	f000 feb3 	bl	80012b0 <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000550:	f000 fa7a 	bl	8000a48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	4619      	mov	r1, r3
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000560:	f001 fd2e 	bl	8001fc0 <HAL_ADCEx_MultiModeConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800056a:	f000 fa6d 	bl	8000a48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_ADC1_Init+0xec>)
 8000570:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000572:	2306      	movs	r3, #6
 8000574:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800057a:	237f      	movs	r3, #127	; 0x7f
 800057c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800057e:	2304      	movs	r3, #4
 8000580:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800058c:	f001 f8a0 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000596:	f000 fa57 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	50040000 	.word	0x50040000
 80005ac:	c7520000 	.word	0xc7520000

080005b0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_ADC2_Init+0xbc>)
 80005c8:	4a29      	ldr	r2, [pc, #164]	; (8000670 <MX_ADC2_Init+0xc0>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_ADC2_Init+0xbc>)
 80005ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_ADC2_Init+0xbc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_ADC2_Init+0xbc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_ADC2_Init+0xbc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_ADC2_Init+0xbc>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC2_Init+0xbc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_ADC2_Init+0xbc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ADC2_Init+0xbc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_ADC2_Init+0xbc>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ADC2_Init+0xbc>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_ADC2_Init+0xbc>)
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_ADC2_Init+0xbc>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_ADC2_Init+0xbc>)
 800061c:	2200      	movs	r2, #0
 800061e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_ADC2_Init+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <MX_ADC2_Init+0xbc>)
 800062a:	f000 fe41 	bl	80012b0 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000634:	f000 fa08 	bl	8000a48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_ADC2_Init+0xc4>)
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	2306      	movs	r3, #6
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000644:	237f      	movs	r3, #127	; 0x7f
 8000646:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000648:	2304      	movs	r3, #4
 800064a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC2_Init+0xbc>)
 8000656:	f001 f83b 	bl	80016d0 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000660:	f000 f9f2 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000002c 	.word	0x2000002c
 8000670:	50040100 	.word	0x50040100
 8000674:	04300002 	.word	0x04300002

08000678 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <HAL_ADC_MspInit+0xbc>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d115      	bne.n	80006c6 <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d13e      	bne.n	800072a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006c4:	e031      	b.n	800072a <HAL_ADC_MspInit+0xb2>
  else if(adcHandle->Instance==ADC2)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_ADC_MspInit+0xc8>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d12c      	bne.n	800072a <HAL_ADC_MspInit+0xb2>
    HAL_RCC_ADC_CLK_ENABLED++;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_ADC_MspInit+0xc0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10b      	bne.n	80006fa <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC_CLK_ENABLE();
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_ADC_MspInit+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <HAL_ADC_MspInit+0xc4>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_ADC_MspInit+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000716:	230b      	movs	r3, #11
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <HAL_ADC_MspInit+0xcc>)
 8000726:	f001 fe0d 	bl	8002344 <HAL_GPIO_Init>
}
 800072a:	bf00      	nop
 800072c:	3728      	adds	r7, #40	; 0x28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	50040000 	.word	0x50040000
 8000738:	20000028 	.word	0x20000028
 800073c:	40021000 	.word	0x40021000
 8000740:	50040100 	.word	0x50040100
 8000744:	48000800 	.word	0x48000800

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a55      	ldr	r2, [pc, #340]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x170>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a4f      	ldr	r2, [pc, #316]	; (80008b8 <MX_GPIO_Init+0x170>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a49      	ldr	r2, [pc, #292]	; (80008b8 <MX_GPIO_Init+0x170>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <MX_GPIO_Init+0x170>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <MX_GPIO_Init+0x170>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a43      	ldr	r2, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x170>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <MX_GPIO_Init+0x170>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWITCH_GPIO_Port, SWITCH_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	483e      	ldr	r0, [pc, #248]	; (80008bc <MX_GPIO_Init+0x174>)
 80007c4:	f001 ff68 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f001 ff62 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_inv_Pin|DE_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f242 0120 	movw	r1, #8224	; 0x2020
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007dc:	f001 ff5c 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <MX_GPIO_Init+0x17c>)
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4831      	ldr	r0, [pc, #196]	; (80008bc <MX_GPIO_Init+0x174>)
 80007f6:	f001 fda5 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <MX_GPIO_Init+0x174>)
 8000812:	f001 fd97 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3109_PGOOD_Pin;
 8000816:	2310      	movs	r3, #16
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3109_PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f001 fd8a 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000830:	2320      	movs	r3, #32
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 fd7b 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RE_inv_Pin|DE_Pin;
 800084e:	f242 0320 	movw	r3, #8224	; 0x2020
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4816      	ldr	r0, [pc, #88]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000868:	f001 fd6c 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3128_PGOOD_Pin;
 800086c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3128_PGOOD_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000882:	f001 fd5f 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC3105_PGOOD_Pin;
 8000886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC3105_PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <MX_GPIO_Init+0x174>)
 800089c:	f001 fd52 	bl	8002344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2028      	movs	r0, #40	; 0x28
 80008a6:	f001 fd16 	bl	80022d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f001 fd2f 	bl	800230e <HAL_NVIC_EnableIRQ>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800
 80008c0:	48000400 	.word	0x48000400
 80008c4:	10210000 	.word	0x10210000

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f000 fab2 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f818 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f7ff ff38 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d8:	f000 f9de 	bl	8000c98 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008dc:	f7ff fdf0 	bl	80004c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80008e0:	f000 f9aa 	bl	8000c38 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80008e4:	f7ff fe64 	bl	80005b0 <MX_ADC2_Init>
  MX_TIM6_Init();
 80008e8:	f000 f94a 	bl	8000b80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // ADC measure
  HAL_ADC_Start(&hadc1);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <main+0x34>)
 80008ee:	f000 fe35 	bl	800155c <HAL_ADC_Start>

  // Timer
  HAL_TIM_Base_Start_IT(&htim6);
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <main+0x38>)
 80008f4:	f003 fa7e 	bl	8003df4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x30>
 80008fa:	bf00      	nop
 80008fc:	20000090 	.word	0x20000090
 8000900:	200000f4 	.word	0x200000f4

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0b8      	sub	sp, #224	; 0xe0
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090e:	2244      	movs	r2, #68	; 0x44
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f9ca 	bl	8004cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2288      	movs	r2, #136	; 0x88
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 f9bc 	bl	8004cac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2310      	movs	r3, #16
 8000944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 800095a:	2308      	movs	r3, #8
 800095c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000960:	2307      	movs	r3, #7
 8000962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800096c:	2308      	movs	r3, #8
 800096e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000976:	4618      	mov	r0, r3
 8000978:	f001 ff3c 	bl	80027f4 <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000982:	f000 f861 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2303      	movs	r3, #3
 800098e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fb08 	bl	8002fc0 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009b6:	f000 f847 	bl	8000a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80009ba:	f244 0303 	movw	r3, #16387	; 0x4003
 80009be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80009c8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80009cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fcfb 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80009dc:	f000 f834 	bl	8000a48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e4:	f001 feb0 	bl	8002748 <HAL_PWREx_ControlVoltageScaling>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009ee:	f000 f82b 	bl	8000a48 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	37e0      	adds	r7, #224	; 0xe0
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  /* Prevent unused argument(s) compilation warning */
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0a:	d104      	bne.n	8000a16 <HAL_GPIO_EXTI_Callback+0x1c>
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f001 fe59 	bl	80026c8 <HAL_GPIO_TogglePin>
  }

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d104      	bne.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a32:	2120      	movs	r1, #32
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f001 fe46 	bl	80026c8 <HAL_GPIO_TogglePin>
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40001000 	.word	0x40001000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 fa00 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000af4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000af8:	f001 fe00 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM6_DAC_IRQHandler+0x10>)
 8000b06:	f003 f9e5 	bl	8003ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000f4 	.word	0x200000f4

08000b14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemInit+0x64>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <SystemInit+0x64>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x68>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x68>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <SystemInit+0x68>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <SystemInit+0x68>)
 8000b40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <SystemInit+0x68>)
 8000b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <SystemInit+0x68>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <SystemInit+0x68>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <SystemInit+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SystemInit+0x64>)
 8000b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	40021000 	.word	0x40021000

08000b80 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000b98:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000ba6:	22f9      	movs	r2, #249	; 0xf9
 8000ba8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000bb2:	f003 f8c7 	bl	8003d44 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bbc:	f7ff ff44 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000bce:	f003 fb63 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bd8:	f7ff ff36 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000f4 	.word	0x200000f4
 8000be8:	40001000 	.word	0x40001000

08000bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_TIM_Base_MspInit+0x44>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d113      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_TIM_Base_MspInit+0x48>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_TIM_Base_MspInit+0x48>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_TIM_Base_MspInit+0x48>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2036      	movs	r0, #54	; 0x36
 8000c1c:	f001 fb5b 	bl	80022d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f001 fb74 	bl	800230e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40001000 	.word	0x40001000
 8000c34:	40021000 	.word	0x40021000

08000c38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c7c:	f003 fbb2 	bl	80043e4 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c86:	f7ff fedf 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000140 	.word	0x20000140
 8000c94:	40013800 	.word	0x40013800

08000c98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <MX_USART2_UART_Init+0x5c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cdc:	f003 fb82 	bl	80043e4 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce6:	f7ff feaf 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001c4 	.word	0x200001c4
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <HAL_UART_MspInit+0xdc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12a      	bne.n	8000d70 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Trans_Pin|UART_RX_Trans_Pin;
 8000d4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f001 faeb 	bl	8002344 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d6e:	e02d      	b.n	8000dcc <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0xe4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d128      	bne.n	8000dcc <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0xe0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000daa:	230c      	movs	r3, #12
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f001 fabc 	bl	8002344 <HAL_GPIO_Init>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40004400 	.word	0x40004400

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff fe96 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000de8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dea:	e003      	b.n	8000df4 <LoopCopyDataInit>

08000dec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000df0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000df2:	3104      	adds	r1, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000df8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dfc:	d3f6      	bcc.n	8000dec <CopyDataInit>
	ldr	r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e00:	e002      	b.n	8000e08 <LoopFillZerobss>

08000e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e04:	f842 3b04 	str.w	r3, [r2], #4

08000e08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <LoopForever+0x16>)
	cmp	r2, r3
 8000e0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e0c:	d3f9      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 ff29 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fd59 	bl	80008c8 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e1c:	08004d2c 	.word	0x08004d2c
	ldr	r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e24:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e28:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e2c:	2000024c 	.word	0x2000024c

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_Init+0x3c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_Init+0x3c>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f001 fa38 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f80f 	bl	8000e74 <HAL_InitTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	e001      	b.n	8000e66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e62:	f7ff fdf7 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d023      	beq.n	8000ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_InitTick+0x70>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fa43 	bl	800232a <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10f      	bne.n	8000eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d809      	bhi.n	8000ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f001 fa0d 	bl	80022d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_InitTick+0x74>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e004      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e001      	b.n	8000ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000248 	.word	0x20000248

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000248 	.word	0x20000248

08000f2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	609a      	str	r2, [r3, #8]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3360      	adds	r3, #96	; 0x60
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <LL_ADC_SetOffset+0x44>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fcc:	bf00      	nop
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	03fff000 	.word	0x03fff000

08000fdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3360      	adds	r3, #96	; 0x60
 8000fea:	461a      	mov	r2, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3360      	adds	r3, #96	; 0x60
 8001018:	461a      	mov	r2, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800103e:	b480      	push	{r7}
 8001040:	b087      	sub	sp, #28
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3330      	adds	r3, #48	; 0x30
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	4413      	add	r3, r2
 800105c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	211f      	movs	r1, #31
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	401a      	ands	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0e9b      	lsrs	r3, r3, #26
 8001076:	f003 011f 	and.w	r1, r3, #31
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001096:	b480      	push	{r7}
 8001098:	b087      	sub	sp, #28
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3314      	adds	r3, #20
 80010a6:	461a      	mov	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	0e5b      	lsrs	r3, r3, #25
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	0d1b      	lsrs	r3, r3, #20
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2107      	movs	r1, #7
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	0d1b      	lsrs	r3, r3, #20
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0318 	and.w	r3, r3, #24
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001110:	40d9      	lsrs	r1, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	400b      	ands	r3, r1
 8001116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111a:	431a      	orrs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	0007ffff 	.word	0x0007ffff

08001134 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 031f 	and.w	r3, r3, #31
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6093      	str	r3, [r2, #8]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001188:	d101      	bne.n	800118e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <LL_ADC_IsEnabled+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_IsEnabled+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800124a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800124e:	f043 0204 	orr.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b04      	cmp	r3, #4
 8001274:	d101      	bne.n	800127a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b08      	cmp	r3, #8
 800129a:	d101      	bne.n	80012a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e136      	b.n	8001538 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff f9cd 	bl	8000678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff3f 	bl	8001174 <LL_ADC_IsDeepPowerDownEnabled>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff25 	bl	8001150 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff5a 	bl	80011c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff3e 	bl	800119c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001320:	4b87      	ldr	r3, [pc, #540]	; (8001540 <HAL_ADC_Init+0x290>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_ADC_Init+0x294>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001334:	e002      	b.n	800133c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff3c 	bl	80011c4 <LL_ADC_IsInternalRegulatorEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff75 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80cf 	bne.w	8001526 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 80cb 	bne.w	8001526 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff35 	bl	8001214 <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d115      	bne.n	80013dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b0:	4865      	ldr	r0, [pc, #404]	; (8001548 <HAL_ADC_Init+0x298>)
 80013b2:	f7ff ff2f 	bl	8001214 <LL_ADC_IsEnabled>
 80013b6:	4604      	mov	r4, r0
 80013b8:	4864      	ldr	r0, [pc, #400]	; (800154c <HAL_ADC_Init+0x29c>)
 80013ba:	f7ff ff2b 	bl	8001214 <LL_ADC_IsEnabled>
 80013be:	4603      	mov	r3, r0
 80013c0:	431c      	orrs	r4, r3
 80013c2:	4863      	ldr	r0, [pc, #396]	; (8001550 <HAL_ADC_Init+0x2a0>)
 80013c4:	f7ff ff26 	bl	8001214 <LL_ADC_IsEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4323      	orrs	r3, r4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4619      	mov	r1, r3
 80013d6:	485f      	ldr	r0, [pc, #380]	; (8001554 <HAL_ADC_Init+0x2a4>)
 80013d8:	f7ff fda8 	bl	8000f2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e5b      	ldrb	r3, [r3, #25]
 80013e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	3b01      	subs	r3, #1
 8001410:	045b      	lsls	r3, r3, #17
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_ADC_Init+0x2a8>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	430b      	orrs	r3, r1
 8001446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff08 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001452:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff15 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 800145e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d13d      	bne.n	80014e2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d13a      	bne.n	80014e2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001470:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001478:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001488:	f023 0302 	bic.w	r3, r3, #2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	69b9      	ldr	r1, [r7, #24]
 8001492:	430b      	orrs	r3, r1
 8001494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149c:	2b01      	cmp	r3, #1
 800149e:	d118      	bne.n	80014d2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014b6:	4311      	orrs	r1, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014c2:	430a      	orrs	r2, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	e007      	b.n	80014e2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10c      	bne.n	8001504 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f023 010f 	bic.w	r1, r3, #15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	e007      	b.n	8001514 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020f 	bic.w	r2, r2, #15
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f023 0303 	bic.w	r3, r3, #3
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
 8001524:	e007      	b.n	8001536 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001536:	7ffb      	ldrb	r3, [r7, #31]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3724      	adds	r7, #36	; 0x24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	053e2d63 	.word	0x053e2d63
 8001548:	50040000 	.word	0x50040000
 800154c:	50040100 	.word	0x50040100
 8001550:	50040200 	.word	0x50040200
 8001554:	50040300 	.word	0x50040300
 8001558:	fff0c007 	.word	0xfff0c007

0800155c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001564:	4857      	ldr	r0, [pc, #348]	; (80016c4 <HAL_ADC_Start+0x168>)
 8001566:	f7ff fde5 	bl	8001134 <LL_ADC_GetMultimode>
 800156a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe76 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 809c 	bne.w	80016b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_Start+0x30>
 8001588:	2302      	movs	r3, #2
 800158a:	e097      	b.n	80016bc <HAL_ADC_Start+0x160>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fc8b 	bl	8001eb0 <ADC_Enable>
 800159a:	4603      	mov	r3, r0
 800159c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f040 8083 	bne.w	80016ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_ADC_Start+0x16c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d002      	beq.n	80015ca <HAL_ADC_Start+0x6e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e000      	b.n	80015cc <HAL_ADC_Start+0x70>
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_ADC_Start+0x170>)
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d002      	beq.n	80015da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f2:	d106      	bne.n	8001602 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	f023 0206 	bic.w	r2, r3, #6
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001600:	e002      	b.n	8001608 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	221c      	movs	r2, #28
 800160e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2a      	ldr	r2, [pc, #168]	; (80016c8 <HAL_ADC_Start+0x16c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d002      	beq.n	8001628 <HAL_ADC_Start+0xcc>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	e000      	b.n	800162a <HAL_ADC_Start+0xce>
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_ADC_Start+0x170>)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	4293      	cmp	r3, r2
 8001630:	d008      	beq.n	8001644 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d002      	beq.n	8001644 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b09      	cmp	r3, #9
 8001642:	d114      	bne.n	800166e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fde7 	bl	800123a <LL_ADC_REG_StartConversion>
 800166c:	e025      	b.n	80016ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_ADC_Start+0x16c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d002      	beq.n	800168a <HAL_ADC_Start+0x12e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	e000      	b.n	800168c <HAL_ADC_Start+0x130>
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_ADC_Start+0x170>)
 800168c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00f      	beq.n	80016ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
 80016aa:	e006      	b.n	80016ba <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016b4:	e001      	b.n	80016ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016b6:	2302      	movs	r3, #2
 80016b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	50040300 	.word	0x50040300
 80016c8:	50040100 	.word	0x50040100
 80016cc:	50040000 	.word	0x50040000

080016d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0b6      	sub	sp, #216	; 0xd8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x22>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e3c7      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x7b2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fdaf 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 83a8 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d824      	bhi.n	800175e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	3b02      	subs	r3, #2
 800171a:	2b03      	cmp	r3, #3
 800171c:	d81b      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x86>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_ADC_ConfigChannel+0x54>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800173d 	.word	0x0800173d
 800172c:	08001745 	.word	0x08001745
 8001730:	0800174d 	.word	0x0800174d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	220c      	movs	r2, #12
 8001738:	605a      	str	r2, [r3, #4]
          break;
 800173a:	e011      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2212      	movs	r2, #18
 8001740:	605a      	str	r2, [r3, #4]
          break;
 8001742:	e00d      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2218      	movs	r2, #24
 8001748:	605a      	str	r2, [r3, #4]
          break;
 800174a:	e009      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001752:	605a      	str	r2, [r3, #4]
          break;
 8001754:	e004      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2206      	movs	r2, #6
 800175a:	605a      	str	r2, [r3, #4]
          break;
 800175c:	e000      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800175e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	f7ff fc66 	bl	800103e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fd73 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 800177c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fd7f 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 800178a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 81a6 	bne.w	8001ae4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 81a1 	bne.w	8001ae4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f7ff fc71 	bl	8001096 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d00a      	beq.n	80017ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6919      	ldr	r1, [r3, #16]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017e6:	f7ff fbd5 	bl	8000f94 <LL_ADC_SetOffset>
 80017ea:	e17b      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fbf2 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x148>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbe7 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	f003 021f 	and.w	r2, r3, #31
 8001816:	e01e      	b.n	8001856 <HAL_ADC_ConfigChannel+0x186>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fbdc 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800183a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800183e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001846:	2320      	movs	r3, #32
 8001848:	e004      	b.n	8001854 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800184a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_ADC_ConfigChannel+0x19e>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0e9b      	lsrs	r3, r3, #26
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	e018      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800188a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001892:	2320      	movs	r3, #32
 8001894:	e004      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d106      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fbab 	bl	8001008 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb8f 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <HAL_ADC_ConfigChannel+0x20e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fb84 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	0e9b      	lsrs	r3, r3, #26
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	e01e      	b.n	800191c <HAL_ADC_ConfigChannel+0x24c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fb79 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800190c:	2320      	movs	r3, #32
 800190e:	e004      	b.n	800191a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x264>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	e018      	b.n	8001966 <HAL_ADC_ConfigChannel+0x296>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800194c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001958:	2320      	movs	r3, #32
 800195a:	e004      	b.n	8001966 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800195c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001966:	429a      	cmp	r2, r3
 8001968:	d106      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	2101      	movs	r1, #1
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb48 	bl	8001008 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fb2c 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x2d4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2102      	movs	r1, #2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb21 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 021f 	and.w	r2, r3, #31
 80019a2:	e01e      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x312>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2102      	movs	r1, #2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fb16 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019d2:	2320      	movs	r3, #32
 80019d4:	e004      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x32a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0e9b      	lsrs	r3, r3, #26
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	e016      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x358>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	e004      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	2102      	movs	r1, #2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fae7 	bl	8001008 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2103      	movs	r1, #3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff facb 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10a      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x396>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2103      	movs	r1, #3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fac0 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	e017      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x3c6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fab5 	bl	8000fdc <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	e003      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x3de>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0e9b      	lsrs	r3, r3, #26
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	e011      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x402>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001abe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e003      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2103      	movs	r1, #3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fa92 	bl	8001008 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fb93 	bl	8001214 <LL_ADC_IsEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 813f 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f7ff faf2 	bl	80010ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a8e      	ldr	r2, [pc, #568]	; (8001d48 <HAL_ADC_ConfigChannel+0x678>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	f040 8130 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x46c>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	bf94      	ite	ls
 8001b34:	2301      	movls	r3, #1
 8001b36:	2300      	movhi	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e019      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x4a0>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	bf94      	ite	ls
 8001b6a:	2301      	movls	r3, #1
 8001b6c:	2300      	movhi	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d079      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x4c0>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	069b      	lsls	r3, r3, #26
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	e015      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x4ec>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	069b      	lsls	r3, r3, #26
 8001bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x50c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	e017      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x53c>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e003      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x562>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	051b      	lsls	r3, r3, #20
 8001c30:	e018      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x594>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c64:	430b      	orrs	r3, r1
 8001c66:	e080      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x5b4>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	069b      	lsls	r3, r3, #26
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c82:	e015      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x5e0>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x600>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0e9b      	lsrs	r3, r3, #26
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	e017      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x630>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	61fb      	str	r3, [r7, #28]
  return result;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e003      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	ea42 0103 	orr.w	r1, r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x65c>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	3b1e      	subs	r3, #30
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	e01d      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x698>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	613b      	str	r3, [r7, #16]
  return result;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e005      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x684>
 8001d48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	051b      	lsls	r3, r3, #20
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	6892      	ldr	r2, [r2, #8]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7ff f991 	bl	8001096 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_ADC_ConfigChannel+0x7bc>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d07a      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d80:	4843      	ldr	r0, [pc, #268]	; (8001e90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d82:	f7ff f8f9 	bl	8000f78 <LL_ADC_GetCommonPathInternalCh>
 8001d86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a41      	ldr	r2, [pc, #260]	; (8001e94 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d12c      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d126      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a3c      	ldr	r2, [pc, #240]	; (8001e98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d004      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x6e4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_ADC_ConfigChannel+0x7cc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d15d      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4834      	ldr	r0, [pc, #208]	; (8001e90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dc0:	f7ff f8c7 	bl	8000f52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dec:	e040      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2d      	ldr	r2, [pc, #180]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d118      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x75a>
 8001df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d112      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x748>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_ADC_ConfigChannel+0x7cc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d12d      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e20:	4619      	mov	r1, r3
 8001e22:	481b      	ldr	r0, [pc, #108]	; (8001e90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e24:	f7ff f895 	bl	8000f52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e28:	e024      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_ADC_ConfigChannel+0x7dc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d120      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11a      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d115      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e52:	4619      	mov	r1, r3
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e56:	f7ff f87c 	bl	8000f52 <LL_ADC_SetCommonPathInternalCh>
 8001e5a:	e00c      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e6e:	e002      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	37d8      	adds	r7, #216	; 0xd8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	80080000 	.word	0x80080000
 8001e90:	50040300 	.word	0x50040300
 8001e94:	c7520000 	.word	0xc7520000
 8001e98:	50040000 	.word	0x50040000
 8001e9c:	50040200 	.word	0x50040200
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	053e2d63 	.word	0x053e2d63
 8001ea8:	cb840000 	.word	0xcb840000
 8001eac:	80000001 	.word	0x80000001

08001eb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f9a9 	bl	8001214 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d14d      	bne.n	8001f64 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <ADC_Enable+0xc0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e039      	b.n	8001f66 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f978 	bl	80011ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001efc:	f7ff f80a 	bl	8000f14 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f02:	e028      	b.n	8001f56 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f983 	bl	8001214 <LL_ADC_IsEnabled>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f967 	bl	80011ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f1e:	f7fe fff9 	bl	8000f14 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d914      	bls.n	8001f56 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00d      	beq.n	8001f56 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e007      	b.n	8001f66 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d1cf      	bne.n	8001f04 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	8000003f 	.word	0x8000003f

08001f74 <LL_ADC_IsEnabled>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <LL_ADC_IsEnabled+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_ADC_IsEnabled+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d101      	bne.n	8001fb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b09f      	sub	sp, #124	; 0x7c
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e093      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001fea:	2300      	movs	r3, #0
 8001fec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	e001      	b.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e072      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ffb9 	bl	8001f9a <LL_ADC_REG_IsConversionOngoing>
 8002028:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ffb3 	bl	8001f9a <LL_ADC_REG_IsConversionOngoing>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d154      	bne.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203c:	2b00      	cmp	r3, #0
 800203e:	d151      	bne.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002042:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d02c      	beq.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800204c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800205e:	035b      	lsls	r3, r3, #13
 8002060:	430b      	orrs	r3, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002066:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002068:	4829      	ldr	r0, [pc, #164]	; (8002110 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800206a:	f7ff ff83 	bl	8001f74 <LL_ADC_IsEnabled>
 800206e:	4604      	mov	r4, r0
 8002070:	4828      	ldr	r0, [pc, #160]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002072:	f7ff ff7f 	bl	8001f74 <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	431c      	orrs	r4, r3
 800207a:	4828      	ldr	r0, [pc, #160]	; (800211c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800207c:	f7ff ff7a 	bl	8001f74 <LL_ADC_IsEnabled>
 8002080:	4603      	mov	r3, r0
 8002082:	4323      	orrs	r3, r4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d137      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002090:	f023 030f 	bic.w	r3, r3, #15
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	6811      	ldr	r1, [r2, #0]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	6892      	ldr	r2, [r2, #8]
 800209c:	430a      	orrs	r2, r1
 800209e:	431a      	orrs	r2, r3
 80020a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020a4:	e028      	b.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b2:	4817      	ldr	r0, [pc, #92]	; (8002110 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020b4:	f7ff ff5e 	bl	8001f74 <LL_ADC_IsEnabled>
 80020b8:	4604      	mov	r4, r0
 80020ba:	4816      	ldr	r0, [pc, #88]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020bc:	f7ff ff5a 	bl	8001f74 <LL_ADC_IsEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	431c      	orrs	r4, r3
 80020c4:	4815      	ldr	r0, [pc, #84]	; (800211c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020c6:	f7ff ff55 	bl	8001f74 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4323      	orrs	r3, r4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d112      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020da:	f023 030f 	bic.w	r3, r3, #15
 80020de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020e2:	e009      	b.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80020f6:	e000      	b.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002102:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002106:	4618      	mov	r0, r3
 8002108:	377c      	adds	r7, #124	; 0x7c
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop
 8002110:	50040000 	.word	0x50040000
 8002114:	50040100 	.word	0x50040100
 8002118:	50040300 	.word	0x50040300
 800211c:	50040200 	.word	0x50040200

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <__NVIC_EnableIRQ+0x38>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	210f      	movs	r1, #15
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff8e 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff29 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e8:	f7ff ff3e 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ff8e 	bl	8002214 <NVIC_EncodePriority>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5d 	bl	80021c0 <__NVIC_SetPriority>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff31 	bl	8002184 <__NVIC_EnableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffa2 	bl	800227c <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	e17f      	b.n	8002654 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8171 	beq.w	800264e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d00b      	beq.n	800238c <HAL_GPIO_Init+0x48>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002380:	2b11      	cmp	r3, #17
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b12      	cmp	r3, #18
 800238a:	d130      	bne.n	80023ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c2:	2201      	movs	r2, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0201 	and.w	r2, r3, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d118      	bne.n	800242c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002400:	2201      	movs	r2, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	08db      	lsrs	r3, r3, #3
 8002416:	f003 0201 	and.w	r2, r3, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x128>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d123      	bne.n	80024b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	6939      	ldr	r1, [r7, #16]
 80024b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80ac 	beq.w	800264e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_GPIO_Init+0x330>)
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	4a5e      	ldr	r2, [pc, #376]	; (8002674 <HAL_GPIO_Init+0x330>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6613      	str	r3, [r2, #96]	; 0x60
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_GPIO_Init+0x330>)
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800250e:	4a5a      	ldr	r2, [pc, #360]	; (8002678 <HAL_GPIO_Init+0x334>)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002538:	d025      	beq.n	8002586 <HAL_GPIO_Init+0x242>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4f      	ldr	r2, [pc, #316]	; (800267c <HAL_GPIO_Init+0x338>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x23e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <HAL_GPIO_Init+0x33c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x23a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_GPIO_Init+0x340>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x236>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4c      	ldr	r2, [pc, #304]	; (8002688 <HAL_GPIO_Init+0x344>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x232>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4b      	ldr	r2, [pc, #300]	; (800268c <HAL_GPIO_Init+0x348>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x22e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_GPIO_Init+0x34c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x22a>
 800256a:	2306      	movs	r3, #6
 800256c:	e00c      	b.n	8002588 <HAL_GPIO_Init+0x244>
 800256e:	2307      	movs	r3, #7
 8002570:	e00a      	b.n	8002588 <HAL_GPIO_Init+0x244>
 8002572:	2305      	movs	r3, #5
 8002574:	e008      	b.n	8002588 <HAL_GPIO_Init+0x244>
 8002576:	2304      	movs	r3, #4
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x244>
 800257a:	2303      	movs	r3, #3
 800257c:	e004      	b.n	8002588 <HAL_GPIO_Init+0x244>
 800257e:	2302      	movs	r3, #2
 8002580:	e002      	b.n	8002588 <HAL_GPIO_Init+0x244>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x244>
 8002586:	2300      	movs	r3, #0
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	f002 0203 	and.w	r2, r2, #3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	4093      	lsls	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002598:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_GPIO_Init+0x334>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_GPIO_Init+0x350>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ca:	4a32      	ldr	r2, [pc, #200]	; (8002694 <HAL_GPIO_Init+0x350>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_GPIO_Init+0x350>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <HAL_GPIO_Init+0x350>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_GPIO_Init+0x350>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <HAL_GPIO_Init+0x350>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_GPIO_Init+0x350>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002648:	4a12      	ldr	r2, [pc, #72]	; (8002694 <HAL_GPIO_Init+0x350>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f47f ae78 	bne.w	8002354 <HAL_GPIO_Init+0x10>
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	40010000 	.word	0x40010000
 800267c:	48000400 	.word	0x48000400
 8002680:	48000800 	.word	0x48000800
 8002684:	48000c00 	.word	0x48000c00
 8002688:	48001000 	.word	0x48001000
 800268c:	48001400 	.word	0x48001400
 8002690:	48001800 	.word	0x48001800
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43d9      	mvns	r1, r3
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	400b      	ands	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe f96d 	bl	80009fa <HAL_GPIO_EXTI_Callback>
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010400 	.word	0x40010400

0800272c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_PWREx_GetVoltageRange+0x18>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000

08002748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002756:	d130      	bne.n	80027ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002764:	d038      	beq.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2232      	movs	r2, #50	; 0x32
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9b      	lsrs	r3, r3, #18
 8002788:	3301      	adds	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278c:	e002      	b.n	8002794 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3b01      	subs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a0:	d102      	bne.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f2      	bne.n	800278e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b4:	d110      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e00f      	b.n	80027da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	d007      	beq.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d0:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40007000 	.word	0x40007000
 80027ec:	20000000 	.word	0x20000000
 80027f0:	431bde83 	.word	0x431bde83

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e3d4      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002806:	4ba1      	ldr	r3, [pc, #644]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002810:	4b9e      	ldr	r3, [pc, #632]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80e4 	beq.w	80029f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_RCC_OscConfig+0x4a>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	f040 808b 	bne.w	800294c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b01      	cmp	r3, #1
 800283a:	f040 8087 	bne.w	800294c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800283e:	4b93      	ldr	r3, [pc, #588]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x62>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e3ac      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	4b8c      	ldr	r3, [pc, #560]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_RCC_OscConfig+0x7c>
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286e:	e005      	b.n	800287c <HAL_RCC_OscConfig+0x88>
 8002870:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287c:	4293      	cmp	r3, r2
 800287e:	d223      	bcs.n	80028c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd41 	bl	800330c <RCC_SetFlashLatencyFromMSIRange>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e38d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002894:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 800289a:	f043 0308 	orr.w	r3, r3, #8
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4977      	ldr	r1, [pc, #476]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b2:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	4972      	ldr	r1, [pc, #456]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
 80028c6:	e025      	b.n	8002914 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c8:	4b70      	ldr	r3, [pc, #448]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6f      	ldr	r2, [pc, #444]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	496a      	ldr	r1, [pc, #424]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e6:	4b69      	ldr	r3, [pc, #420]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	4965      	ldr	r1, [pc, #404]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fd01 	bl	800330c <RCC_SetFlashLatencyFromMSIRange>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e34d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002914:	f000 fc36 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	495a      	ldr	r1, [pc, #360]	; (8002a90 <HAL_RCC_OscConfig+0x29c>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_OscConfig+0x2a0>)
 8002932:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_OscConfig+0x2a4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fa9b 	bl	8000e74 <HAL_InitTick>
 800293e:	4603      	mov	r3, r0
 8002940:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d052      	beq.n	80029ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	e331      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d032      	beq.n	80029ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002960:	f7fe fad8 	bl	8000f14 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002968:	f7fe fad4 	bl	8000f14 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e31a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	493b      	ldr	r1, [pc, #236]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4936      	ldr	r1, [pc, #216]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	e01a      	b.n	80029f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a33      	ldr	r2, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029c6:	f7fe faa5 	bl	8000f14 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ce:	f7fe faa1 	bl	8000f14 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e2e7      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x1da>
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d074      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x21a>
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d10e      	bne.n	8002a26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d064      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2f0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d160      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e2c4      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x24a>
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e01d      	b.n	8002a7a <HAL_RCC_OscConfig+0x286>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x26e>
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0x286>
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x298>)
 8002a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01c      	beq.n	8002abc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fa47 	bl	8000f14 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a88:	e011      	b.n	8002aae <HAL_RCC_OscConfig+0x2ba>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08004cd4 	.word	0x08004cd4
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fa3a 	bl	8000f14 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e280      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aae:	4baf      	ldr	r3, [pc, #700]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2a8>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fa2a 	bl	8000f14 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fa26 	bl	8000f14 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e26c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad6:	4ba5      	ldr	r3, [pc, #660]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2d0>
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x310>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d116      	bne.n	8002b32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	4b99      	ldr	r3, [pc, #612]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x328>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e249      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b93      	ldr	r3, [pc, #588]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	4990      	ldr	r1, [pc, #576]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	e040      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d023      	beq.n	8002b82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3a:	4b8c      	ldr	r3, [pc, #560]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a8b      	ldr	r2, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe f9e5 	bl	8000f14 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f9e1 	bl	8000f14 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e227      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	4b82      	ldr	r3, [pc, #520]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	497c      	ldr	r1, [pc, #496]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e018      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b7a      	ldr	r3, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a79      	ldr	r2, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe f9c1 	bl	8000f14 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe f9bd 	bl	8000f14 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e203      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba8:	4b70      	ldr	r3, [pc, #448]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d03c      	beq.n	8002c3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe f99c 	bl	8000f14 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fe f998 	bl	8000f14 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1de      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf2:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ef      	beq.n	8002be0 <HAL_RCC_OscConfig+0x3ec>
 8002c00:	e01b      	b.n	8002c3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c08:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe f97f 	bl	8000f14 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1a:	f7fe f97b 	bl	8000f14 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1c1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c2c:	4b4f      	ldr	r3, [pc, #316]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ef      	bne.n	8002c1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80a6 	beq.w	8002d94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c4c:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	4a43      	ldr	r2, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6593      	str	r3, [r2, #88]	; 0x58
 8002c64:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c74:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d118      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c80:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3a      	ldr	r2, [pc, #232]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f942 	bl	8000f14 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c94:	f7fe f93e 	bl	8000f14 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e184      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4d8>
 8002cba:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cca:	e024      	b.n	8002d16 <HAL_RCC_OscConfig+0x522>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d110      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x502>
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCC_OscConfig+0x522>
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f8f9 	bl	8000f14 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe f8f5 	bl	8000f14 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e139      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ed      	beq.n	8002d26 <HAL_RCC_OscConfig+0x532>
 8002d4a:	e01a      	b.n	8002d82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe f8e2 	bl	8000f14 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d52:	e00f      	b.n	8002d74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe f8de 	bl	8000f14 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d906      	bls.n	8002d74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e122      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d74:	4b90      	ldr	r3, [pc, #576]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e8      	bne.n	8002d54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b8b      	ldr	r3, [pc, #556]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	4a8a      	ldr	r2, [pc, #552]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8108 	beq.w	8002fae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	f040 80d0 	bne.w	8002f48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002da8:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d130      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d127      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d11f      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de8:	2a07      	cmp	r2, #7
 8002dea:	bf14      	ite	ne
 8002dec:	2201      	movne	r2, #1
 8002dee:	2200      	moveq	r2, #0
 8002df0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d113      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d06e      	beq.n	8002efc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d069      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e24:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b7      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e40:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a5c      	ldr	r2, [pc, #368]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e4c:	f7fe f862 	bl	8000f14 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe f85e 	bl	8000f14 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0a4      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	4b54      	ldr	r3, [pc, #336]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b51      	ldr	r3, [pc, #324]	; (8002fbc <HAL_RCC_OscConfig+0x7c8>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e8c:	0212      	lsls	r2, r2, #8
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e94:	0852      	lsrs	r2, r2, #1
 8002e96:	3a01      	subs	r2, #1
 8002e98:	0552      	lsls	r2, r2, #21
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0652      	lsls	r2, r2, #25
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eac:	0912      	lsrs	r2, r2, #4
 8002eae:	0452      	lsls	r2, r2, #17
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4941      	ldr	r1, [pc, #260]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3e      	ldr	r2, [pc, #248]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ed0:	f7fe f820 	bl	8000f14 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe f81c 	bl	8000f14 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e062      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef6:	e05a      	b.n	8002fae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e059      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d152      	bne.n	8002fae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f20:	f7fd fff8 	bl	8000f14 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fd fff4 	bl	8000f14 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e03a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x734>
 8002f46:	e032      	b.n	8002fae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d02d      	beq.n	8002faa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f6c:	f023 0303 	bic.w	r3, r3, #3
 8002f70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fd ffc7 	bl	8000f14 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fd ffc3 	bl	8000f14 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_OscConfig+0x7c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x796>
 8002fa8:	e001      	b.n	8002fae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	f99d808c 	.word	0xf99d808c

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0c8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d910      	bls.n	8003004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4961      	ldr	r1, [pc, #388]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b0      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d04c      	beq.n	80030aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003018:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d121      	bne.n	8003068 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e09e      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d115      	bne.n	8003068 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e092      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003048:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e086      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e07e      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003068:	4b42      	ldr	r3, [pc, #264]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 0203 	bic.w	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	493f      	ldr	r1, [pc, #252]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307a:	f7fd ff4b 	bl	8000f14 <HAL_GetTick>
 800307e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003080:	e00a      	b.n	8003098 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7fd ff47 	bl	8000f14 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e066      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 020c 	and.w	r2, r3, #12
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d1eb      	bne.n	8003082 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	492c      	ldr	r1, [pc, #176]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d210      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4924      	ldr	r1, [pc, #144]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x1b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e036      	b.n	8003166 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4918      	ldr	r1, [pc, #96]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4910      	ldr	r1, [pc, #64]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003136:	f000 f825 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490c      	ldr	r1, [pc, #48]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fe8a 	bl	8000e74 <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	72fb      	strb	r3, [r7, #11]

  return status;
 8003164:	7afb      	ldrb	r3, [r7, #11]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40022000 	.word	0x40022000
 8003174:	40021000 	.word	0x40021000
 8003178:	08004cd4 	.word	0x08004cd4
 800317c:	20000000 	.word	0x20000000
 8003180:	20000004 	.word	0x20000004

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003192:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800319c:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x34>
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d121      	bne.n	80031f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d11e      	bne.n	80031f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031b8:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031c4:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e005      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_GetSysClockFreq+0x110>)
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	e004      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d101      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_RCC_GetSysClockFreq+0x114>)
 800320a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d134      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0xa6>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d003      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0xac>
 8003228:	e005      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_RCC_GetSysClockFreq+0x110>)
 800322c:	617b      	str	r3, [r7, #20]
      break;
 800322e:	e005      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_GetSysClockFreq+0x114>)
 8003232:	617b      	str	r3, [r7, #20]
      break;
 8003234:	e002      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	617b      	str	r3, [r7, #20]
      break;
 800323a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	3301      	adds	r3, #1
 8003248:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	fb02 f203 	mul.w	r2, r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_RCC_GetSysClockFreq+0x108>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	0e5b      	lsrs	r3, r3, #25
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	3301      	adds	r3, #1
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800327c:	69bb      	ldr	r3, [r7, #24]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	08004cec 	.word	0x08004cec
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200

0800329c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b8:	f7ff fff0 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4904      	ldr	r1, [pc, #16]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08004ce4 	.word	0x08004ce4

080032e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032e4:	f7ff ffda 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0adb      	lsrs	r3, r3, #11
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4904      	ldr	r1, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	08004ce4 	.word	0x08004ce4

0800330c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003324:	f7ff fa02 	bl	800272c <HAL_PWREx_GetVoltageRange>
 8003328:	6178      	str	r0, [r7, #20]
 800332a:	e014      	b.n	8003356 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	; 0x58
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003344:	f7ff f9f2 	bl	800272c <HAL_PWREx_GetVoltageRange>
 8003348:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d10b      	bne.n	8003376 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d919      	bls.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2ba0      	cmp	r3, #160	; 0xa0
 8003368:	d902      	bls.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800336a:	2302      	movs	r3, #2
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e013      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003370:	2301      	movs	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	e010      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d902      	bls.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800337c:	2303      	movs	r3, #3
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	e00a      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b80      	cmp	r3, #128	; 0x80
 8003386:	d102      	bne.n	800338e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003388:	2302      	movs	r3, #2
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e004      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b70      	cmp	r3, #112	; 0x70
 8003392:	d101      	bne.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003394:	2301      	movs	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 0207 	bic.w	r2, r3, #7
 80033a0:	4909      	ldr	r1, [pc, #36]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40022000 	.word	0x40022000

080033cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d4:	2300      	movs	r3, #0
 80033d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d8:	2300      	movs	r3, #0
 80033da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d041      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033f0:	d02a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033f6:	d824      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003402:	d81e      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d010      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800340e:	e018      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003410:	4b86      	ldr	r3, [pc, #536]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a85      	ldr	r2, [pc, #532]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341c:	e015      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fabb 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800342e:	e00c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3320      	adds	r3, #32
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fba6 	bl	8003b88 <RCCEx_PLLSAI2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	74fb      	strb	r3, [r7, #19]
      break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003450:	4b76      	ldr	r3, [pc, #472]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	4973      	ldr	r1, [pc, #460]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d041      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003480:	d02a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003482:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003486:	d824      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800348c:	d008      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800348e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003492:	d81e      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800349c:	d010      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800349e:	e018      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034a0:	4b62      	ldr	r3, [pc, #392]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a61      	ldr	r2, [pc, #388]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ac:	e015      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa73 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034be:	e00c      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3320      	adds	r3, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fb5e 	bl	8003b88 <RCCEx_PLLSAI2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	74fb      	strb	r3, [r7, #19]
      break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034e0:	4b52      	ldr	r3, [pc, #328]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ee:	494f      	ldr	r1, [pc, #316]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a0 	beq.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	4a40      	ldr	r2, [pc, #256]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	; 0x58
 8003530:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353c:	2301      	movs	r3, #1
 800353e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003540:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354c:	f7fd fce2 	bl	8000f14 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fd fcde 	bl	8000f14 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	74fb      	strb	r3, [r7, #19]
        break;
 8003566:	e005      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003568:	4b31      	ldr	r3, [pc, #196]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d15c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357a:	4b2c      	ldr	r3, [pc, #176]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003584:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d019      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a20      	ldr	r2, [pc, #128]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd fc9d 	bl	8000f14 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035dc:	e00b      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fd fc99 	bl	8000f14 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	74fb      	strb	r3, [r7, #19]
            break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ec      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361a:	4904      	ldr	r1, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003622:	e009      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
 8003628:	e006      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003638:	7c7b      	ldrb	r3, [r7, #17]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b9e      	ldr	r3, [pc, #632]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	4a9d      	ldr	r2, [pc, #628]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003656:	4b98      	ldr	r3, [pc, #608]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f023 0203 	bic.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	4994      	ldr	r1, [pc, #592]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 020c 	bic.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	498c      	ldr	r1, [pc, #560]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369a:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4983      	ldr	r1, [pc, #524]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036bc:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	497b      	ldr	r1, [pc, #492]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036de:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ec:	4972      	ldr	r1, [pc, #456]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003700:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	496a      	ldr	r1, [pc, #424]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	4961      	ldr	r1, [pc, #388]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003744:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	4959      	ldr	r1, [pc, #356]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	4950      	ldr	r1, [pc, #320]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	4948      	ldr	r1, [pc, #288]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	493f      	ldr	r1, [pc, #252]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d028      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	4937      	ldr	r1, [pc, #220]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ea:	d106      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	e011      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003802:	d10c      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f8c8 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d028      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	491f      	ldr	r1, [pc, #124]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003848:	d106      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003854:	60d3      	str	r3, [r2, #12]
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003860:	d10c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f899 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	4908      	ldr	r1, [pc, #32]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a02      	ldr	r2, [pc, #8]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e014      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f867 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fa:	4928      	ldr	r1, [pc, #160]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d10d      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f844 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	74bb      	strb	r3, [r7, #18]
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3320      	adds	r3, #32
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f925 	bl	8003b88 <RCCEx_PLLSAI2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003966:	490d      	ldr	r1, [pc, #52]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398a:	4904      	ldr	r1, [pc, #16]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003992:	7cbb      	ldrb	r3, [r7, #18]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000

080039a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ae:	4b75      	ldr	r3, [pc, #468]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ba:	4b72      	ldr	r3, [pc, #456]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0203 	and.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d10d      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
       ||
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039d2:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
       ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d047      	beq.n	8003a76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e044      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d018      	beq.n	8003a26 <RCCEx_PLLSAI1_Config+0x86>
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d825      	bhi.n	8003a44 <RCCEx_PLLSAI1_Config+0xa4>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <RCCEx_PLLSAI1_Config+0x62>
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d009      	beq.n	8003a14 <RCCEx_PLLSAI1_Config+0x74>
 8003a00:	e020      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a02:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11d      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a12:	e01a      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a14:	4b5b      	ldr	r3, [pc, #364]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a24:	e013      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a26:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a32:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a42:	e006      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e004      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	4944      	ldr	r1, [pc, #272]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d17d      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a7c:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a40      	ldr	r2, [pc, #256]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd fa44 	bl	8000f14 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a90:	f7fd fa40 	bl	8000f14 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa4:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ef      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d160      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abc:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6892      	ldr	r2, [r2, #8]
 8003acc:	0211      	lsls	r1, r2, #8
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	0912      	lsrs	r2, r2, #4
 8003ad4:	0452      	lsls	r2, r2, #17
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	492a      	ldr	r1, [pc, #168]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
 8003ade:	e027      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d112      	bne.n	8003b0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae6:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	0211      	lsls	r1, r2, #8
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6912      	ldr	r2, [r2, #16]
 8003afc:	0852      	lsrs	r2, r2, #1
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0552      	lsls	r2, r2, #21
 8003b02:	430a      	orrs	r2, r1
 8003b04:	491f      	ldr	r1, [pc, #124]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
 8003b0a:	e011      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	0211      	lsls	r1, r2, #8
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6952      	ldr	r2, [r2, #20]
 8003b22:	0852      	lsrs	r2, r2, #1
 8003b24:	3a01      	subs	r2, #1
 8003b26:	0652      	lsls	r2, r2, #25
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	4916      	ldr	r1, [pc, #88]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd f9ea 	bl	8000f14 <HAL_GetTick>
 8003b40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b42:	e009      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b44:	f7fd f9e6 	bl	8000f14 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d902      	bls.n	8003b58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	73fb      	strb	r3, [r7, #15]
          break;
 8003b56:	e005      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	4904      	ldr	r1, [pc, #16]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b96:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ba2:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d10d      	bne.n	8003bce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bba:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d047      	beq.n	8003c5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	e044      	b.n	8003c5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d018      	beq.n	8003c0e <RCCEx_PLLSAI2_Config+0x86>
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d825      	bhi.n	8003c2c <RCCEx_PLLSAI2_Config+0xa4>
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d002      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x62>
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d009      	beq.n	8003bfc <RCCEx_PLLSAI2_Config+0x74>
 8003be8:	e020      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bea:	4b55      	ldr	r3, [pc, #340]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11d      	bne.n	8003c32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfa:	e01a      	b.n	8003c32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e013      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c0e:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c1a:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c2a:	e006      	b.n	8003c3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e004      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10d      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c42:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	430b      	orrs	r3, r1
 8003c58:	4939      	ldr	r1, [pc, #228]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d167      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c64:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fd f950 	bl	8000f14 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c76:	e009      	b.n	8003c8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c78:	f7fd f94c 	bl	8000f14 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d902      	bls.n	8003c8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	73fb      	strb	r3, [r7, #15]
        break;
 8003c8a:	e005      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ef      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d14a      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d111      	bne.n	8003cc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	0912      	lsrs	r2, r2, #4
 8003cbc:	0452      	lsls	r2, r2, #17
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	491f      	ldr	r1, [pc, #124]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	614b      	str	r3, [r1, #20]
 8003cc6:	e011      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
 8003cd8:	0211      	lsls	r1, r2, #8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6912      	ldr	r2, [r2, #16]
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0652      	lsls	r2, r2, #25
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	4916      	ldr	r1, [pc, #88]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f90c 	bl	8000f14 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cfe:	e009      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d00:	f7fd f908 	bl	8000f14 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	73fb      	strb	r3, [r7, #15]
          break;
 8003d12:	e005      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ef      	beq.n	8003d00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	4904      	ldr	r1, [pc, #16]	; (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e049      	b.n	8003dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc ff3e 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f000 f9ee 	bl	8004164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e04f      	b.n	8003eac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01d      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x76>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d018      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x76>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x76>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x76>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x76>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x76>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d115      	bne.n	8003e96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b06      	cmp	r3, #6
 8003e7a:	d015      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0xb4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e82:	d011      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	e008      	b.n	8003ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e000      	b.n	8003eaa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40013400 	.word	0x40013400
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	00010007 	.word	0x00010007

08003ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0202 	mvn.w	r2, #2
 8003f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f905 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8f7 	bl	8004112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f908 	bl	800413a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0204 	mvn.w	r2, #4
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8db 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8cd 	bl	8004112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8de 	bl	800413a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d122      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0208 	mvn.w	r2, #8
 8003fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2204      	movs	r2, #4
 8003fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8b1 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8a3 	bl	8004112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8b4 	bl	800413a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d122      	bne.n	800402c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d11b      	bne.n	800402c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0210 	mvn.w	r2, #16
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2208      	movs	r2, #8
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f887 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f879 	bl	8004112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f88a 	bl	800413a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0201 	mvn.w	r2, #1
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fc fce4 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b80      	cmp	r3, #128	; 0x80
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f99c 	bl	80043bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d10e      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409e:	2b80      	cmp	r3, #128	; 0x80
 80040a0:	d107      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f98f 	bl	80043d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d10e      	bne.n	80040de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d107      	bne.n	80040de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f838 	bl	800414e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d10e      	bne.n	800410a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d107      	bne.n	800410a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0220 	mvn.w	r2, #32
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f94f 	bl	80043a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a40      	ldr	r2, [pc, #256]	; (8004278 <TIM_Base_SetConfig+0x114>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d00f      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3d      	ldr	r2, [pc, #244]	; (800427c <TIM_Base_SetConfig+0x118>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3c      	ldr	r2, [pc, #240]	; (8004280 <TIM_Base_SetConfig+0x11c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3b      	ldr	r2, [pc, #236]	; (8004284 <TIM_Base_SetConfig+0x120>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3a      	ldr	r2, [pc, #232]	; (8004288 <TIM_Base_SetConfig+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <TIM_Base_SetConfig+0x114>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2c      	ldr	r2, [pc, #176]	; (800427c <TIM_Base_SetConfig+0x118>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <TIM_Base_SetConfig+0x11c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <TIM_Base_SetConfig+0x120>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a29      	ldr	r2, [pc, #164]	; (8004288 <TIM_Base_SetConfig+0x124>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a28      	ldr	r2, [pc, #160]	; (800428c <TIM_Base_SetConfig+0x128>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a27      	ldr	r2, [pc, #156]	; (8004290 <TIM_Base_SetConfig+0x12c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a26      	ldr	r2, [pc, #152]	; (8004294 <TIM_Base_SetConfig+0x130>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <TIM_Base_SetConfig+0x114>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a11      	ldr	r2, [pc, #68]	; (800428c <TIM_Base_SetConfig+0x128>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a10      	ldr	r2, [pc, #64]	; (8004290 <TIM_Base_SetConfig+0x12c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <TIM_Base_SetConfig+0x130>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40013400 	.word	0x40013400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e068      	b.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2d      	ldr	r2, [pc, #180]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d018      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10c      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40013400 	.word	0x40013400
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40014000 	.word	0x40014000

080043a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e040      	b.n	8004478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc fc76 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f82c 	bl	8004480 <UART_SetConfig>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 faaa 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800444e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800445e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fb31 	bl	8004ad8 <UART_CheckIdleState>
 8004476:	4603      	mov	r3, r0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4bad      	ldr	r3, [pc, #692]	; (8004760 <UART_SetConfig+0x2e0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4aa2      	ldr	r2, [pc, #648]	; (8004764 <UART_SetConfig+0x2e4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a99      	ldr	r2, [pc, #612]	; (8004768 <UART_SetConfig+0x2e8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d121      	bne.n	800454a <UART_SetConfig+0xca>
 8004506:	4b99      	ldr	r3, [pc, #612]	; (800476c <UART_SetConfig+0x2ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b03      	cmp	r3, #3
 8004512:	d817      	bhi.n	8004544 <UART_SetConfig+0xc4>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x9c>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	0800452d 	.word	0x0800452d
 8004520:	08004539 	.word	0x08004539
 8004524:	08004533 	.word	0x08004533
 8004528:	0800453f 	.word	0x0800453f
 800452c:	2301      	movs	r3, #1
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	e0e7      	b.n	8004702 <UART_SetConfig+0x282>
 8004532:	2302      	movs	r3, #2
 8004534:	76fb      	strb	r3, [r7, #27]
 8004536:	e0e4      	b.n	8004702 <UART_SetConfig+0x282>
 8004538:	2304      	movs	r3, #4
 800453a:	76fb      	strb	r3, [r7, #27]
 800453c:	e0e1      	b.n	8004702 <UART_SetConfig+0x282>
 800453e:	2308      	movs	r3, #8
 8004540:	76fb      	strb	r3, [r7, #27]
 8004542:	e0de      	b.n	8004702 <UART_SetConfig+0x282>
 8004544:	2310      	movs	r3, #16
 8004546:	76fb      	strb	r3, [r7, #27]
 8004548:	e0db      	b.n	8004702 <UART_SetConfig+0x282>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a88      	ldr	r2, [pc, #544]	; (8004770 <UART_SetConfig+0x2f0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d132      	bne.n	80045ba <UART_SetConfig+0x13a>
 8004554:	4b85      	ldr	r3, [pc, #532]	; (800476c <UART_SetConfig+0x2ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d828      	bhi.n	80045b4 <UART_SetConfig+0x134>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0xe8>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800459d 	.word	0x0800459d
 800456c:	080045b5 	.word	0x080045b5
 8004570:	080045b5 	.word	0x080045b5
 8004574:	080045b5 	.word	0x080045b5
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045b5 	.word	0x080045b5
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045b5 	.word	0x080045b5
 8004588:	080045a3 	.word	0x080045a3
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045b5 	.word	0x080045b5
 8004598:	080045af 	.word	0x080045af
 800459c:	2300      	movs	r3, #0
 800459e:	76fb      	strb	r3, [r7, #27]
 80045a0:	e0af      	b.n	8004702 <UART_SetConfig+0x282>
 80045a2:	2302      	movs	r3, #2
 80045a4:	76fb      	strb	r3, [r7, #27]
 80045a6:	e0ac      	b.n	8004702 <UART_SetConfig+0x282>
 80045a8:	2304      	movs	r3, #4
 80045aa:	76fb      	strb	r3, [r7, #27]
 80045ac:	e0a9      	b.n	8004702 <UART_SetConfig+0x282>
 80045ae:	2308      	movs	r3, #8
 80045b0:	76fb      	strb	r3, [r7, #27]
 80045b2:	e0a6      	b.n	8004702 <UART_SetConfig+0x282>
 80045b4:	2310      	movs	r3, #16
 80045b6:	76fb      	strb	r3, [r7, #27]
 80045b8:	e0a3      	b.n	8004702 <UART_SetConfig+0x282>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6d      	ldr	r2, [pc, #436]	; (8004774 <UART_SetConfig+0x2f4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d120      	bne.n	8004606 <UART_SetConfig+0x186>
 80045c4:	4b69      	ldr	r3, [pc, #420]	; (800476c <UART_SetConfig+0x2ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d013      	beq.n	80045fa <UART_SetConfig+0x17a>
 80045d2:	2b30      	cmp	r3, #48	; 0x30
 80045d4:	d814      	bhi.n	8004600 <UART_SetConfig+0x180>
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d009      	beq.n	80045ee <UART_SetConfig+0x16e>
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d810      	bhi.n	8004600 <UART_SetConfig+0x180>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <UART_SetConfig+0x168>
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d006      	beq.n	80045f4 <UART_SetConfig+0x174>
 80045e6:	e00b      	b.n	8004600 <UART_SetConfig+0x180>
 80045e8:	2300      	movs	r3, #0
 80045ea:	76fb      	strb	r3, [r7, #27]
 80045ec:	e089      	b.n	8004702 <UART_SetConfig+0x282>
 80045ee:	2302      	movs	r3, #2
 80045f0:	76fb      	strb	r3, [r7, #27]
 80045f2:	e086      	b.n	8004702 <UART_SetConfig+0x282>
 80045f4:	2304      	movs	r3, #4
 80045f6:	76fb      	strb	r3, [r7, #27]
 80045f8:	e083      	b.n	8004702 <UART_SetConfig+0x282>
 80045fa:	2308      	movs	r3, #8
 80045fc:	76fb      	strb	r3, [r7, #27]
 80045fe:	e080      	b.n	8004702 <UART_SetConfig+0x282>
 8004600:	2310      	movs	r3, #16
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	e07d      	b.n	8004702 <UART_SetConfig+0x282>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a5b      	ldr	r2, [pc, #364]	; (8004778 <UART_SetConfig+0x2f8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d120      	bne.n	8004652 <UART_SetConfig+0x1d2>
 8004610:	4b56      	ldr	r3, [pc, #344]	; (800476c <UART_SetConfig+0x2ec>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d013      	beq.n	8004646 <UART_SetConfig+0x1c6>
 800461e:	2bc0      	cmp	r3, #192	; 0xc0
 8004620:	d814      	bhi.n	800464c <UART_SetConfig+0x1cc>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d009      	beq.n	800463a <UART_SetConfig+0x1ba>
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d810      	bhi.n	800464c <UART_SetConfig+0x1cc>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <UART_SetConfig+0x1b4>
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d006      	beq.n	8004640 <UART_SetConfig+0x1c0>
 8004632:	e00b      	b.n	800464c <UART_SetConfig+0x1cc>
 8004634:	2300      	movs	r3, #0
 8004636:	76fb      	strb	r3, [r7, #27]
 8004638:	e063      	b.n	8004702 <UART_SetConfig+0x282>
 800463a:	2302      	movs	r3, #2
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e060      	b.n	8004702 <UART_SetConfig+0x282>
 8004640:	2304      	movs	r3, #4
 8004642:	76fb      	strb	r3, [r7, #27]
 8004644:	e05d      	b.n	8004702 <UART_SetConfig+0x282>
 8004646:	2308      	movs	r3, #8
 8004648:	76fb      	strb	r3, [r7, #27]
 800464a:	e05a      	b.n	8004702 <UART_SetConfig+0x282>
 800464c:	2310      	movs	r3, #16
 800464e:	76fb      	strb	r3, [r7, #27]
 8004650:	e057      	b.n	8004702 <UART_SetConfig+0x282>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a49      	ldr	r2, [pc, #292]	; (800477c <UART_SetConfig+0x2fc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d125      	bne.n	80046a8 <UART_SetConfig+0x228>
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <UART_SetConfig+0x2ec>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466a:	d017      	beq.n	800469c <UART_SetConfig+0x21c>
 800466c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004670:	d817      	bhi.n	80046a2 <UART_SetConfig+0x222>
 8004672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004676:	d00b      	beq.n	8004690 <UART_SetConfig+0x210>
 8004678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467c:	d811      	bhi.n	80046a2 <UART_SetConfig+0x222>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <UART_SetConfig+0x20a>
 8004682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004686:	d006      	beq.n	8004696 <UART_SetConfig+0x216>
 8004688:	e00b      	b.n	80046a2 <UART_SetConfig+0x222>
 800468a:	2300      	movs	r3, #0
 800468c:	76fb      	strb	r3, [r7, #27]
 800468e:	e038      	b.n	8004702 <UART_SetConfig+0x282>
 8004690:	2302      	movs	r3, #2
 8004692:	76fb      	strb	r3, [r7, #27]
 8004694:	e035      	b.n	8004702 <UART_SetConfig+0x282>
 8004696:	2304      	movs	r3, #4
 8004698:	76fb      	strb	r3, [r7, #27]
 800469a:	e032      	b.n	8004702 <UART_SetConfig+0x282>
 800469c:	2308      	movs	r3, #8
 800469e:	76fb      	strb	r3, [r7, #27]
 80046a0:	e02f      	b.n	8004702 <UART_SetConfig+0x282>
 80046a2:	2310      	movs	r3, #16
 80046a4:	76fb      	strb	r3, [r7, #27]
 80046a6:	e02c      	b.n	8004702 <UART_SetConfig+0x282>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <UART_SetConfig+0x2e4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d125      	bne.n	80046fe <UART_SetConfig+0x27e>
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <UART_SetConfig+0x2ec>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c0:	d017      	beq.n	80046f2 <UART_SetConfig+0x272>
 80046c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c6:	d817      	bhi.n	80046f8 <UART_SetConfig+0x278>
 80046c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046cc:	d00b      	beq.n	80046e6 <UART_SetConfig+0x266>
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d2:	d811      	bhi.n	80046f8 <UART_SetConfig+0x278>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <UART_SetConfig+0x260>
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d006      	beq.n	80046ec <UART_SetConfig+0x26c>
 80046de:	e00b      	b.n	80046f8 <UART_SetConfig+0x278>
 80046e0:	2300      	movs	r3, #0
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e00d      	b.n	8004702 <UART_SetConfig+0x282>
 80046e6:	2302      	movs	r3, #2
 80046e8:	76fb      	strb	r3, [r7, #27]
 80046ea:	e00a      	b.n	8004702 <UART_SetConfig+0x282>
 80046ec:	2304      	movs	r3, #4
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e007      	b.n	8004702 <UART_SetConfig+0x282>
 80046f2:	2308      	movs	r3, #8
 80046f4:	76fb      	strb	r3, [r7, #27]
 80046f6:	e004      	b.n	8004702 <UART_SetConfig+0x282>
 80046f8:	2310      	movs	r3, #16
 80046fa:	76fb      	strb	r3, [r7, #27]
 80046fc:	e001      	b.n	8004702 <UART_SetConfig+0x282>
 80046fe:	2310      	movs	r3, #16
 8004700:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <UART_SetConfig+0x2e4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	f040 8087 	bne.w	800481c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800470e:	7efb      	ldrb	r3, [r7, #27]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d837      	bhi.n	8004784 <UART_SetConfig+0x304>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0x29c>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004741 	.word	0x08004741
 8004720:	08004785 	.word	0x08004785
 8004724:	08004749 	.word	0x08004749
 8004728:	08004785 	.word	0x08004785
 800472c:	0800474f 	.word	0x0800474f
 8004730:	08004785 	.word	0x08004785
 8004734:	08004785 	.word	0x08004785
 8004738:	08004785 	.word	0x08004785
 800473c:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004740:	f7fe fdb8 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004744:	6178      	str	r0, [r7, #20]
        break;
 8004746:	e022      	b.n	800478e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <UART_SetConfig+0x300>)
 800474a:	617b      	str	r3, [r7, #20]
        break;
 800474c:	e01f      	b.n	800478e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fd19 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8004752:	6178      	str	r0, [r7, #20]
        break;
 8004754:	e01b      	b.n	800478e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	617b      	str	r3, [r7, #20]
        break;
 800475c:	e017      	b.n	800478e <UART_SetConfig+0x30e>
 800475e:	bf00      	nop
 8004760:	efff69f3 	.word	0xefff69f3
 8004764:	40008000 	.word	0x40008000
 8004768:	40013800 	.word	0x40013800
 800476c:	40021000 	.word	0x40021000
 8004770:	40004400 	.word	0x40004400
 8004774:	40004800 	.word	0x40004800
 8004778:	40004c00 	.word	0x40004c00
 800477c:	40005000 	.word	0x40005000
 8004780:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	76bb      	strb	r3, [r7, #26]
        break;
 800478c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80f1 	beq.w	8004978 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d305      	bcc.n	80047b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d902      	bls.n	80047b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	76bb      	strb	r3, [r7, #26]
 80047b6:	e0df      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	020b      	lsls	r3, r1, #8
 80047ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047ce:	0202      	lsls	r2, r0, #8
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	6849      	ldr	r1, [r1, #4]
 80047d4:	0849      	lsrs	r1, r1, #1
 80047d6:	4608      	mov	r0, r1
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	1814      	adds	r4, r2, r0
 80047de:	eb43 0501 	adc.w	r5, r3, r1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	f7fb fcea 	bl	80001c8 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4613      	mov	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004802:	d308      	bcc.n	8004816 <UART_SetConfig+0x396>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480a:	d204      	bcs.n	8004816 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e0b0      	b.n	8004978 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	76bb      	strb	r3, [r7, #26]
 800481a:	e0ad      	b.n	8004978 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d15c      	bne.n	80048e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004826:	7efb      	ldrb	r3, [r7, #27]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d828      	bhi.n	800487e <UART_SetConfig+0x3fe>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x3b4>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
 8004840:	0800487f 	.word	0x0800487f
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800487f 	.word	0x0800487f
 800484c:	0800487f 	.word	0x0800487f
 8004850:	0800487f 	.word	0x0800487f
 8004854:	08004877 	.word	0x08004877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7fe fd2c 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 800485c:	6178      	str	r0, [r7, #20]
        break;
 800485e:	e013      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe fd3e 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 8004864:	6178      	str	r0, [r7, #20]
        break;
 8004866:	e00f      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004868:	4b49      	ldr	r3, [pc, #292]	; (8004990 <UART_SetConfig+0x510>)
 800486a:	617b      	str	r3, [r7, #20]
        break;
 800486c:	e00c      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486e:	f7fe fc89 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8004872:	6178      	str	r0, [r7, #20]
        break;
 8004874:	e008      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	617b      	str	r3, [r7, #20]
        break;
 800487c:	e004      	b.n	8004888 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	76bb      	strb	r3, [r7, #26]
        break;
 8004886:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d074      	beq.n	8004978 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b0f      	cmp	r3, #15
 80048aa:	d916      	bls.n	80048da <UART_SetConfig+0x45a>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d212      	bcs.n	80048da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f023 030f 	bic.w	r3, r3, #15
 80048bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	89fa      	ldrh	r2, [r7, #14]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	e04e      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	76bb      	strb	r3, [r7, #26]
 80048de:	e04b      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048e0:	7efb      	ldrb	r3, [r7, #27]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d827      	bhi.n	8004936 <UART_SetConfig+0x4b6>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x46c>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fcd0 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004914:	6178      	str	r0, [r7, #20]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fce2 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 800491c:	6178      	str	r0, [r7, #20]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <UART_SetConfig+0x510>)
 8004922:	617b      	str	r3, [r7, #20]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fc2d 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800492a:	6178      	str	r0, [r7, #20]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	617b      	str	r3, [r7, #20]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	76bb      	strb	r3, [r7, #26]
        break;
 800493e:	bf00      	nop
    }

    if (pclk != 0U)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085a      	lsrs	r2, r3, #1
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	b29b      	uxth	r3, r3
 800495a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d908      	bls.n	8004974 <UART_SetConfig+0x4f4>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d204      	bcs.n	8004974 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	e001      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004984:	7ebb      	ldrb	r3, [r7, #26]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bdb0      	pop	{r4, r5, r7, pc}
 800498e:	bf00      	nop
 8004990:	00f42400 	.word	0x00f42400

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc fa14 	bl	8000f14 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10e      	bne.n	8004b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f82d 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e023      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d10e      	bne.n	8004b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f817 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00d      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	e05e      	b.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d05a      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7fc f9c6 	bl	8000f14 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11b      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ba8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e043      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02c      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d124      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00f      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d091      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4d0d      	ldr	r5, [pc, #52]	; (8004c9c <__libc_init_array+0x38>)
 8004c68:	4c0d      	ldr	r4, [pc, #52]	; (8004ca0 <__libc_init_array+0x3c>)
 8004c6a:	1b64      	subs	r4, r4, r5
 8004c6c:	10a4      	asrs	r4, r4, #2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	4d0b      	ldr	r5, [pc, #44]	; (8004ca4 <__libc_init_array+0x40>)
 8004c76:	4c0c      	ldr	r4, [pc, #48]	; (8004ca8 <__libc_init_array+0x44>)
 8004c78:	f000 f820 	bl	8004cbc <_init>
 8004c7c:	1b64      	subs	r4, r4, r5
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	2600      	movs	r6, #0
 8004c82:	42a6      	cmp	r6, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8c:	4798      	blx	r3
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c96:	4798      	blx	r3
 8004c98:	3601      	adds	r6, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	08004d24 	.word	0x08004d24
 8004ca0:	08004d24 	.word	0x08004d24
 8004ca4:	08004d24 	.word	0x08004d24
 8004ca8:	08004d28 	.word	0x08004d28

08004cac <memset>:
 8004cac:	4402      	add	r2, r0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <memset+0xa>
 8004cb4:	4770      	bx	lr
 8004cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cba:	e7f9      	b.n	8004cb0 <memset+0x4>

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
