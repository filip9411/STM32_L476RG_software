
Optical_power_managment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004234  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08004420  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004420  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1cc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020c2  00000000  00000000  0002f208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  000312d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000276e8  00000000  00000000  00032c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbcb  00000000  00000000  0005a310  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f852d  00000000  00000000  00065edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  0015e484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043a4 	.word	0x080043a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043a4 	.word	0x080043a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004ec:	4a2f      	ldr	r2, [pc, #188]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800052a:	2200      	movs	r2, #0
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000530:	2200      	movs	r2, #0
 8000532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054a:	4817      	ldr	r0, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800054c:	f000 fd78 	bl	8001040 <HAL_ADC_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000556:	f000 f9bc 	bl	80008d2 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	4619      	mov	r1, r3
 8000564:	4810      	ldr	r0, [pc, #64]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000566:	f001 fad3 	bl	8001b10 <HAL_ADCEx_MultiModeConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000570:	f000 f9af 	bl	80008d2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_ADC1_Init+0xe8>)
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000578:	2306      	movs	r3, #6
 800057a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000580:	237f      	movs	r3, #127	; 0x7f
 8000582:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000584:	2304      	movs	r3, #4
 8000586:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000592:	f000 fea9 	bl	80012e8 <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800059c:	f000 f999 	bl	80008d2 <Error_Handler>
  }

}
 80005a0:	bf00      	nop
 80005a2:	3728      	adds	r7, #40	; 0x28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000028 	.word	0x20000028
 80005ac:	50040000 	.word	0x50040000
 80005b0:	04300002 	.word	0x04300002

080005b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a2a      	ldr	r2, [pc, #168]	; (800067c <HAL_ADC_MspInit+0xc8>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d14e      	bne.n	8000674 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <HAL_ADC_MspInit+0xcc>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a29      	ldr	r2, [pc, #164]	; (8000680 <HAL_ADC_MspInit+0xcc>)
 80005dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <HAL_ADC_MspInit+0xcc>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <HAL_ADC_MspInit+0xcc>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <HAL_ADC_MspInit+0xcc>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <HAL_ADC_MspInit+0xcc>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800060a:	230b      	movs	r3, #11
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <HAL_ADC_MspInit+0xd0>)
 800061a:	f001 fd9f 	bl	800215c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_ADC_MspInit+0xd8>)
 8000622:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 800063e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000642:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 800065a:	f001 fc17 	bl	8001e8c <HAL_DMA_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000664:	f000 f935 	bl	80008d2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 800066c:	64da      	str	r2, [r3, #76]	; 0x4c
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_ADC_MspInit+0xd4>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	50040000 	.word	0x50040000
 8000680:	40021000 	.word	0x40021000
 8000684:	48000800 	.word	0x48000800
 8000688:	2000008c 	.word	0x2000008c
 800068c:	40020008 	.word	0x40020008

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_DMA_Init+0x38>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <MX_DMA_Init+0x38>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6493      	str	r3, [r2, #72]	; 0x48
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_DMA_Init+0x38>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	200b      	movs	r0, #11
 80006b4:	f001 fbb3 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006b8:	200b      	movs	r0, #11
 80006ba:	f001 fbcc 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f001 feaf 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_GPIO_Init+0xcc>)
 8000764:	f001 fcfa 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000768:	2320      	movs	r3, #32
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f001 fceb 	bl	800215c <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	10210000 	.word	0x10210000
 8000798:	48000800 	.word	0x48000800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fa46 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f80b 	bl	80007be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff ff90 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f7ff ff70 	bl	8000690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007b0:	f000 f952 	bl	8000a58 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007b4:	f7ff fe88 	bl	80004c8 <MX_ADC1_Init>
  MX_UART4_Init();
 80007b8:	f000 f91e 	bl	80009f8 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <main+0x20>

080007be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b0b8      	sub	sp, #224	; 0xe0
 80007c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c8:	2244      	movs	r2, #68	; 0x44
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fde1 	bl	8004394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2288      	movs	r2, #136	; 0x88
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fdd3 	bl	8004394 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000814:	230a      	movs	r3, #10
 8000816:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081a:	2307      	movs	r3, #7
 800081c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000830:	4618      	mov	r0, r3
 8000832:	f001 feb7 	bl	80025a4 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800083c:	f000 f849 	bl	80008d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2303      	movs	r3, #3
 8000848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000862:	2104      	movs	r1, #4
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fa83 	bl	8002d70 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000870:	f000 f82f 	bl	80008d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000874:	f244 030a 	movw	r3, #16394	; 0x400a
 8000878:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000882:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000886:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000894:	2307      	movs	r3, #7
 8000896:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008a4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fc65 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008b4:	f000 f80d 	bl	80008d2 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008bc:	f001 fe1c 	bl	80024f8 <HAL_PWREx_ControlVoltageScaling>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80008c6:	f000 f804 	bl	80008d2 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	37e0      	adds	r7, #224	; 0xe0
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x6>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f9ba 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <DMA1_Channel1_IRQHandler+0x10>)
 800097e:	f001 fb3d 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000008c 	.word	0x2000008c

0800098c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <SystemInit+0x64>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <SystemInit+0x64>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <SystemInit+0x68>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <SystemInit+0x68>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <SystemInit+0x68>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <SystemInit+0x68>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <SystemInit+0x68>)
 80009b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <SystemInit+0x68>)
 80009c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <SystemInit+0x68>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <SystemInit+0x68>)
 80009d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <SystemInit+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SystemInit+0x64>)
 80009de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009e2:	609a      	str	r2, [r3, #8]
#endif
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	40021000 	.word	0x40021000

080009f8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_UART4_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_UART4_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_UART4_Init+0x58>)
 8000a3c:	f003 f84c 	bl	8003ad8 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a46:	f7ff ff44 	bl	80008d2 <Error_Handler>
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000d4 	.word	0x200000d4
 8000a54:	40004c00 	.word	0x40004c00

08000a58 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_USART2_UART_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a9c:	f003 f81c 	bl	8003ad8 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f7ff ff14 	bl	80008d2 <Error_Handler>
  }

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000154 	.word	0x20000154
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <HAL_UART_MspInit+0x114>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d146      	bne.n	8000b68 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ada:	4b3d      	ldr	r3, [pc, #244]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a3c      	ldr	r2, [pc, #240]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4a36      	ldr	r2, [pc, #216]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a30      	ldr	r2, [pc, #192]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b32:	2308      	movs	r3, #8
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f001 fb0c 	bl	800215c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b56:	2308      	movs	r3, #8
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <HAL_UART_MspInit+0x11c>)
 8000b62:	f001 fafb 	bl	800215c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b66:	e02d      	b.n	8000bc4 <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <HAL_UART_MspInit+0x120>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d128      	bne.n	8000bc4 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x118>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f001 facc 	bl	800215c <HAL_GPIO_Init>
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004c00 	.word	0x40004c00
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	40004400 	.word	0x40004400

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be0:	f7ff fed4 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000be4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000be6:	e003      	b.n	8000bf0 <LoopCopyDataInit>

08000be8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bee:	3104      	adds	r1, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bf8:	d3f6      	bcc.n	8000be8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bfc:	e002      	b.n	8000c04 <LoopFillZerobss>

08000bfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c00:	f842 3b04 	str.w	r3, [r2], #4

08000c04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <LoopForever+0x16>)
	cmp	r2, r3
 8000c06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c08:	d3f9      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f003 fb9f 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fdc5 	bl	800079c <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c18:	08004414 	.word	0x08004414
	ldr	r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c28:	200001d8 	.word	0x200001d8

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_Init+0x3c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_Init+0x3c>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c46:	2003      	movs	r0, #3
 8000c48:	f001 f8de 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f80f 	bl	8000c70 <HAL_InitTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	e001      	b.n	8000c62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5e:	f7ff fe3d 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d023      	beq.n	8000ccc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_InitTick+0x70>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 f8e9 	bl	8001e72 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10f      	bne.n	8000cc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d809      	bhi.n	8000cc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f001 f8b3 	bl	8001e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_InitTick+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e001      	b.n	8000cd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200001d4 	.word	0x200001d4

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200001d4 	.word	0x200001d4

08000d28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	609a      	str	r2, [r3, #8]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3360      	adds	r3, #96	; 0x60
 8000da2:	461a      	mov	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LL_ADC_SetOffset+0x44>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dc8:	bf00      	nop
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	03fff000 	.word	0x03fff000

08000dd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3360      	adds	r3, #96	; 0x60
 8000de6:	461a      	mov	r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3360      	adds	r3, #96	; 0x60
 8000e14:	461a      	mov	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b087      	sub	sp, #28
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3330      	adds	r3, #48	; 0x30
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	4413      	add	r3, r2
 8000e58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	211f      	movs	r1, #31
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0e9b      	lsrs	r3, r3, #26
 8000e72:	f003 011f 	and.w	r1, r3, #31
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	f003 031f 	and.w	r3, r3, #31
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e86:	bf00      	nop
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b087      	sub	sp, #28
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3314      	adds	r3, #20
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	0e5b      	lsrs	r3, r3, #25
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	0d1b      	lsrs	r3, r3, #20
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	2107      	movs	r1, #7
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	0d1b      	lsrs	r3, r3, #20
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000edc:	bf00      	nop
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0318 	and.w	r3, r3, #24
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f0c:	40d9      	lsrs	r1, r3
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	400b      	ands	r3, r1
 8000f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f16:	431a      	orrs	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0007ffff 	.word	0x0007ffff

08000f30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6093      	str	r3, [r2, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f68:	d101      	bne.n	8000f6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fb8:	d101      	bne.n	8000fbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <LL_ADC_IsEnabled+0x18>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <LL_ADC_IsEnabled+0x1a>
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	2b04      	cmp	r3, #4
 8001004:	d101      	bne.n	800100a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b08      	cmp	r3, #8
 800102a:	d101      	bne.n	8001030 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e134      	b.n	80012c4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff faa3 	bl	80005b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff67 	bl	8000f54 <LL_ADC_IsDeepPowerDownEnabled>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff4d 	bl	8000f30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff82 	bl	8000fa4 <LL_ADC_IsInternalRegulatorEnabled>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d113      	bne.n	80010ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff66 	bl	8000f7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010b0:	4b86      	ldr	r3, [pc, #536]	; (80012cc <HAL_ADC_Init+0x28c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	4a86      	ldr	r2, [pc, #536]	; (80012d0 <HAL_ADC_Init+0x290>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff66 	bl	8000fa4 <LL_ADC_IsInternalRegulatorEnabled>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	f043 0210 	orr.w	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff77 	bl	8000ff2 <LL_ADC_REG_IsConversionOngoing>
 8001104:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 80cf 	bne.w	80012b2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 80cb 	bne.w	80012b2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001124:	f043 0202 	orr.w	r2, r3, #2
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff4b 	bl	8000fcc <LL_ADC_IsEnabled>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d115      	bne.n	8001168 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800113c:	4865      	ldr	r0, [pc, #404]	; (80012d4 <HAL_ADC_Init+0x294>)
 800113e:	f7ff ff45 	bl	8000fcc <LL_ADC_IsEnabled>
 8001142:	4604      	mov	r4, r0
 8001144:	4864      	ldr	r0, [pc, #400]	; (80012d8 <HAL_ADC_Init+0x298>)
 8001146:	f7ff ff41 	bl	8000fcc <LL_ADC_IsEnabled>
 800114a:	4603      	mov	r3, r0
 800114c:	431c      	orrs	r4, r3
 800114e:	4863      	ldr	r0, [pc, #396]	; (80012dc <HAL_ADC_Init+0x29c>)
 8001150:	f7ff ff3c 	bl	8000fcc <LL_ADC_IsEnabled>
 8001154:	4603      	mov	r3, r0
 8001156:	4323      	orrs	r3, r4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4619      	mov	r1, r3
 8001162:	485f      	ldr	r0, [pc, #380]	; (80012e0 <HAL_ADC_Init+0x2a0>)
 8001164:	f7ff fde0 	bl	8000d28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7e5b      	ldrb	r3, [r3, #25]
 800116c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001172:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001178:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800117e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001186:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d106      	bne.n	80011a4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	3b01      	subs	r3, #1
 800119c:	045b      	lsls	r3, r3, #17
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d009      	beq.n	80011c0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_ADC_Init+0x2a4>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	430b      	orrs	r3, r1
 80011d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff0a 	bl	8000ff2 <LL_ADC_REG_IsConversionOngoing>
 80011de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff17 	bl	8001018 <LL_ADC_INJ_IsConversionOngoing>
 80011ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d13d      	bne.n	800126e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d13a      	bne.n	800126e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001204:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	69b9      	ldr	r1, [r7, #24]
 800121e:	430b      	orrs	r3, r1
 8001220:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001228:	2b01      	cmp	r3, #1
 800122a:	d118      	bne.n	800125e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001242:	4311      	orrs	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001248:	4311      	orrs	r1, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800124e:	430a      	orrs	r2, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	e007      	b.n	800126e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10c      	bne.n	8001290 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f023 010f 	bic.w	r1, r3, #15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
 800128e:	e007      	b.n	80012a0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 020f 	bic.w	r2, r2, #15
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	f023 0303 	bic.w	r3, r3, #3
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	655a      	str	r2, [r3, #84]	; 0x54
 80012b0:	e007      	b.n	80012c2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b6:	f043 0210 	orr.w	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	053e2d63 	.word	0x053e2d63
 80012d4:	50040000 	.word	0x50040000
 80012d8:	50040100 	.word	0x50040100
 80012dc:	50040200 	.word	0x50040200
 80012e0:	50040300 	.word	0x50040300
 80012e4:	fff0c007 	.word	0xfff0c007

080012e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0b6      	sub	sp, #216	; 0xd8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_ConfigChannel+0x22>
 8001306:	2302      	movs	r3, #2
 8001308:	e3c6      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x7b0>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe6b 	bl	8000ff2 <LL_ADC_REG_IsConversionOngoing>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 83a7 	bne.w	8001a72 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d824      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	3b02      	subs	r3, #2
 8001332:	2b03      	cmp	r3, #3
 8001334:	d81b      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x86>
 8001336:	a201      	add	r2, pc, #4	; (adr r2, 800133c <HAL_ADC_ConfigChannel+0x54>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001355 	.word	0x08001355
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001365 	.word	0x08001365
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	220c      	movs	r2, #12
 8001350:	605a      	str	r2, [r3, #4]
          break;
 8001352:	e011      	b.n	8001378 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2212      	movs	r2, #18
 8001358:	605a      	str	r2, [r3, #4]
          break;
 800135a:	e00d      	b.n	8001378 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2218      	movs	r2, #24
 8001360:	605a      	str	r2, [r3, #4]
          break;
 8001362:	e009      	b.n	8001378 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	605a      	str	r2, [r3, #4]
          break;
 800136c:	e004      	b.n	8001378 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2206      	movs	r2, #6
 8001372:	605a      	str	r2, [r3, #4]
          break;
 8001374:	e000      	b.n	8001378 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001376:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	f7ff fd58 	bl	8000e3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe2f 	bl	8000ff2 <LL_ADC_REG_IsConversionOngoing>
 8001394:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe3b 	bl	8001018 <LL_ADC_INJ_IsConversionOngoing>
 80013a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 81a6 	bne.w	80016fc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 81a1 	bne.w	80016fc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f7ff fd63 	bl	8000e92 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d00a      	beq.n	8001404 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6919      	ldr	r1, [r3, #16]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013fe:	f7ff fcc7 	bl	8000d90 <LL_ADC_SetOffset>
 8001402:	e17b      	b.n	80016fc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fce4 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10a      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x148>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fcd9 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	0e9b      	lsrs	r3, r3, #26
 800142a:	f003 021f 	and.w	r2, r3, #31
 800142e:	e01e      	b.n	800146e <HAL_ADC_ConfigChannel+0x186>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fcce 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800144e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800145e:	2320      	movs	r3, #32
 8001460:	e004      	b.n	800146c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x19e>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0e9b      	lsrs	r3, r3, #26
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	e018      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1d0>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800149a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800149e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80014a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80014aa:	2320      	movs	r3, #32
 80014ac:	e004      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80014ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d106      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc9d 	bl	8000e04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2101      	movs	r1, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fc81 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10a      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x20e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc76 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	e01e      	b.n	8001534 <HAL_ADC_ConfigChannel+0x24c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fc6b 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800151c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001524:	2320      	movs	r3, #32
 8001526:	e004      	b.n	8001532 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_ADC_ConfigChannel+0x264>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0e9b      	lsrs	r3, r3, #26
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	e018      	b.n	800157e <HAL_ADC_ConfigChannel+0x296>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001570:	2320      	movs	r3, #32
 8001572:	e004      	b.n	800157e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800157e:	429a      	cmp	r2, r3
 8001580:	d106      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	2101      	movs	r1, #1
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fc3a 	bl	8000e04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2102      	movs	r1, #2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc1e 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x2d4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2102      	movs	r1, #2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fc13 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	0e9b      	lsrs	r3, r3, #26
 80015b6:	f003 021f 	and.w	r2, r3, #31
 80015ba:	e01e      	b.n	80015fa <HAL_ADC_ConfigChannel+0x312>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2102      	movs	r1, #2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fc08 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80015da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80015e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80015ea:	2320      	movs	r3, #32
 80015ec:	e004      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80015ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001602:	2b00      	cmp	r3, #0
 8001604:	d105      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x32a>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0e9b      	lsrs	r3, r3, #26
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	e016      	b.n	8001640 <HAL_ADC_ConfigChannel+0x358>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800162a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001632:	2320      	movs	r3, #32
 8001634:	e004      	b.n	8001640 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fbd9 	bl	8000e04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2103      	movs	r1, #3
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fbbd 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10a      	bne.n	800167e <HAL_ADC_ConfigChannel+0x396>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2103      	movs	r1, #3
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fbb2 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	0e9b      	lsrs	r3, r3, #26
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	e017      	b.n	80016ae <HAL_ADC_ConfigChannel+0x3c6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2103      	movs	r1, #3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fba7 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001698:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800169a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e003      	b.n	80016ac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80016a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x3de>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0e9b      	lsrs	r3, r3, #26
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	e011      	b.n	80016ea <HAL_ADC_ConfigChannel+0x402>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80016d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80016d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80016de:	2320      	movs	r3, #32
 80016e0:	e003      	b.n	80016ea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80016e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d106      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	2103      	movs	r1, #3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fb84 	bl	8000e04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fc63 	bl	8000fcc <LL_ADC_IsEnabled>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	f040 813f 	bne.w	800198c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	f7ff fbe4 	bl	8000ee8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a8e      	ldr	r2, [pc, #568]	; (8001960 <HAL_ADC_ConfigChannel+0x678>)
 8001726:	4293      	cmp	r3, r2
 8001728:	f040 8130 	bne.w	800198c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x46c>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0e9b      	lsrs	r3, r3, #26
 8001742:	3301      	adds	r3, #1
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b09      	cmp	r3, #9
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e019      	b.n	8001788 <HAL_ADC_ConfigChannel+0x4a0>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001764:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800176c:	2320      	movs	r3, #32
 800176e:	e003      	b.n	8001778 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2b09      	cmp	r3, #9
 8001780:	bf94      	ite	ls
 8001782:	2301      	movls	r3, #1
 8001784:	2300      	movhi	r3, #0
 8001786:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001788:	2b00      	cmp	r3, #0
 800178a:	d079      	beq.n	8001880 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x4c0>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	3301      	adds	r3, #1
 80017a0:	069b      	lsls	r3, r3, #26
 80017a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a6:	e015      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x4ec>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80017ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80017c0:	2320      	movs	r3, #32
 80017c2:	e003      	b.n	80017cc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	069b      	lsls	r3, r3, #26
 80017d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x50c>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0e9b      	lsrs	r3, r3, #26
 80017e6:	3301      	adds	r3, #1
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	e017      	b.n	8001824 <HAL_ADC_ConfigChannel+0x53c>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001804:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800180c:	2320      	movs	r3, #32
 800180e:	e003      	b.n	8001818 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	ea42 0103 	orr.w	r1, r2, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10a      	bne.n	800184a <HAL_ADC_ConfigChannel+0x562>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	3301      	adds	r3, #1
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	051b      	lsls	r3, r3, #20
 8001848:	e018      	b.n	800187c <HAL_ADC_ConfigChannel+0x594>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001862:	2320      	movs	r3, #32
 8001864:	e003      	b.n	800186e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800187c:	430b      	orrs	r3, r1
 800187e:	e080      	b.n	8001982 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_ADC_ConfigChannel+0x5b4>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	3301      	adds	r3, #1
 8001894:	069b      	lsls	r3, r3, #26
 8001896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189a:	e015      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x5e0>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e003      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	069b      	lsls	r3, r3, #26
 80018c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x600>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e9b      	lsrs	r3, r3, #26
 80018da:	3301      	adds	r3, #1
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	e017      	b.n	8001918 <HAL_ADC_ConfigChannel+0x630>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	61fb      	str	r3, [r7, #28]
  return result;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	e003      	b.n	800190c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	ea42 0103 	orr.w	r1, r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x65c>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	3301      	adds	r3, #1
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	3b1e      	subs	r3, #30
 800193c:	051b      	lsls	r3, r3, #20
 800193e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001942:	e01d      	b.n	8001980 <HAL_ADC_ConfigChannel+0x698>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	613b      	str	r3, [r7, #16]
  return result;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d103      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e005      	b.n	800196c <HAL_ADC_ConfigChannel+0x684>
 8001960:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f003 021f 	and.w	r2, r3, #31
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	3b1e      	subs	r3, #30
 800197a:	051b      	lsls	r3, r3, #20
 800197c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001980:	430b      	orrs	r3, r1
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff fa83 	bl	8000e92 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d079      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001998:	4842      	ldr	r0, [pc, #264]	; (8001aa4 <HAL_ADC_ConfigChannel+0x7bc>)
 800199a:	f7ff f9eb 	bl	8000d74 <LL_ADC_GetCommonPathInternalCh>
 800199e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <HAL_ADC_ConfigChannel+0x7c0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d12b      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d125      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_ADC_ConfigChannel+0x7c4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x6e4>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a3a      	ldr	r2, [pc, #232]	; (8001ab0 <HAL_ADC_ConfigChannel+0x7c8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d15c      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019d4:	4619      	mov	r1, r3
 80019d6:	4833      	ldr	r0, [pc, #204]	; (8001aa4 <HAL_ADC_ConfigChannel+0x7bc>)
 80019d8:	f7ff f9b9 	bl	8000d4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_ADC_ConfigChannel+0x7cc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_ADC_ConfigChannel+0x7d0>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099a      	lsrs	r2, r3, #6
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a02:	e040      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <HAL_ADC_ConfigChannel+0x7d4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d118      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x758>
 8001a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d112      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a23      	ldr	r2, [pc, #140]	; (8001aac <HAL_ADC_ConfigChannel+0x7c4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x746>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12d      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	4619      	mov	r1, r3
 8001a38:	481a      	ldr	r0, [pc, #104]	; (8001aa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001a3a:	f7ff f988 	bl	8000d4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a3e:	e024      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d120      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11a      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_ADC_ConfigChannel+0x7c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d115      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001a6c:	f7ff f96f 	bl	8000d4e <LL_ADC_SetCommonPathInternalCh>
 8001a70:	e00c      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a86:	bf00      	nop
 8001a88:	e000      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a8a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a94:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	37d8      	adds	r7, #216	; 0xd8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	80080000 	.word	0x80080000
 8001aa4:	50040300 	.word	0x50040300
 8001aa8:	c7520000 	.word	0xc7520000
 8001aac:	50040000 	.word	0x50040000
 8001ab0:	50040200 	.word	0x50040200
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	053e2d63 	.word	0x053e2d63
 8001abc:	cb840000 	.word	0xcb840000
 8001ac0:	80000001 	.word	0x80000001

08001ac4 <LL_ADC_IsEnabled>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <LL_ADC_IsEnabled+0x18>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <LL_ADC_IsEnabled+0x1a>
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_REG_IsConversionOngoing>:
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d101      	bne.n	8001b02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b09f      	sub	sp, #124	; 0x7c
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e08f      	b.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	e001      	b.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10b      	bne.n	8001b68 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f043 0220 	orr.w	r2, r3, #32
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e072      	b.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ffbd 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 8001b70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffb7 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d154      	bne.n	8001c2c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d151      	bne.n	8001c2c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d02c      	beq.n	8001bee <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ba6:	035b      	lsls	r3, r3, #13
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb0:	4829      	ldr	r0, [pc, #164]	; (8001c58 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001bb2:	f7ff ff87 	bl	8001ac4 <LL_ADC_IsEnabled>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	4828      	ldr	r0, [pc, #160]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001bba:	f7ff ff83 	bl	8001ac4 <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	431c      	orrs	r4, r3
 8001bc2:	4828      	ldr	r0, [pc, #160]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001bc4:	f7ff ff7e 	bl	8001ac4 <LL_ADC_IsEnabled>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4323      	orrs	r3, r4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d137      	bne.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	6811      	ldr	r1, [r2, #0]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	6892      	ldr	r2, [r2, #8]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bec:	e028      	b.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bfa:	4817      	ldr	r0, [pc, #92]	; (8001c58 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001bfc:	f7ff ff62 	bl	8001ac4 <LL_ADC_IsEnabled>
 8001c00:	4604      	mov	r4, r0
 8001c02:	4816      	ldr	r0, [pc, #88]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001c04:	f7ff ff5e 	bl	8001ac4 <LL_ADC_IsEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	431c      	orrs	r4, r3
 8001c0c:	4815      	ldr	r0, [pc, #84]	; (8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c0e:	f7ff ff59 	bl	8001ac4 <LL_ADC_IsEnabled>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4323      	orrs	r3, r4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d112      	bne.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c22:	f023 030f 	bic.w	r3, r3, #15
 8001c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c2a:	e009      	b.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0220 	orr.w	r2, r3, #32
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c3e:	e000      	b.n	8001c42 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	377c      	adds	r7, #124	; 0x7c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	50040000 	.word	0x50040000
 8001c5c:	50040100 	.word	0x50040100
 8001c60:	50040300 	.word	0x50040300
 8001c64:	50040200 	.word	0x50040200

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff3e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e098      	b.n	8001fd0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_DMA_Init+0x150>)
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d80f      	bhi.n	8001eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <HAL_DMA_Init+0x154>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_DMA_Init+0x158>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	009a      	lsls	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_DMA_Init+0x15c>)
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec8:	e00e      	b.n	8001ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_DMA_Init+0x160>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_DMA_Init+0x158>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a42      	ldr	r2, [pc, #264]	; (8001ff0 <HAL_DMA_Init+0x164>)
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f42:	d039      	beq.n	8001fb8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <HAL_DMA_Init+0x15c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d11a      	bne.n	8001f84 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_DMA_Init+0x168>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f003 031c 	and.w	r3, r3, #28
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4924      	ldr	r1, [pc, #144]	; (8001ff4 <HAL_DMA_Init+0x168>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_DMA_Init+0x168>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f003 031c 	and.w	r3, r3, #28
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	491d      	ldr	r1, [pc, #116]	; (8001ff4 <HAL_DMA_Init+0x168>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
 8001f82:	e019      	b.n	8001fb8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f84:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_DMA_Init+0x16c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f003 031c 	and.w	r3, r3, #28
 8001f90:	210f      	movs	r1, #15
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	4917      	ldr	r1, [pc, #92]	; (8001ff8 <HAL_DMA_Init+0x16c>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_DMA_Init+0x16c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 031c 	and.w	r3, r3, #28
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	4911      	ldr	r1, [pc, #68]	; (8001ff8 <HAL_DMA_Init+0x16c>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40020407 	.word	0x40020407
 8001fe0:	bffdfff8 	.word	0xbffdfff8
 8001fe4:	cccccccd 	.word	0xcccccccd
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	bffdfbf8 	.word	0xbffdfbf8
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	400200a8 	.word	0x400200a8
 8001ff8:	400204a8 	.word	0x400204a8

08001ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f003 031c 	and.w	r3, r3, #28
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d026      	beq.n	8002076 <HAL_DMA_IRQHandler+0x7a>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d021      	beq.n	8002076 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d107      	bne.n	8002050 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f003 021c 	and.w	r2, r3, #28
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2104      	movs	r1, #4
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	2b00      	cmp	r3, #0
 800206a:	d071      	beq.n	8002150 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002074:	e06c      	b.n	8002150 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 031c 	and.w	r3, r3, #28
 800207e:	2202      	movs	r2, #2
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02e      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xec>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d029      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10b      	bne.n	80020ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 020a 	bic.w	r2, r2, #10
 80020b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f003 021c 	and.w	r2, r3, #28
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2102      	movs	r1, #2
 80020c8:	fa01 f202 	lsl.w	r2, r1, r2
 80020cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d038      	beq.n	8002150 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020e6:	e033      	b.n	8002150 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f003 031c 	and.w	r3, r3, #28
 80020f0:	2208      	movs	r2, #8
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d02a      	beq.n	8002152 <HAL_DMA_IRQHandler+0x156>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d025      	beq.n	8002152 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 020e 	bic.w	r2, r2, #14
 8002114:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f003 021c 	and.w	r2, r3, #28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002150:	bf00      	nop
 8002152:	bf00      	nop
}
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	e17f      	b.n	800246c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8171 	beq.w	8002466 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d00b      	beq.n	80021a4 <HAL_GPIO_Init+0x48>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002198:	2b11      	cmp	r3, #17
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b12      	cmp	r3, #18
 80021a2:	d130      	bne.n	8002206 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021da:	2201      	movs	r2, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0201 	and.w	r2, r3, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b03      	cmp	r3, #3
 8002210:	d118      	bne.n	8002244 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x128>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	6939      	ldr	r1, [r7, #16]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80ac 	beq.w	8002466 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_GPIO_Init+0x32c>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4a5d      	ldr	r2, [pc, #372]	; (8002488 <HAL_GPIO_Init+0x32c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6613      	str	r3, [r2, #96]	; 0x60
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_GPIO_Init+0x32c>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002326:	4a59      	ldr	r2, [pc, #356]	; (800248c <HAL_GPIO_Init+0x330>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	220f      	movs	r2, #15
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002350:	d025      	beq.n	800239e <HAL_GPIO_Init+0x242>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <HAL_GPIO_Init+0x23e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x23a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x33c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x236>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_GPIO_Init+0x340>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x232>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_GPIO_Init+0x344>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x22e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x348>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x22a>
 8002382:	2306      	movs	r3, #6
 8002384:	e00c      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 8002386:	2307      	movs	r3, #7
 8002388:	e00a      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 800238a:	2305      	movs	r3, #5
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 800238e:	2304      	movs	r3, #4
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x244>
 800239e:	2300      	movs	r3, #0
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b0:	4936      	ldr	r1, [pc, #216]	; (800248c <HAL_GPIO_Init+0x330>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae78 	bne.w	800216c <HAL_GPIO_Init+0x10>
  }
}
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000
 800248c:	40010000 	.word	0x40010000
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800
 8002498:	48000c00 	.word	0x48000c00
 800249c:	48001000 	.word	0x48001000
 80024a0:	48001400 	.word	0x48001400
 80024a4:	48001800 	.word	0x48001800
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40007000 	.word	0x40007000

080024f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002506:	d130      	bne.n	800256a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	d038      	beq.n	8002588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2232      	movs	r2, #50	; 0x32
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0c9b      	lsrs	r3, r3, #18
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800253c:	e002      	b.n	8002544 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3b01      	subs	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d102      	bne.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f2      	bne.n	800253e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002564:	d110      	bne.n	8002588 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e00f      	b.n	800258a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002576:	d007      	beq.n	8002588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002580:	4a05      	ldr	r2, [pc, #20]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002586:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40007000 	.word	0x40007000
 800259c:	20000000 	.word	0x20000000
 80025a0:	431bde83 	.word	0x431bde83

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3d4      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4ba1      	ldr	r3, [pc, #644]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4b9e      	ldr	r3, [pc, #632]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80e4 	beq.w	80027a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	f040 808b 	bne.w	80026fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 8087 	bne.w	80026fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ee:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e3ac      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_RCC_OscConfig+0x7c>
 8002616:	4b89      	ldr	r3, [pc, #548]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261e:	e005      	b.n	800262c <HAL_RCC_OscConfig+0x88>
 8002620:	4b86      	ldr	r3, [pc, #536]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	4293      	cmp	r3, r2
 800262e:	d223      	bcs.n	8002678 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd3f 	bl	80030b8 <RCC_SetFlashLatencyFromMSIRange>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e38d      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002644:	4b7d      	ldr	r3, [pc, #500]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7c      	ldr	r2, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4977      	ldr	r1, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	4972      	ldr	r1, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e025      	b.n	80026c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a6f      	ldr	r2, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b6d      	ldr	r3, [pc, #436]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	496a      	ldr	r1, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002696:	4b69      	ldr	r3, [pc, #420]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	4965      	ldr	r1, [pc, #404]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fcff 	bl	80030b8 <RCC_SetFlashLatencyFromMSIRange>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e34d      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c4:	f000 fc36 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 80026c8:	4601      	mov	r1, r0
 80026ca:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_RCC_OscConfig+0x29c>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa21 f303 	lsr.w	r3, r1, r3
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x2a0>)
 80026e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026e4:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fac1 	bl	8000c70 <HAL_InitTick>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d052      	beq.n	800279e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	e331      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d032      	beq.n	800276a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002704:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a4c      	ldr	r2, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002710:	f7fe fafe 	bl	8000d10 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002718:	f7fe fafa 	bl	8000d10 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e31a      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272a:	4b44      	ldr	r3, [pc, #272]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a40      	ldr	r2, [pc, #256]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b3e      	ldr	r3, [pc, #248]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	493b      	ldr	r1, [pc, #236]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	4936      	ldr	r1, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e01a      	b.n	80027a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800276a:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a33      	ldr	r2, [pc, #204]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002776:	f7fe facb 	bl	8000d10 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800277e:	f7fe fac7 	bl	8000d10 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2e7      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x1da>
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800279e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d074      	beq.n	8002896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x21a>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d10e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d064      	beq.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e2c4      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x24a>
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e01d      	b.n	800282a <HAL_RCC_OscConfig+0x286>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x26e>
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_RCC_OscConfig+0x298>)
 80027fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x298>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x286>
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a06      	ldr	r2, [pc, #24]	; (800283c <HAL_RCC_OscConfig+0x298>)
 8002824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01c      	beq.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fa6d 	bl	8000d10 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002838:	e011      	b.n	800285e <HAL_RCC_OscConfig+0x2ba>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	080043bc 	.word	0x080043bc
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fa60 	bl	8000d10 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e280      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285e:	4baf      	ldr	r3, [pc, #700]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x2a8>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fa50 	bl	8000d10 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fa4c 	bl	8000d10 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e26c      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002886:	4ba5      	ldr	r3, [pc, #660]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x2d0>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d060      	beq.n	8002964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x310>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d119      	bne.n	80028e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d116      	bne.n	80028e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	4b99      	ldr	r3, [pc, #612]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x328>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e249      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b93      	ldr	r3, [pc, #588]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4990      	ldr	r1, [pc, #576]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e0:	e040      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d023      	beq.n	8002932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ea:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a8b      	ldr	r2, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fa0b 	bl	8000d10 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fa07 	bl	8000d10 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e227      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002910:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b7f      	ldr	r3, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	497c      	ldr	r1, [pc, #496]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e018      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a79      	ldr	r2, [pc, #484]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe f9e7 	bl	8000d10 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe f9e3 	bl	8000d10 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e203      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002958:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03c      	beq.n	80029ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 800297a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297e:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe f9c2 	bl	8000d10 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe f9be 	bl	8000d10 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1de      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a2:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <HAL_RCC_OscConfig+0x3ec>
 80029b0:	e01b      	b.n	80029ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe f9a5 	bl	8000d10 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe f9a1 	bl	8000d10 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1c1      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80029de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ef      	bne.n	80029ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a6 	beq.w	8002b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029fc:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a43      	ldr	r2, [pc, #268]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x57c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d118      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x57c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_RCC_OscConfig+0x57c>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe f968 	bl	8000d10 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe f964 	bl	8000d10 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e184      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCC_OscConfig+0x57c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4d8>
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	4a2a      	ldr	r2, [pc, #168]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a7a:	e024      	b.n	8002ac6 <HAL_RCC_OscConfig+0x522>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d110      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x502>
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa4:	e00f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x522>
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002abe:	f023 0304 	bic.w	r3, r3, #4
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe f91f 	bl	8000d10 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe f91b 	bl	8000d10 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e139      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x578>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ed      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x532>
 8002afa:	e01a      	b.n	8002b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe f908 	bl	8000d10 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b02:	e00f      	b.n	8002b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe f904 	bl	8000d10 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d906      	bls.n	8002b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e122      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b24:	4b90      	ldr	r3, [pc, #576]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e8      	bne.n	8002b04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b32:	7ffb      	ldrb	r3, [r7, #31]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b8b      	ldr	r3, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	4a8a      	ldr	r2, [pc, #552]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8108 	beq.w	8002d5e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f040 80d0 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b58:	4b83      	ldr	r3, [pc, #524]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d130      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	3b01      	subs	r3, #1
 8002b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d127      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11f      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b98:	2a07      	cmp	r2, #7
 8002b9a:	bf14      	ite	ne
 8002b9c:	2201      	movne	r2, #1
 8002b9e:	2200      	moveq	r2, #0
 8002ba0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d113      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d06e      	beq.n	8002cac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d069      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bd4:	4b64      	ldr	r3, [pc, #400]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002be0:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b7      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bfc:	f7fe f888 	bl	8000d10 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe f884 	bl	8000d10 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0a4      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c16:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c22:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_RCC_OscConfig+0x7c8>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c50:	0852      	lsrs	r2, r2, #1
 8002c52:	3a01      	subs	r2, #1
 8002c54:	0652      	lsls	r2, r2, #25
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c5c:	0912      	lsrs	r2, r2, #4
 8002c5e:	0452      	lsls	r2, r2, #17
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4941      	ldr	r1, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c68:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3e      	ldr	r2, [pc, #248]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c74:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c80:	f7fe f846 	bl	8000d10 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe f842 	bl	8000d10 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e062      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca6:	e05a      	b.n	8002d5e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e059      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d152      	bne.n	8002d5e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc4:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd0:	f7fe f81e 	bl	8000d10 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe f81a 	bl	8000d10 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e03a      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x734>
 8002cf6:	e032      	b.n	8002d5e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d02d      	beq.n	8002d5a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d1c:	f023 0303 	bic.w	r3, r3, #3
 8002d20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fd ffed 	bl	8000d10 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fd ffe9 	bl	8000d10 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e009      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x7c4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x796>
 8002d58:	e001      	b.n	8002d5e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	f99d808c 	.word	0xf99d808c

08002d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0c8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d910      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4961      	ldr	r1, [pc, #388]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b0      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d04c      	beq.n	8002e5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d121      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e09e      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d115      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e092      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e086      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07e      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 0203 	bic.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	493f      	ldr	r1, [pc, #252]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2a:	f7fd ff71 	bl	8000d10 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e32:	f7fd ff6d 	bl	8000d10 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e066      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 020c 	and.w	r2, r3, #12
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d1eb      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e66:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	492c      	ldr	r1, [pc, #176]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d210      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4924      	ldr	r1, [pc, #144]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e036      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4918      	ldr	r1, [pc, #96]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4910      	ldr	r1, [pc, #64]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee6:	f000 f825 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002eea:	4601      	mov	r1, r0
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	fa21 f303 	lsr.w	r3, r1, r3
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd feb0 	bl	8000c70 <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f14:	7afb      	ldrb	r3, [r7, #11]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	080043bc 	.word	0x080043bc
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d121      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d11e      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f68:	4b33      	ldr	r3, [pc, #204]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f74:	4b30      	ldr	r3, [pc, #192]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e004      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d133      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d002      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0xaa>
 8002fd6:	e005      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fda:	617b      	str	r3, [r7, #20]
      break;
 8002fdc:	e005      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe0:	617b      	str	r3, [r7, #20]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	617b      	str	r3, [r7, #20]
      break;
 8002fe8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	fb02 f203 	mul.w	r2, r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_GetSysClockFreq+0x104>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	0e5b      	lsrs	r3, r3, #25
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800302a:	69bb      	ldr	r3, [r7, #24]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3724      	adds	r7, #36	; 0x24
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40021000 	.word	0x40021000
 800303c:	080043d4 	.word	0x080043d4
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4601      	mov	r1, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	080043cc 	.word	0x080043cc

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003090:	f7ff ffda 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0adb      	lsrs	r3, r3, #11
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	080043cc 	.word	0x080043cc

080030b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d0:	f7ff fa04 	bl	80024dc <HAL_PWREx_GetVoltageRange>
 80030d4:	6178      	str	r0, [r7, #20]
 80030d6:	e014      	b.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6593      	str	r3, [r2, #88]	; 0x58
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f0:	f7ff f9f4 	bl	80024dc <HAL_PWREx_GetVoltageRange>
 80030f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003100:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003108:	d10b      	bne.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d919      	bls.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2ba0      	cmp	r3, #160	; 0xa0
 8003114:	d902      	bls.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003116:	2302      	movs	r3, #2
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e013      	b.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800311c:	2301      	movs	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	e010      	b.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d902      	bls.n	800312e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003128:	2303      	movs	r3, #3
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	e00a      	b.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d102      	bne.n	800313a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003134:	2302      	movs	r3, #2
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	e004      	b.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b70      	cmp	r3, #112	; 0x70
 800313e:	d101      	bne.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 0207 	bic.w	r2, r3, #7
 800314c:	4909      	ldr	r1, [pc, #36]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	40022000 	.word	0x40022000

08003178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003180:	2300      	movs	r3, #0
 8003182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003184:	2300      	movs	r3, #0
 8003186:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03f      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d01c      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a2:	d802      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80031a8:	e01f      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80031aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ae:	d003      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031b4:	d01c      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80031b6:	e018      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031b8:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a84      	ldr	r2, [pc, #528]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c4:	e015      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fab9 	bl	8003744 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3320      	adds	r3, #32
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fba0 	bl	8003924 <RCCEx_PLLSAI2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	74fb      	strb	r3, [r7, #19]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f8:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003206:	4972      	ldr	r1, [pc, #456]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800320e:	e001      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d03f      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d01c      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800322a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800322e:	d802      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003234:	e01f      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323a:	d003      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800323c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003240:	d01c      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003242:	e018      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003244:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a61      	ldr	r2, [pc, #388]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003250:	e015      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3304      	adds	r3, #4
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fa73 	bl	8003744 <RCCEx_PLLSAI1_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003262:	e00c      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3320      	adds	r3, #32
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fb5a 	bl	8003924 <RCCEx_PLLSAI2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003274:	e003      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	74fb      	strb	r3, [r7, #19]
      break;
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800327c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003284:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003292:	494f      	ldr	r1, [pc, #316]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800329a:	e001      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80a0 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6593      	str	r3, [r2, #88]	; 0x58
 80032d4:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3a      	ldr	r2, [pc, #232]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032f0:	f7fd fd0e 	bl	8000d10 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f6:	e009      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fd fd0a 	bl	8000d10 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d902      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	74fb      	strb	r3, [r7, #19]
        break;
 800330a:	e005      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ef      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d15c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800331e:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01f      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d019      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd fcc9 	bl	8000d10 <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003380:	e00b      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd fcc5 	bl	8000d10 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d902      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	74fb      	strb	r3, [r7, #19]
            break;
 8003398:	e006      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ec      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033be:	4904      	ldr	r1, [pc, #16]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	74bb      	strb	r3, [r7, #18]
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033dc:	7c7b      	ldrb	r3, [r7, #17]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4b9e      	ldr	r3, [pc, #632]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	4a9d      	ldr	r2, [pc, #628]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fa:	4b98      	ldr	r3, [pc, #608]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f023 0203 	bic.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	4994      	ldr	r1, [pc, #592]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800341c:	4b8f      	ldr	r3, [pc, #572]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f023 020c 	bic.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	498c      	ldr	r1, [pc, #560]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800343e:	4b87      	ldr	r3, [pc, #540]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4983      	ldr	r1, [pc, #524]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003460:	4b7e      	ldr	r3, [pc, #504]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	497b      	ldr	r1, [pc, #492]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	4972      	ldr	r1, [pc, #456]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	496a      	ldr	r1, [pc, #424]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	4961      	ldr	r1, [pc, #388]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034e8:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f6:	4959      	ldr	r1, [pc, #356]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800350a:	4b54      	ldr	r3, [pc, #336]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	4950      	ldr	r1, [pc, #320]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	4948      	ldr	r1, [pc, #288]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800354e:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	493f      	ldr	r1, [pc, #252]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d028      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357e:	4937      	ldr	r1, [pc, #220]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358e:	d106      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a31      	ldr	r2, [pc, #196]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
 800359c:	e011      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3304      	adds	r3, #4
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f8c8 	bl	8003744 <RCCEx_PLLSAI1_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d028      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	491f      	ldr	r1, [pc, #124]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ec:	d106      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f8:	60d3      	str	r3, [r2, #12]
 80035fa:	e011      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f899 	bl	8003744 <RCCEx_PLLSAI1_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02b      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	4908      	ldr	r1, [pc, #32]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364a:	d109      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a02      	ldr	r2, [pc, #8]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003656:	60d3      	str	r3, [r2, #12]
 8003658:	e014      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f867 	bl	8003744 <RCCEx_PLLSAI1_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02f      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369e:	4928      	ldr	r1, [pc, #160]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ae:	d10d      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	2102      	movs	r1, #2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f844 	bl	8003744 <RCCEx_PLLSAI1_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d014      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	74bb      	strb	r3, [r7, #18]
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3320      	adds	r3, #32
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f921 	bl	8003924 <RCCEx_PLLSAI2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370a:	490d      	ldr	r1, [pc, #52]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372e:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003736:	7cbb      	ldrb	r3, [r7, #18]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003752:	4b73      	ldr	r3, [pc, #460]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800375e:	4b70      	ldr	r3, [pc, #448]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0203 	and.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d10d      	bne.n	800378a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
       ||
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
       ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d044      	beq.n	8003814 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e041      	b.n	8003814 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d00c      	beq.n	80037b2 <RCCEx_PLLSAI1_Config+0x6e>
 8003798:	2b03      	cmp	r3, #3
 800379a:	d013      	beq.n	80037c4 <RCCEx_PLLSAI1_Config+0x80>
 800379c:	2b01      	cmp	r3, #1
 800379e:	d120      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037a0:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11d      	bne.n	80037e8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b0:	e01a      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c2:	e013      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c4:	4b56      	ldr	r3, [pc, #344]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10f      	bne.n	80037f0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037e0:	e006      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      break;
 80037e6:	e004      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	3b01      	subs	r3, #1
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	430b      	orrs	r3, r1
 800380e:	4944      	ldr	r1, [pc, #272]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d17d      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a40      	ldr	r2, [pc, #256]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003820:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003826:	f7fd fa73 	bl	8000d10 <HAL_GetTick>
 800382a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800382c:	e009      	b.n	8003842 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800382e:	f7fd fa6f 	bl	8000d10 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d902      	bls.n	8003842 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	73fb      	strb	r3, [r7, #15]
        break;
 8003840:	e005      	b.n	800384e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ef      	bne.n	800382e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d160      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d111      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800385a:	4b31      	ldr	r3, [pc, #196]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6892      	ldr	r2, [r2, #8]
 800386a:	0211      	lsls	r1, r2, #8
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68d2      	ldr	r2, [r2, #12]
 8003870:	0912      	lsrs	r2, r2, #4
 8003872:	0452      	lsls	r2, r2, #17
 8003874:	430a      	orrs	r2, r1
 8003876:	492a      	ldr	r1, [pc, #168]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	610b      	str	r3, [r1, #16]
 800387c:	e027      	b.n	80038ce <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d112      	bne.n	80038aa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003884:	4b26      	ldr	r3, [pc, #152]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800388c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6892      	ldr	r2, [r2, #8]
 8003894:	0211      	lsls	r1, r2, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6912      	ldr	r2, [r2, #16]
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	3a01      	subs	r2, #1
 800389e:	0552      	lsls	r2, r2, #21
 80038a0:	430a      	orrs	r2, r1
 80038a2:	491f      	ldr	r1, [pc, #124]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	610b      	str	r3, [r1, #16]
 80038a8:	e011      	b.n	80038ce <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	0211      	lsls	r1, r2, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6952      	ldr	r2, [r2, #20]
 80038c0:	0852      	lsrs	r2, r2, #1
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0652      	lsls	r2, r2, #25
 80038c6:	430a      	orrs	r2, r1
 80038c8:	4915      	ldr	r1, [pc, #84]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a13      	ldr	r2, [pc, #76]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd fa19 	bl	8000d10 <HAL_GetTick>
 80038de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e0:	e009      	b.n	80038f6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e2:	f7fd fa15 	bl	8000d10 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d902      	bls.n	80038f6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	73fb      	strb	r3, [r7, #15]
          break;
 80038f4:	e005      	b.n	8003902 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000

08003924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003932:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d10d      	bne.n	800396a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
       ||
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003956:	4b5f      	ldr	r3, [pc, #380]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
       ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d044      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e041      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d00c      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0x6e>
 8003978:	2b03      	cmp	r3, #3
 800397a:	d013      	beq.n	80039a4 <RCCEx_PLLSAI2_Config+0x80>
 800397c:	2b01      	cmp	r3, #1
 800397e:	d120      	bne.n	80039c2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003980:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11d      	bne.n	80039c8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003990:	e01a      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003992:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e013      	b.n	80039cc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039b0:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039c0:	e006      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      break;
 80039c6:	e004      	b.n	80039d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039c8:	bf00      	nop
 80039ca:	e002      	b.n	80039d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039d8:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	430b      	orrs	r3, r1
 80039ee:	4939      	ldr	r1, [pc, #228]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d167      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039fa:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a35      	ldr	r2, [pc, #212]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a06:	f7fd f983 	bl	8000d10 <HAL_GetTick>
 8003a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a0c:	e009      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a0e:	f7fd f97f 	bl	8000d10 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d902      	bls.n	8003a22 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a20:	e005      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ef      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d14a      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d111      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	0211      	lsls	r1, r2, #8
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68d2      	ldr	r2, [r2, #12]
 8003a50:	0912      	lsrs	r2, r2, #4
 8003a52:	0452      	lsls	r2, r2, #17
 8003a54:	430a      	orrs	r2, r1
 8003a56:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	614b      	str	r3, [r1, #20]
 8003a5c:	e011      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6892      	ldr	r2, [r2, #8]
 8003a6e:	0211      	lsls	r1, r2, #8
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6912      	ldr	r2, [r2, #16]
 8003a74:	0852      	lsrs	r2, r2, #1
 8003a76:	3a01      	subs	r2, #1
 8003a78:	0652      	lsls	r2, r2, #25
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	4915      	ldr	r1, [pc, #84]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fd f93f 	bl	8000d10 <HAL_GetTick>
 8003a92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a94:	e009      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a96:	f7fd f93b 	bl	8000d10 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d902      	bls.n	8003aaa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8003aa8:	e005      	b.n	8003ab6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ef      	beq.n	8003a96 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e040      	b.n	8003b6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fc ffdc 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f82c 	bl	8003b74 <UART_SetConfig>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e022      	b.n	8003b6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 faaa 	bl	8004088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fb31 	bl	80041cc <UART_CheckIdleState>
 8003b6a:	4603      	mov	r3, r0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b78:	b088      	sub	sp, #32
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4bac      	ldr	r3, [pc, #688]	; (8003e54 <UART_SetConfig+0x2e0>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4aa2      	ldr	r2, [pc, #648]	; (8003e58 <UART_SetConfig+0x2e4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a99      	ldr	r2, [pc, #612]	; (8003e5c <UART_SetConfig+0x2e8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d121      	bne.n	8003c40 <UART_SetConfig+0xcc>
 8003bfc:	4b98      	ldr	r3, [pc, #608]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d816      	bhi.n	8003c38 <UART_SetConfig+0xc4>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0x9c>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c2d 	.word	0x08003c2d
 8003c18:	08003c27 	.word	0x08003c27
 8003c1c:	08003c33 	.word	0x08003c33
 8003c20:	2301      	movs	r3, #1
 8003c22:	76fb      	strb	r3, [r7, #27]
 8003c24:	e0e8      	b.n	8003df8 <UART_SetConfig+0x284>
 8003c26:	2302      	movs	r3, #2
 8003c28:	76fb      	strb	r3, [r7, #27]
 8003c2a:	e0e5      	b.n	8003df8 <UART_SetConfig+0x284>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	76fb      	strb	r3, [r7, #27]
 8003c30:	e0e2      	b.n	8003df8 <UART_SetConfig+0x284>
 8003c32:	2308      	movs	r3, #8
 8003c34:	76fb      	strb	r3, [r7, #27]
 8003c36:	e0df      	b.n	8003df8 <UART_SetConfig+0x284>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	76fb      	strb	r3, [r7, #27]
 8003c3c:	bf00      	nop
 8003c3e:	e0db      	b.n	8003df8 <UART_SetConfig+0x284>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a87      	ldr	r2, [pc, #540]	; (8003e64 <UART_SetConfig+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d134      	bne.n	8003cb4 <UART_SetConfig+0x140>
 8003c4a:	4b85      	ldr	r3, [pc, #532]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d829      	bhi.n	8003cac <UART_SetConfig+0x138>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0xec>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003ca1 	.word	0x08003ca1
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003c9b 	.word	0x08003c9b
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cad 	.word	0x08003cad
 8003c90:	08003ca7 	.word	0x08003ca7
 8003c94:	2300      	movs	r3, #0
 8003c96:	76fb      	strb	r3, [r7, #27]
 8003c98:	e0ae      	b.n	8003df8 <UART_SetConfig+0x284>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	76fb      	strb	r3, [r7, #27]
 8003c9e:	e0ab      	b.n	8003df8 <UART_SetConfig+0x284>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	76fb      	strb	r3, [r7, #27]
 8003ca4:	e0a8      	b.n	8003df8 <UART_SetConfig+0x284>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	76fb      	strb	r3, [r7, #27]
 8003caa:	e0a5      	b.n	8003df8 <UART_SetConfig+0x284>
 8003cac:	2310      	movs	r3, #16
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	bf00      	nop
 8003cb2:	e0a1      	b.n	8003df8 <UART_SetConfig+0x284>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <UART_SetConfig+0x2f4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d120      	bne.n	8003d00 <UART_SetConfig+0x18c>
 8003cbe:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d00f      	beq.n	8003cec <UART_SetConfig+0x178>
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d802      	bhi.n	8003cd6 <UART_SetConfig+0x162>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <UART_SetConfig+0x16c>
 8003cd4:	e010      	b.n	8003cf8 <UART_SetConfig+0x184>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d005      	beq.n	8003ce6 <UART_SetConfig+0x172>
 8003cda:	2b30      	cmp	r3, #48	; 0x30
 8003cdc:	d009      	beq.n	8003cf2 <UART_SetConfig+0x17e>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x184>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	76fb      	strb	r3, [r7, #27]
 8003ce4:	e088      	b.n	8003df8 <UART_SetConfig+0x284>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	76fb      	strb	r3, [r7, #27]
 8003cea:	e085      	b.n	8003df8 <UART_SetConfig+0x284>
 8003cec:	2304      	movs	r3, #4
 8003cee:	76fb      	strb	r3, [r7, #27]
 8003cf0:	e082      	b.n	8003df8 <UART_SetConfig+0x284>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	76fb      	strb	r3, [r7, #27]
 8003cf6:	e07f      	b.n	8003df8 <UART_SetConfig+0x284>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	76fb      	strb	r3, [r7, #27]
 8003cfc:	bf00      	nop
 8003cfe:	e07b      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a59      	ldr	r2, [pc, #356]	; (8003e6c <UART_SetConfig+0x2f8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d120      	bne.n	8003d4c <UART_SetConfig+0x1d8>
 8003d0a:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d00f      	beq.n	8003d38 <UART_SetConfig+0x1c4>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d802      	bhi.n	8003d22 <UART_SetConfig+0x1ae>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <UART_SetConfig+0x1b8>
 8003d20:	e010      	b.n	8003d44 <UART_SetConfig+0x1d0>
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	d005      	beq.n	8003d32 <UART_SetConfig+0x1be>
 8003d26:	2bc0      	cmp	r3, #192	; 0xc0
 8003d28:	d009      	beq.n	8003d3e <UART_SetConfig+0x1ca>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x1d0>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	76fb      	strb	r3, [r7, #27]
 8003d30:	e062      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d32:	2302      	movs	r3, #2
 8003d34:	76fb      	strb	r3, [r7, #27]
 8003d36:	e05f      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	e05c      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	76fb      	strb	r3, [r7, #27]
 8003d42:	e059      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d44:	2310      	movs	r3, #16
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	bf00      	nop
 8003d4a:	e055      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a47      	ldr	r2, [pc, #284]	; (8003e70 <UART_SetConfig+0x2fc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d124      	bne.n	8003da0 <UART_SetConfig+0x22c>
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d64:	d012      	beq.n	8003d8c <UART_SetConfig+0x218>
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6a:	d802      	bhi.n	8003d72 <UART_SetConfig+0x1fe>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <UART_SetConfig+0x20c>
 8003d70:	e012      	b.n	8003d98 <UART_SetConfig+0x224>
 8003d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d76:	d006      	beq.n	8003d86 <UART_SetConfig+0x212>
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7c:	d009      	beq.n	8003d92 <UART_SetConfig+0x21e>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x224>
 8003d80:	2300      	movs	r3, #0
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e038      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d86:	2302      	movs	r3, #2
 8003d88:	76fb      	strb	r3, [r7, #27]
 8003d8a:	e035      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e032      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d92:	2308      	movs	r3, #8
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e02f      	b.n	8003df8 <UART_SetConfig+0x284>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	bf00      	nop
 8003d9e:	e02b      	b.n	8003df8 <UART_SetConfig+0x284>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <UART_SetConfig+0x2e4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d124      	bne.n	8003df4 <UART_SetConfig+0x280>
 8003daa:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d012      	beq.n	8003de0 <UART_SetConfig+0x26c>
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbe:	d802      	bhi.n	8003dc6 <UART_SetConfig+0x252>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <UART_SetConfig+0x260>
 8003dc4:	e012      	b.n	8003dec <UART_SetConfig+0x278>
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d006      	beq.n	8003dda <UART_SetConfig+0x266>
 8003dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dd0:	d009      	beq.n	8003de6 <UART_SetConfig+0x272>
 8003dd2:	e00b      	b.n	8003dec <UART_SetConfig+0x278>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e00e      	b.n	8003df8 <UART_SetConfig+0x284>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	76fb      	strb	r3, [r7, #27]
 8003dde:	e00b      	b.n	8003df8 <UART_SetConfig+0x284>
 8003de0:	2304      	movs	r3, #4
 8003de2:	76fb      	strb	r3, [r7, #27]
 8003de4:	e008      	b.n	8003df8 <UART_SetConfig+0x284>
 8003de6:	2308      	movs	r3, #8
 8003de8:	76fb      	strb	r3, [r7, #27]
 8003dea:	e005      	b.n	8003df8 <UART_SetConfig+0x284>
 8003dec:	2310      	movs	r3, #16
 8003dee:	76fb      	strb	r3, [r7, #27]
 8003df0:	bf00      	nop
 8003df2:	e001      	b.n	8003df8 <UART_SetConfig+0x284>
 8003df4:	2310      	movs	r3, #16
 8003df6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <UART_SetConfig+0x2e4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	f040 8087 	bne.w	8003f12 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e04:	7efb      	ldrb	r3, [r7, #27]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d836      	bhi.n	8003e78 <UART_SetConfig+0x304>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0x29c>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e79 	.word	0x08003e79
 8003e20:	08003e43 	.word	0x08003e43
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7ff f914 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003e38:	6178      	str	r0, [r7, #20]
        break;
 8003e3a:	e022      	b.n	8003e82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <UART_SetConfig+0x300>)
 8003e3e:	617b      	str	r3, [r7, #20]
        break;
 8003e40:	e01f      	b.n	8003e82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7ff f877 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8003e46:	6178      	str	r0, [r7, #20]
        break;
 8003e48:	e01b      	b.n	8003e82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4e:	617b      	str	r3, [r7, #20]
        break;
 8003e50:	e017      	b.n	8003e82 <UART_SetConfig+0x30e>
 8003e52:	bf00      	nop
 8003e54:	efff69f3 	.word	0xefff69f3
 8003e58:	40008000 	.word	0x40008000
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004800 	.word	0x40004800
 8003e6c:	40004c00 	.word	0x40004c00
 8003e70:	40005000 	.word	0x40005000
 8003e74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	76bb      	strb	r3, [r7, #26]
        break;
 8003e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80f1 	beq.w	800406c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d305      	bcc.n	8003ea6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d902      	bls.n	8003eac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	76bb      	strb	r3, [r7, #26]
 8003eaa:	e0df      	b.n	800406c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	0214      	lsls	r4, r2, #8
 8003ebe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ec2:	020b      	lsls	r3, r1, #8
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6852      	ldr	r2, [r2, #4]
 8003ec8:	0852      	lsrs	r2, r2, #1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	eb13 0b01 	adds.w	fp, r3, r1
 8003ed4:	eb44 0c02 	adc.w	ip, r4, r2
 8003ed8:	4658      	mov	r0, fp
 8003eda:	4661      	mov	r1, ip
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	f7fc f96e 	bl	80001c8 <__aeabi_uldivmod>
 8003eec:	4603      	mov	r3, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef8:	d308      	bcc.n	8003f0c <UART_SetConfig+0x398>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f00:	d204      	bcs.n	8003f0c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	e0af      	b.n	800406c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	76bb      	strb	r3, [r7, #26]
 8003f10:	e0ac      	b.n	800406c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d15b      	bne.n	8003fd4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f1c:	7efb      	ldrb	r3, [r7, #27]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d827      	bhi.n	8003f72 <UART_SetConfig+0x3fe>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x3b4>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f73 	.word	0x08003f73
 8003f38:	08003f63 	.word	0x08003f63
 8003f3c:	08003f73 	.word	0x08003f73
 8003f40:	08003f73 	.word	0x08003f73
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7ff f888 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003f50:	6178      	str	r0, [r7, #20]
        break;
 8003f52:	e013      	b.n	8003f7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7ff f89a 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8003f58:	6178      	str	r0, [r7, #20]
        break;
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b49      	ldr	r3, [pc, #292]	; (8004084 <UART_SetConfig+0x510>)
 8003f5e:	617b      	str	r3, [r7, #20]
        break;
 8003f60:	e00c      	b.n	8003f7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe ffe7 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8003f66:	6178      	str	r0, [r7, #20]
        break;
 8003f68:	e008      	b.n	8003f7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6e:	617b      	str	r3, [r7, #20]
        break;
 8003f70:	e004      	b.n	8003f7c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	76bb      	strb	r3, [r7, #26]
        break;
 8003f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d074      	beq.n	800406c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005a      	lsls	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b0f      	cmp	r3, #15
 8003f9e:	d916      	bls.n	8003fce <UART_SetConfig+0x45a>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d212      	bcs.n	8003fce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	89fb      	ldrh	r3, [r7, #14]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	89fa      	ldrh	r2, [r7, #14]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e04e      	b.n	800406c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	76bb      	strb	r3, [r7, #26]
 8003fd2:	e04b      	b.n	800406c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd4:	7efb      	ldrb	r3, [r7, #27]
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d827      	bhi.n	800402a <UART_SetConfig+0x4b6>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x46c>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7ff f82c 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8004008:	6178      	str	r0, [r7, #20]
        break;
 800400a:	e013      	b.n	8004034 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7ff f83e 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8004010:	6178      	str	r0, [r7, #20]
        break;
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <UART_SetConfig+0x510>)
 8004016:	617b      	str	r3, [r7, #20]
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe ff8b 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 800401e:	6178      	str	r0, [r7, #20]
        break;
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004026:	617b      	str	r3, [r7, #20]
        break;
 8004028:	e004      	b.n	8004034 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	76bb      	strb	r3, [r7, #26]
        break;
 8004032:	bf00      	nop
    }

    if (pclk != 0U)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	085a      	lsrs	r2, r3, #1
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	d908      	bls.n	8004068 <UART_SetConfig+0x4f4>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d204      	bcs.n	8004068 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	e001      	b.n	800406c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004078:	7ebb      	ldrb	r3, [r7, #26]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004084:	00f42400 	.word	0x00f42400

08004088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01a      	beq.n	800419e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d10a      	bne.n	800419e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041da:	f7fc fd99 	bl	8000d10 <HAL_GetTick>
 80041de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d10e      	bne.n	800420c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f82a 	bl	8004256 <UART_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e020      	b.n	800424e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d10e      	bne.n	8004238 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f814 	bl	8004256 <UART_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e00a      	b.n	800424e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004266:	e05d      	b.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d059      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7fc fd4e 	bl	8000d10 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <UART_WaitOnFlagUntilTimeout+0x30>
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11b      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004294:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e042      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02b      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d123      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e00f      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	429a      	cmp	r2, r3
 8004340:	d092      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4e0d      	ldr	r6, [pc, #52]	; (8004384 <__libc_init_array+0x38>)
 8004350:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004352:	1ba4      	subs	r4, r4, r6
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	2500      	movs	r5, #0
 8004358:	42a5      	cmp	r5, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	4e0b      	ldr	r6, [pc, #44]	; (800438c <__libc_init_array+0x40>)
 800435e:	4c0c      	ldr	r4, [pc, #48]	; (8004390 <__libc_init_array+0x44>)
 8004360:	f000 f820 	bl	80043a4 <_init>
 8004364:	1ba4      	subs	r4, r4, r6
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	2500      	movs	r5, #0
 800436a:	42a5      	cmp	r5, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004374:	4798      	blx	r3
 8004376:	3501      	adds	r5, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800437e:	4798      	blx	r3
 8004380:	3501      	adds	r5, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	0800440c 	.word	0x0800440c
 8004388:	0800440c 	.word	0x0800440c
 800438c:	0800440c 	.word	0x0800440c
 8004390:	08004410 	.word	0x08004410

08004394 <memset>:
 8004394:	4402      	add	r2, r0
 8004396:	4603      	mov	r3, r0
 8004398:	4293      	cmp	r3, r2
 800439a:	d100      	bne.n	800439e <memset+0xa>
 800439c:	4770      	bx	lr
 800439e:	f803 1b01 	strb.w	r1, [r3], #1
 80043a2:	e7f9      	b.n	8004398 <memset+0x4>

080043a4 <_init>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr

080043b0 <_fini>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr
